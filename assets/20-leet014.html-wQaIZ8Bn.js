import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as t}from"./app-zkxKMUJO.js";const l={};function o(p,s){return t(),a("div",null,s[0]||(s[0]=[n(`<h2 id="🚀-相关链接" tabindex="-1"><a class="header-anchor" href="#🚀-相关链接"><span>🚀 相关链接</span></a></h2><p><a href="https://leetcode.cn/problems/longest-common-prefix/description/?envType=study-plan-v2&amp;envId=top-interview-150" target="_blank" rel="noopener noreferrer">LeetCode 14 - 最长公共前缀</a></p><h2 id="📜-描述" tabindex="-1"><a class="header-anchor" href="#📜-描述"><span>📜 描述</span></a></h2><p>编写一个函数来查找字符串数组中的最长公共前缀。</p><p>如果不存在公共前缀，返回空字符串 <code>&quot;&quot;</code>。</p><h2 id="💡-示例" tabindex="-1"><a class="header-anchor" href="#💡-示例"><span>💡 示例</span></a></h2><h3 id="示例-1" tabindex="-1"><a class="header-anchor" href="#示例-1"><span>示例 1</span></a></h3><ul><li><strong>输入</strong>: <code>strs = [&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]</code></li><li><strong>输出</strong>: <code>&quot;fl&quot;</code></li></ul><h3 id="示例-2" tabindex="-1"><a class="header-anchor" href="#示例-2"><span>示例 2</span></a></h3><ul><li><strong>输入</strong>: <code>strs = [&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]</code></li><li><strong>输出</strong>: <code>&quot;&quot;</code></li><li><strong>解释</strong>: 输入不存在公共前缀。</li></ul><h2 id="📝-提示" tabindex="-1"><a class="header-anchor" href="#📝-提示"><span>📝 提示</span></a></h2><ol><li><code>1 &lt;= strs.length &lt;= 200</code></li><li><code>0 &lt;= strs[i].length &lt;= 200</code></li><li><code>strs[i]</code> 如果非空，则仅由小写英文字母组成</li></ol><h2 id="💭-思路" tabindex="-1"><a class="header-anchor" href="#💭-思路"><span>💭 思路</span></a></h2><p>通过将字符串数组排序，比较第一个和最后一个字符串的公共前缀，这样可以减少比较的次数，提高效率。</p><h2 id="💻-代码实现" tabindex="-1"><a class="header-anchor" href="#💻-代码实现"><span>💻 代码实现</span></a></h2><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#569CD6;">public</span><span style="color:#4EC9B0;"> String</span><span style="color:#DCDCAA;"> longestCommonPrefix</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">[] strs) {</span></span>
<span class="line"><span style="color:#C586C0;">        if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">strs</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> == </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#C586C0;">            return</span><span style="color:#D4D4D4;"> strs[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">];</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#4EC9B0;">        List</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;">list</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">Arrays</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">stream</span><span style="color:#D4D4D4;">(strs).</span><span style="color:#DCDCAA;">sorted</span><span style="color:#D4D4D4;">().</span><span style="color:#DCDCAA;">toList</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#4EC9B0;">        String</span><span style="color:#9CDCFE;"> s1</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">list</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getFirst</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#4EC9B0;">        String</span><span style="color:#9CDCFE;"> s2</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">list</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getLast</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">        for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#9CDCFE;"> i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; i &lt; </span><span style="color:#9CDCFE;">s1</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">length</span><span style="color:#D4D4D4;">(); i++) {</span></span>
<span class="line"><span style="color:#4EC9B0;">            String</span><span style="color:#9CDCFE;"> subStr1</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">s1</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">substring</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, i + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#C586C0;">            if</span><span style="color:#D4D4D4;"> (!</span><span style="color:#9CDCFE;">s2</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">startsWith</span><span style="color:#D4D4D4;">(subStr1)) {</span></span>
<span class="line"><span style="color:#C586C0;">                return</span><span style="color:#9CDCFE;"> s1</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">substring</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, i);</span></span>
<span class="line"><span style="color:#D4D4D4;">            }</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#C586C0;">        return</span><span style="color:#D4D4D4;"> s1;</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span></code></pre></div>`,16)]))}const i=e(l,[["render",o]]),D=JSON.parse(`{"path":"/note/leet150/20-leet014.html","title":"14 最长公共前缀","lang":"zh-CN","frontmatter":{"title":"14 最长公共前缀","order":20,"category":["LeetCode"],"tag":["LeetCode面试经典150题","LeetCode14","简单题","字符串"],"description":"🚀 相关链接 LeetCode 14 - 最长公共前缀 📜 描述 编写一个函数来查找字符串数组中的最长公共前缀。 如果不存在公共前缀，返回空字符串 \\"\\"。 💡 示例 示例 1 输入: strs = [\\"flower\\",\\"flow\\",\\"flight\\"] 输出: \\"fl\\" 示例 2 输入: strs = [\\"dog\\",\\"racecar\\",\\"car\\"]...","head":[["meta",{"property":"og:url","content":"https://jayczee.cn/note/leet150/20-leet014.html"}],["meta",{"property":"og:site_name","content":"Jayczee's Blog"}],["meta",{"property":"og:title","content":"14 最长公共前缀"}],["meta",{"property":"og:description","content":"🚀 相关链接 LeetCode 14 - 最长公共前缀 📜 描述 编写一个函数来查找字符串数组中的最长公共前缀。 如果不存在公共前缀，返回空字符串 \\"\\"。 💡 示例 示例 1 输入: strs = [\\"flower\\",\\"flow\\",\\"flight\\"] 输出: \\"fl\\" 示例 2 输入: strs = [\\"dog\\",\\"racecar\\",\\"car\\"]..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-22T03:30:38.000Z"}],["meta",{"property":"article:tag","content":"LeetCode面试经典150题"}],["meta",{"property":"article:tag","content":"LeetCode14"}],["meta",{"property":"article:tag","content":"简单题"}],["meta",{"property":"article:tag","content":"字符串"}],["meta",{"property":"article:modified_time","content":"2025-05-22T03:30:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"14 最长公共前缀\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-22T03:30:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jayczee\\",\\"url\\":\\"https://jayczee.cn\\"}]}"]]},"headers":[{"level":2,"title":"🚀 相关链接","slug":"🚀-相关链接","link":"#🚀-相关链接","children":[]},{"level":2,"title":"📜 描述","slug":"📜-描述","link":"#📜-描述","children":[]},{"level":2,"title":"💡 示例","slug":"💡-示例","link":"#💡-示例","children":[{"level":3,"title":"示例 1","slug":"示例-1","link":"#示例-1","children":[]},{"level":3,"title":"示例 2","slug":"示例-2","link":"#示例-2","children":[]}]},{"level":2,"title":"📝 提示","slug":"📝-提示","link":"#📝-提示","children":[]},{"level":2,"title":"💭 思路","slug":"💭-思路","link":"#💭-思路","children":[]},{"level":2,"title":"💻 代码实现","slug":"💻-代码实现","link":"#💻-代码实现","children":[]}],"git":{"createdTime":1747884638000,"updatedTime":1747884638000,"contributors":[{"name":"Jayczee","username":"Jayczee","email":"jayczee@yeah.net","commits":1,"url":"https://github.com/Jayczee"}]},"readingTime":{"minutes":0.84,"words":252},"filePathRelative":"note/leet150/20-leet014.md","localizedDate":"2025年5月22日","excerpt":"<h2>🚀 相关链接</h2>\\n<p><a href=\\"https://leetcode.cn/problems/longest-common-prefix/description/?envType=study-plan-v2&amp;envId=top-interview-150\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">LeetCode 14 - 最长公共前缀</a></p>\\n<h2>📜 描述</h2>\\n<p>编写一个函数来查找字符串数组中的最长公共前缀。</p>\\n<p>如果不存在公共前缀，返回空字符串 <code>\\"\\"</code>。</p>","autoDesc":true}`);export{i as comp,D as data};
