import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a,o as l}from"./app-DXs7qa2N.js";const o={};function t(p,s){return l(),e("div",null,s[0]||(s[0]=[a(`<h2 id="🚀-相关链接" tabindex="-1"><a class="header-anchor" href="#🚀-相关链接"><span>🚀 相关链接</span></a></h2><p><a href="https://leetcode.cn/problems/3sum/description/?envType=study-plan-v2&amp;envId=top-interview-150" target="_blank" rel="noopener noreferrer">LeetCode 15 - 三数之和</a></p><h2 id="📜-描述" tabindex="-1"><a class="header-anchor" href="#📜-描述"><span>📜 描述</span></a></h2><p>给你一个整数数组 <code>nums</code>，判断是否存在三元组 <code>[nums[i], nums[j], nums[k]]</code> 满足 <code>i != j</code>、<code>i != k</code> 且 <code>j != k</code>，同时还满足 <code>nums[i] + nums[j] + nums[k] == 0</code>。请你返回所有和为 <code>0</code> 且不重复的三元组。</p><p><strong>注意</strong>：答案中不可以包含重复的三元组。</p><h2 id="💡-示例" tabindex="-1"><a class="header-anchor" href="#💡-示例"><span>💡 示例</span></a></h2><h3 id="示例-1" tabindex="-1"><a class="header-anchor" href="#示例-1"><span>示例 1</span></a></h3><ul><li><strong>输入</strong>: <code>nums = [-1,0,1,2,-1,-4]</code></li><li><strong>输出</strong>: <code>[[-1,-1,2],[-1,0,1]]</code></li><li><strong>解释</strong>: <ul><li><code>nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0</code>。</li><li><code>nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0</code>。</li><li><code>nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0</code>。</li><li>不同的三元组是 <code>[-1,0,1]</code> 和 <code>[-1,-1,2]</code>。</li><li>注意，输出的顺序和三元组的顺序并不重要。</li></ul></li></ul><h3 id="示例-2" tabindex="-1"><a class="header-anchor" href="#示例-2"><span>示例 2</span></a></h3><ul><li><strong>输入</strong>: <code>nums = [0,1,1]</code></li><li><strong>输出</strong>: <code>[]</code></li><li><strong>解释</strong>: 唯一可能的三元组和不为 <code>0</code>。</li></ul><h3 id="示例-3" tabindex="-1"><a class="header-anchor" href="#示例-3"><span>示例 3</span></a></h3><ul><li><strong>输入</strong>: <code>nums = [0,0,0]</code></li><li><strong>输出</strong>: <code>[[0,0,0]]</code></li><li><strong>解释</strong>: 唯一可能的三元组和为 <code>0</code>。</li></ul><h2 id="📝-提示" tabindex="-1"><a class="header-anchor" href="#📝-提示"><span>📝 提示</span></a></h2><ul><li><code>3 &lt;= nums.length &lt;= 3000</code></li><li><code>-10^5 &lt;= nums[i] &lt;= 10^5</code></li></ul><h2 id="💭-思路" tabindex="-1"><a class="header-anchor" href="#💭-思路"><span>💭 思路</span></a></h2><ol><li><strong>排序</strong>：首先对数组进行排序，便于后续操作。</li><li><strong>双指针</strong>：遍历数组，对于每个元素 <code>nums[i]</code>，使用双指针 <code>l</code> 和 <code>r</code> 分别指向 <code>i+1</code> 和 <code>nums.length-1</code>，寻找满足 <code>nums[i] + nums[l] + nums[r] == 0</code> 的三元组。</li><li><strong>去重</strong>：为了避免重复的三元组，当 <code>nums[i] == nums[i-1]</code> 时，跳过当前元素。同时，在找到满足条件的三元组后，移动指针 <code>l</code> 和 <code>r</code> 时也需跳过重复元素。</li></ol><h2 id="💻-代码实现" tabindex="-1"><a class="header-anchor" href="#💻-代码实现"><span>💻 代码实现</span></a></h2><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#569CD6;">public</span><span style="color:#4EC9B0;"> List</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">List</span><span style="color:#D4D4D4;">&lt;Integer&gt;&gt; </span><span style="color:#DCDCAA;">threeSum</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] nums) {</span></span>
<span class="line"><span style="color:#4EC9B0;">    Set</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">List</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">Integer</span><span style="color:#D4D4D4;">&gt;&gt; </span><span style="color:#9CDCFE;">set</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#4EC9B0;"> HashSet</span><span style="color:#D4D4D4;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#9CDCFE;">    Arrays</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">sort</span><span style="color:#D4D4D4;">(nums);</span></span>
<span class="line"><span style="color:#C586C0;">    for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#9CDCFE;"> i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; i &lt; </span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">; i++) {</span></span>
<span class="line"><span style="color:#C586C0;">        if</span><span style="color:#D4D4D4;"> (i &gt; </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;"> &amp;&amp; nums[i] == nums[i - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">]) {</span></span>
<span class="line"><span style="color:#C586C0;">            continue</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#4EC9B0;">        int</span><span style="color:#9CDCFE;"> diff</span><span style="color:#D4D4D4;"> = -nums[i];</span></span>
<span class="line"><span style="color:#4EC9B0;">        int</span><span style="color:#9CDCFE;"> l</span><span style="color:#D4D4D4;"> = i + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, r = </span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;">        while</span><span style="color:#D4D4D4;"> (l &lt; r) {</span></span>
<span class="line"><span style="color:#4EC9B0;">            int</span><span style="color:#9CDCFE;"> sum</span><span style="color:#D4D4D4;"> = nums[l] + nums[r];</span></span>
<span class="line"><span style="color:#C586C0;">            if</span><span style="color:#D4D4D4;"> (sum &gt; diff) {</span></span>
<span class="line"><span style="color:#D4D4D4;">                r--;</span></span>
<span class="line"><span style="color:#D4D4D4;">            } </span><span style="color:#C586C0;">else</span><span style="color:#C586C0;"> if</span><span style="color:#D4D4D4;"> (sum &lt; diff) {</span></span>
<span class="line"><span style="color:#D4D4D4;">                l++;</span></span>
<span class="line"><span style="color:#D4D4D4;">            } </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">                set</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">add</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">Arrays</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">asList</span><span style="color:#D4D4D4;">(nums[i], nums[l], nums[r]));</span></span>
<span class="line"><span style="color:#D4D4D4;">                l++;</span></span>
<span class="line"><span style="color:#D4D4D4;">                r--;</span></span>
<span class="line"><span style="color:#D4D4D4;">            }</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#9CDCFE;"> set</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">stream</span><span style="color:#D4D4D4;">().</span><span style="color:#DCDCAA;">toList</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre></div>`,18)]))}const i=n(o,[["render",t]]),D=JSON.parse(`{"path":"/note/leet150/29-leet015.html","title":"15 三数之和","lang":"zh-CN","frontmatter":{"title":"15 三数之和","order":29,"category":["LeetCode"],"tag":["LeetCode面试经典150题","LeetCode15","中等题","双指针"],"description":"🚀 相关链接 LeetCode 15 - 三数之和 📜 描述 给你一个整数数组 nums，判断是否存在三元组 [nums[i], nums[j], nums[k]] 满足 i != j、i != k 且 j != k，同时还满足 nums[i] + nums[j] + nums[k] == 0。请你返回所有和为 0 且不重复的三元组。 注意：答案中...","head":[["meta",{"property":"og:url","content":"https://jayczee.cn/note/leet150/29-leet015.html"}],["meta",{"property":"og:site_name","content":"Jayczee's Blog"}],["meta",{"property":"og:title","content":"15 三数之和"}],["meta",{"property":"og:description","content":"🚀 相关链接 LeetCode 15 - 三数之和 📜 描述 给你一个整数数组 nums，判断是否存在三元组 [nums[i], nums[j], nums[k]] 满足 i != j、i != k 且 j != k，同时还满足 nums[i] + nums[j] + nums[k] == 0。请你返回所有和为 0 且不重复的三元组。 注意：答案中..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-26T07:30:05.000Z"}],["meta",{"property":"article:tag","content":"LeetCode面试经典150题"}],["meta",{"property":"article:tag","content":"LeetCode15"}],["meta",{"property":"article:tag","content":"中等题"}],["meta",{"property":"article:tag","content":"双指针"}],["meta",{"property":"article:modified_time","content":"2025-05-26T07:30:05.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"15 三数之和\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-26T07:30:05.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jayczee\\",\\"url\\":\\"https://jayczee.cn\\"}]}"]]},"headers":[{"level":2,"title":"🚀 相关链接","slug":"🚀-相关链接","link":"#🚀-相关链接","children":[]},{"level":2,"title":"📜 描述","slug":"📜-描述","link":"#📜-描述","children":[]},{"level":2,"title":"💡 示例","slug":"💡-示例","link":"#💡-示例","children":[{"level":3,"title":"示例 1","slug":"示例-1","link":"#示例-1","children":[]},{"level":3,"title":"示例 2","slug":"示例-2","link":"#示例-2","children":[]},{"level":3,"title":"示例 3","slug":"示例-3","link":"#示例-3","children":[]}]},{"level":2,"title":"📝 提示","slug":"📝-提示","link":"#📝-提示","children":[]},{"level":2,"title":"💭 思路","slug":"💭-思路","link":"#💭-思路","children":[]},{"level":2,"title":"💻 代码实现","slug":"💻-代码实现","link":"#💻-代码实现","children":[]}],"git":{"createdTime":1748244605000,"updatedTime":1748244605000,"contributors":[{"name":"Jayczee","username":"Jayczee","email":"jayczee@yeah.net","commits":1,"url":"https://github.com/Jayczee"}]},"readingTime":{"minutes":1.59,"words":477},"filePathRelative":"note/leet150/29-leet015.md","localizedDate":"2025年5月26日","excerpt":"<h2>🚀 相关链接</h2>\\n<p><a href=\\"https://leetcode.cn/problems/3sum/description/?envType=study-plan-v2&amp;envId=top-interview-150\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">LeetCode 15 - 三数之和</a></p>\\n<h2>📜 描述</h2>\\n<p>给你一个整数数组 <code>nums</code>，判断是否存在三元组 <code>[nums[i], nums[j], nums[k]]</code> 满足 <code>i != j</code>、<code>i != k</code> 且 <code>j != k</code>，同时还满足 <code>nums[i] + nums[j] + nums[k] == 0</code>。请你返回所有和为 <code>0</code> 且不重复的三元组。</p>","autoDesc":true}`);export{i as comp,D as data};
