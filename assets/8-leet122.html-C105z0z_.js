import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a as n,o as l}from"./app-Dv5BnGuG.js";const p={};function t(o,s){return l(),e("div",null,s[0]||(s[0]=[n(`<h2 id="🔗-相关链接" tabindex="-1"><a class="header-anchor" href="#🔗-相关链接"><span>🔗 相关链接</span></a></h2><p><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/description/?envType=study-plan-v2&amp;envId=top-interview-150" target="_blank" rel="noopener noreferrer">买卖股票的最佳时机 II</a></p><h2 id="📜-股票交易最大利润" tabindex="-1"><a class="header-anchor" href="#📜-股票交易最大利润"><span>📜 股票交易最大利润</span></a></h2><p>给定一个整数数组 <code>prices</code>，其中 <code>prices[i]</code> 表示某支股票第 <code>i</code> 天的价格。在每一天，可以决定是否购买和/或出售股票。注意，在任何时候最多只能持有一股股票，也可以选择在同一天买入并出售。</p><h2 id="🎯-目标" tabindex="-1"><a class="header-anchor" href="#🎯-目标"><span>🎯 目标</span></a></h2><p>返回能够获得的最大利润。</p><h2 id="📊-示例" tabindex="-1"><a class="header-anchor" href="#📊-示例"><span>📊 示例</span></a></h2><h3 id="示例-1" tabindex="-1"><a class="header-anchor" href="#示例-1"><span>示例 1</span></a></h3><p><strong>输入：</strong></p><div class="language-plaintext" data-highlighter="shiki" data-ext="plaintext" data-title="plaintext" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span>prices = [7,1,5,3,6,4]</span></span></code></pre></div><p><strong>输出：</strong></p><div class="language-plaintext" data-highlighter="shiki" data-ext="plaintext" data-title="plaintext" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span>7</span></span></code></pre></div><p><strong>解释：</strong></p><ul><li>在第 2 天（股票价格 = 1）时买入，在第 3 天（股票价格 = 5）时卖出，获得利润 = 5 - 1 = 4。</li><li>随后，在第 4 天（股票价格 = 3）时买入，在第 5 天（股票价格 = 6）时卖出，获得利润 = 6 - 3 = 3。</li><li>最大总利润为 4 + 3 = 7。</li></ul><h3 id="示例-2" tabindex="-1"><a class="header-anchor" href="#示例-2"><span>示例 2</span></a></h3><p><strong>输入：</strong></p><div class="language-plaintext" data-highlighter="shiki" data-ext="plaintext" data-title="plaintext" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span>prices = [1,2,3,4,5]</span></span></code></pre></div><p><strong>输出：</strong></p><div class="language-plaintext" data-highlighter="shiki" data-ext="plaintext" data-title="plaintext" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span>4</span></span></code></pre></div><p><strong>解释：</strong></p><ul><li>在第 1 天（股票价格 = 1）时买入，在第 5 天（股票价格 = 5）时卖出，获得利润 = 5 - 1 = 4。</li><li>最大总利润为 4。</li></ul><h3 id="示例-3" tabindex="-1"><a class="header-anchor" href="#示例-3"><span>示例 3</span></a></h3><p><strong>输入：</strong></p><div class="language-plaintext" data-highlighter="shiki" data-ext="plaintext" data-title="plaintext" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span>prices = [7,6,4,3,1]</span></span></code></pre></div><p><strong>输出：</strong></p><div class="language-plaintext" data-highlighter="shiki" data-ext="plaintext" data-title="plaintext" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span>0</span></span></code></pre></div><p><strong>解释：</strong></p><ul><li>在这种情况下，无法获得正利润，因此不参与交易可以获得最大利润，最大利润为 0。</li></ul><h2 id="📝-提示" tabindex="-1"><a class="header-anchor" href="#📝-提示"><span>📝 提示</span></a></h2><ul><li><code>1 &lt;= prices.length &lt;= 3 * 10^4</code></li><li><code>0 &lt;= prices[i] &lt;= 10^4</code></li></ul><h2 id="💡-思路" tabindex="-1"><a class="header-anchor" href="#💡-思路"><span>💡 思路</span></a></h2><h3 id="动态规划" tabindex="-1"><a class="header-anchor" href="#动态规划"><span>动态规划</span></a></h3><p>由于在任何时候最多只能持有一种股票，那么在第n天交易结束时具有不持有股票和持有股票两种状态，即 <code>dp[n][0]</code> 和 <code>dp[n][1]</code>。 n从0开始计算。</p><p>不持有股票时，截止第n天所能获得的最大利润需要参考前一天的状态：</p><ul><li>若前一天 <code>n-1</code> 持有股票，第n天无股票，则为卖出股票，则 <code>dp[n][0] = dp[n-1][1] + price[n]</code>；</li><li>若前一天 <code>n-1</code> 不持有股票，第n天无股票，则为无操作，此时截止第n天所获的利润与第n-1天相同，即 <code>dp[n][0] = dp[n-1][0]</code>。</li></ul><p>持有股票时：</p><ul><li>若前一天 <code>n-1</code> 持有股票，第n天持有股票，则为无操作，则 <code>dp[n][1] = dp[n-1][1]</code>；</li><li>若前一天 <code>n-1</code> 不持有股票，第n天不持有股票，则为买入股票，则 <code>dp[n][1] = dp[n-1][0] - price[n]</code>。</li></ul><p>综上：</p><ul><li><code>dp[n][0] = max(dp[n-1][1] + price[n], dp[n-1][0])</code></li><li><code>dp[n][1] = max(dp[n-1][0] - price[n], dp[n-1][1])</code></li></ul><p>算出最后一天的 <code>dp[n][0]</code> 即可。</p><p>根据定义：<code>dp[0][0] = 0, dp[0][1] = -price[0]</code>。</p><h3 id="贪心" tabindex="-1"><a class="header-anchor" href="#贪心"><span>贪心</span></a></h3><p>由于交易次数不受限，所以计算每一个 <code>price[i] - price[i-1] &gt; 0</code> 的总和即可。</p><h2 id="💻-代码实现" tabindex="-1"><a class="header-anchor" href="#💻-代码实现"><span>💻 代码实现</span></a></h2><h3 id="动态规划-1" tabindex="-1"><a class="header-anchor" href="#动态规划-1"><span>动态规划</span></a></h3><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#569CD6;">public</span><span style="color:#4EC9B0;"> int</span><span style="color:#DCDCAA;"> maxProfit</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] prices) {</span></span>
<span class="line"><span style="color:#4EC9B0;">    int</span><span style="color:#D4D4D4;">[][] </span><span style="color:#9CDCFE;">dp</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#4EC9B0;"> int</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">prices</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">][</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">];</span></span>
<span class="line"><span style="color:#C586C0;">    for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#9CDCFE;"> i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; i &lt; </span><span style="color:#9CDCFE;">prices</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">; i++) {</span></span>
<span class="line"><span style="color:#C586C0;">        if</span><span style="color:#D4D4D4;"> (i == </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">            dp[i][</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">] = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">            dp[i][</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">] = -prices[i];</span></span>
<span class="line"><span style="color:#D4D4D4;">        } </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">            dp[i][</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">] = </span><span style="color:#9CDCFE;">Math</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">max</span><span style="color:#D4D4D4;">(dp[i-</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">][</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">], dp[i-</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">][</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">] + prices[i]);</span></span>
<span class="line"><span style="color:#D4D4D4;">            dp[i][</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">] = </span><span style="color:#9CDCFE;">Math</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">max</span><span style="color:#D4D4D4;">(dp[i-</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">][</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">] - prices[i], dp[i-</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">][</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">]);</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#D4D4D4;"> dp[</span><span style="color:#9CDCFE;">prices</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">][</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">];</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre></div><h3 id="贪心-1" tabindex="-1"><a class="header-anchor" href="#贪心-1"><span>贪心</span></a></h3><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#569CD6;">public</span><span style="color:#4EC9B0;"> int</span><span style="color:#DCDCAA;"> maxProfit</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] prices) {</span></span>
<span class="line"><span style="color:#4EC9B0;">    int</span><span style="color:#9CDCFE;"> sum</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;">    for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#9CDCFE;"> i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">; i &lt; </span><span style="color:#9CDCFE;">prices</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">; i++) {</span></span>
<span class="line"><span style="color:#4EC9B0;">        int</span><span style="color:#9CDCFE;"> res</span><span style="color:#D4D4D4;"> = prices[i] - prices[i - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">];</span></span>
<span class="line"><span style="color:#C586C0;">        if</span><span style="color:#D4D4D4;"> (res &gt; </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">            sum += res;</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#D4D4D4;"> sum;</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre></div>`,48)]))}const i=a(p,[["render",t]]),d=JSON.parse(`{"path":"/note/leet150/8-leet122.html","title":"122 买卖股票的最佳时机 II","lang":"zh-CN","frontmatter":{"title":"122 买卖股票的最佳时机 II","order":8,"category":["LeetCode"],"tag":["LeetCode面试经典150题","LeetCode122","中等题","动态规划","贪心","数组"],"description":"🔗 相关链接 买卖股票的最佳时机 II 📜 股票交易最大利润 给定一个整数数组 prices，其中 prices[i] 表示某支股票第 i 天的价格。在每一天，可以决定是否购买和/或出售股票。注意，在任何时候最多只能持有一股股票，也可以选择在同一天买入并出售。 🎯 目标 返回能够获得的最大利润。 📊 示例 示例 1 输入： 输出： 解释： 在第...","head":[["meta",{"property":"og:url","content":"https://jayczee.cn/note/leet150/8-leet122.html"}],["meta",{"property":"og:site_name","content":"Jayczee's Blog"}],["meta",{"property":"og:title","content":"122 买卖股票的最佳时机 II"}],["meta",{"property":"og:description","content":"🔗 相关链接 买卖股票的最佳时机 II 📜 股票交易最大利润 给定一个整数数组 prices，其中 prices[i] 表示某支股票第 i 天的价格。在每一天，可以决定是否购买和/或出售股票。注意，在任何时候最多只能持有一股股票，也可以选择在同一天买入并出售。 🎯 目标 返回能够获得的最大利润。 📊 示例 示例 1 输入： 输出： 解释： 在第..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-04T03:35:17.000Z"}],["meta",{"property":"article:tag","content":"LeetCode面试经典150题"}],["meta",{"property":"article:tag","content":"LeetCode122"}],["meta",{"property":"article:tag","content":"中等题"}],["meta",{"property":"article:tag","content":"动态规划"}],["meta",{"property":"article:tag","content":"贪心"}],["meta",{"property":"article:tag","content":"数组"}],["meta",{"property":"article:modified_time","content":"2025-03-04T03:35:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"122 买卖股票的最佳时机 II\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-04T03:35:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jayczee\\",\\"url\\":\\"https://jayczee.cn\\"}]}"]]},"headers":[{"level":2,"title":"🔗 相关链接","slug":"🔗-相关链接","link":"#🔗-相关链接","children":[]},{"level":2,"title":"📜 股票交易最大利润","slug":"📜-股票交易最大利润","link":"#📜-股票交易最大利润","children":[]},{"level":2,"title":"🎯 目标","slug":"🎯-目标","link":"#🎯-目标","children":[]},{"level":2,"title":"📊 示例","slug":"📊-示例","link":"#📊-示例","children":[{"level":3,"title":"示例 1","slug":"示例-1","link":"#示例-1","children":[]},{"level":3,"title":"示例 2","slug":"示例-2","link":"#示例-2","children":[]},{"level":3,"title":"示例 3","slug":"示例-3","link":"#示例-3","children":[]}]},{"level":2,"title":"📝 提示","slug":"📝-提示","link":"#📝-提示","children":[]},{"level":2,"title":"💡 思路","slug":"💡-思路","link":"#💡-思路","children":[{"level":3,"title":"动态规划","slug":"动态规划","link":"#动态规划","children":[]},{"level":3,"title":"贪心","slug":"贪心","link":"#贪心","children":[]}]},{"level":2,"title":"💻 代码实现","slug":"💻-代码实现","link":"#💻-代码实现","children":[{"level":3,"title":"动态规划","slug":"动态规划-1","link":"#动态规划-1","children":[]},{"level":3,"title":"贪心","slug":"贪心-1","link":"#贪心-1","children":[]}]}],"git":{"createdTime":1741058319000,"updatedTime":1741059317000,"contributors":[{"name":"Jayczee","username":"Jayczee","email":"jayczee@yeah.net","commits":2,"url":"https://github.com/Jayczee"}]},"readingTime":{"minutes":2.71,"words":812},"filePathRelative":"note/leet150/8-leet122.md","localizedDate":"2025年3月4日","excerpt":"<h2>🔗 相关链接</h2>\\n<p><a href=\\"https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/description/?envType=study-plan-v2&amp;envId=top-interview-150\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">买卖股票的最佳时机 II</a></p>\\n<h2>📜 股票交易最大利润</h2>\\n<p>给定一个整数数组 <code>prices</code>，其中 <code>prices[i]</code> 表示某支股票第 <code>i</code> 天的价格。在每一天，可以决定是否购买和/或出售股票。注意，在任何时候最多只能持有一股股票，也可以选择在同一天买入并出售。</p>","autoDesc":true}`);export{i as comp,d as data};
