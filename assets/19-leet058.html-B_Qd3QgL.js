import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as l,o as n}from"./app-DFbPUm1L.js";const o={};function t(p,e){return n(),a("div",null,e[0]||(e[0]=[l(`<h2 id="🚀-相关链接" tabindex="-1"><a class="header-anchor" href="#🚀-相关链接"><span>🚀 相关链接</span></a></h2><p><a href="https://leetcode.cn/problems/length-of-last-word/description/?envType=study-plan-v2&amp;envId=top-interview-150" target="_blank" rel="noopener noreferrer">LeetCode 058 - 最后一个单词的长度</a></p><h2 id="📜-描述" tabindex="-1"><a class="header-anchor" href="#📜-描述"><span>📜 描述</span></a></h2><p>给你一个字符串 <code>s</code>，由若干单词组成，单词前后用一些空格字符隔开。返回字符串中 <strong>最后一个</strong> 单词的长度。</p><p><strong>单词</strong> 是指仅由字母组成、不包含任何空格字符的最大子字符串。</p><h2 id="💡-示例" tabindex="-1"><a class="header-anchor" href="#💡-示例"><span>💡 示例</span></a></h2><h3 id="示例-1" tabindex="-1"><a class="header-anchor" href="#示例-1"><span>示例 1</span></a></h3><ul><li><strong>输入</strong>: <code>s = &quot;Hello World&quot;</code></li><li><strong>输出</strong>: <code>5</code></li><li><strong>解释</strong>: 最后一个单词是“World”，长度为 5。</li></ul><h3 id="示例-2" tabindex="-1"><a class="header-anchor" href="#示例-2"><span>示例 2</span></a></h3><ul><li><strong>输入</strong>: <code>s = &quot; fly me to the moon &quot;</code></li><li><strong>输出</strong>: <code>4</code></li><li><strong>解释</strong>: 最后一个单词是“moon”，长度为 4。</li></ul><h3 id="示例-3" tabindex="-1"><a class="header-anchor" href="#示例-3"><span>示例 3</span></a></h3><ul><li><strong>输入</strong>: <code>s = &quot;luffy is still joyboy&quot;</code></li><li><strong>输出</strong>: <code>6</code></li><li><strong>解释</strong>: 最后一个单词是“joyboy”，长度为 6。</li></ul><h2 id="📝-提示" tabindex="-1"><a class="header-anchor" href="#📝-提示"><span>📝 提示</span></a></h2><ul><li><code>1 &lt;= s.length &lt;= 10^4</code></li><li><code>s</code> 仅有英文字母和空格 <code>&#39; &#39;</code> 组成</li><li><code>s</code> 中至少存在一个单词</li></ul><h2 id="💭-思路" tabindex="-1"><a class="header-anchor" href="#💭-思路"><span>💭 思路</span></a></h2><p>从字符串的末尾开始遍历，找到最后一个单词的开头和结尾，计算其长度。</p><ol><li>初始化一个标志位 <code>flag</code> 为 <code>false</code>，用于判断是否进入了最后一个单词。</li><li>从字符串的最后一个字符开始，向前遍历： <ul><li>如果当前字符不是空格，且 <code>flag</code> 为 <code>false</code>，则进入最后一个单词，并设置 <code>flag</code> 为 <code>true</code>，同时初始化长度为 1。</li><li>如果当前字符不是空格，且 <code>flag</code> 为 <code>true</code>，则长度加 1。</li><li>如果当前字符是空格，且 <code>flag</code> 为 <code>true</code>，则返回当前计算的长度。</li></ul></li><li>如果遍历结束后仍未返回，则返回当前计算的长度。</li></ol><h2 id="💻-代码实现" tabindex="-1"><a class="header-anchor" href="#💻-代码实现"><span>💻 代码实现</span></a></h2><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#569CD6;">public</span><span style="color:#4EC9B0;"> int</span><span style="color:#DCDCAA;"> lengthOfLastWord</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;"> s) {</span></span>
<span class="line"><span style="color:#4EC9B0;">    int</span><span style="color:#9CDCFE;"> len</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">length</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#4EC9B0;">    boolean</span><span style="color:#9CDCFE;"> flag</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#4EC9B0;">    int</span><span style="color:#9CDCFE;"> res</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;">    for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#9CDCFE;"> i</span><span style="color:#D4D4D4;"> = len - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">; i &gt;= </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; i--) {</span></span>
<span class="line"><span style="color:#4EC9B0;">        char</span><span style="color:#9CDCFE;"> c</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">charAt</span><span style="color:#D4D4D4;">(i);</span></span>
<span class="line"><span style="color:#C586C0;">        if</span><span style="color:#D4D4D4;"> (!flag &amp;&amp; c != </span><span style="color:#CE9178;">&#39; &#39;</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">            flag = </span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">            res = </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">        } </span><span style="color:#C586C0;">else</span><span style="color:#C586C0;"> if</span><span style="color:#D4D4D4;"> (flag &amp;&amp; c != </span><span style="color:#CE9178;">&#39; &#39;</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">            res++;</span></span>
<span class="line"><span style="color:#D4D4D4;">        } </span><span style="color:#C586C0;">else</span><span style="color:#C586C0;"> if</span><span style="color:#D4D4D4;"> (flag) {</span></span>
<span class="line"><span style="color:#C586C0;">            return</span><span style="color:#D4D4D4;"> res;</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#D4D4D4;"> res;</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre></div>`,19)]))}const i=s(o,[["render",t]]),d=JSON.parse(`{"path":"/note/leet150/19-leet058.html","title":"058 最后一个单词的长度","lang":"zh-CN","frontmatter":{"title":"058 最后一个单词的长度","order":19,"category":["LeetCode"],"tag":["LeetCode面试经典150题","LeetCode058","简单题","字符串"],"description":"🚀 相关链接 LeetCode 058 - 最后一个单词的长度 📜 描述 给你一个字符串 s，由若干单词组成，单词前后用一些空格字符隔开。返回字符串中 最后一个 单词的长度。 单词 是指仅由字母组成、不包含任何空格字符的最大子字符串。 💡 示例 示例 1 输入: s = \\"Hello World\\" 输出: 5 解释: 最后一个单词是“World”...","head":[["meta",{"property":"og:url","content":"https://jayczee.cn/note/leet150/19-leet058.html"}],["meta",{"property":"og:site_name","content":"Jayczee's Blog"}],["meta",{"property":"og:title","content":"058 最后一个单词的长度"}],["meta",{"property":"og:description","content":"🚀 相关链接 LeetCode 058 - 最后一个单词的长度 📜 描述 给你一个字符串 s，由若干单词组成，单词前后用一些空格字符隔开。返回字符串中 最后一个 单词的长度。 单词 是指仅由字母组成、不包含任何空格字符的最大子字符串。 💡 示例 示例 1 输入: s = \\"Hello World\\" 输出: 5 解释: 最后一个单词是“World”..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-22T03:07:42.000Z"}],["meta",{"property":"article:tag","content":"LeetCode面试经典150题"}],["meta",{"property":"article:tag","content":"LeetCode058"}],["meta",{"property":"article:tag","content":"简单题"}],["meta",{"property":"article:tag","content":"字符串"}],["meta",{"property":"article:modified_time","content":"2025-05-22T03:07:42.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"058 最后一个单词的长度\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-22T03:07:42.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jayczee\\",\\"url\\":\\"https://jayczee.cn\\"}]}"]]},"headers":[{"level":2,"title":"🚀 相关链接","slug":"🚀-相关链接","link":"#🚀-相关链接","children":[]},{"level":2,"title":"📜 描述","slug":"📜-描述","link":"#📜-描述","children":[]},{"level":2,"title":"💡 示例","slug":"💡-示例","link":"#💡-示例","children":[{"level":3,"title":"示例 1","slug":"示例-1","link":"#示例-1","children":[]},{"level":3,"title":"示例 2","slug":"示例-2","link":"#示例-2","children":[]},{"level":3,"title":"示例 3","slug":"示例-3","link":"#示例-3","children":[]}]},{"level":2,"title":"📝 提示","slug":"📝-提示","link":"#📝-提示","children":[]},{"level":2,"title":"💭 思路","slug":"💭-思路","link":"#💭-思路","children":[]},{"level":2,"title":"💻 代码实现","slug":"💻-代码实现","link":"#💻-代码实现","children":[]}],"git":{"createdTime":1747883262000,"updatedTime":1747883262000,"contributors":[{"name":"Jayczee","username":"Jayczee","email":"jayczee@yeah.net","commits":1,"url":"https://github.com/Jayczee"}]},"readingTime":{"minutes":1.56,"words":468},"filePathRelative":"note/leet150/19-leet058.md","localizedDate":"2025年5月22日","excerpt":"<h2>🚀 相关链接</h2>\\n<p><a href=\\"https://leetcode.cn/problems/length-of-last-word/description/?envType=study-plan-v2&amp;envId=top-interview-150\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">LeetCode 058 - 最后一个单词的长度</a></p>\\n<h2>📜 描述</h2>\\n<p>给你一个字符串 <code>s</code>，由若干单词组成，单词前后用一些空格字符隔开。返回字符串中 <strong>最后一个</strong> 单词的长度。</p>","autoDesc":true}`);export{i as comp,d as data};
