import{_ as t,c as e,a,b as i,e as l,f as r,r as p,o,d as h}from"./app-BPSKwAMP.js";const d="/assets/images/nas/qbittorrent/qbit-1.png",c="/assets/images/nas/qbittorrent/qbit-2.png",k={};function g(B,s){const n=p("RouteLink");return o(),e("div",null,[s[1]||(s[1]=a(`<p><strong>qBittorrent</strong> 是一个开源的 BitTorrent 客户端，旨在提供一个用户友好的界面和丰富的功能。它支持多种操作系统，包括 <strong>Windows</strong>、<strong>macOS</strong> 和 <strong>Linux</strong>。qBittorrent 不仅可以下载种子文件，还支持磁力链接，并内置搜索功能，方便用户查找和下载内容。✨</p><p>将以下 <strong>docker compose</strong> 配置文件复制进 <strong>Stack</strong>，点击 <strong>Deploy the stack</strong> 进行部署。</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">volumes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  qbittorrent_data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">services</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  qbittorrent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    image</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">lscr.io/linuxserver/qbittorrent:latest</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    container_name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">qbittorrent</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    environment</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">PUID=0</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">PGID=0</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">TZ=Asia/Shanghai</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">WEBUI_PORT=53000</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    volumes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">qbittorrent_data:/config</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/mnt:/mnt</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    ports</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">53000:53000</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">53001:6881</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">53001:6881/udp</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    restart</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">unless-stopped</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="📌-配置说明" tabindex="-1"><a class="header-anchor" href="#📌-配置说明"><span>📌 配置说明</span></a></h3><ul><li><strong>services</strong>: 定义服务，这里只有一个 <code>qbittorrent</code> 服务。 <ul><li><strong>image</strong>: 使用 <code>lscr.io/linuxserver/qbittorrent:latest</code> 镜像，这是一个维护良好的 qBittorrent 镜像。</li><li><strong>container_name</strong>: 设置容器名称为 <code>qbittorrent</code>，便于管理。</li><li><strong>environment</strong>: 设置环境变量： <ul><li><code>PUID</code> 和 <code>PGID</code>: 设置为 <code>0</code>，表示使用 root 用户（可根据需要修改为非特权用户）。</li><li><code>TZ</code>: 设置时区为 <code>Asia/Shanghai</code>。</li><li><code>WEBUI_PORT</code>: 设置 Web 界面的端口为 <code>53000</code>。</li></ul></li><li><strong>volumes</strong>: 挂载存储卷： <ul><li><code>qbittorrent_data:/config</code>: 将持久化存储卷挂载到容器的 <code>/config</code> 目录。</li><li><code>/mnt:/mnt</code>: 将宿主机的 <code>/mnt</code> 目录挂载到容器内，方便下载文件的访问。</li></ul></li><li><strong>ports</strong>: 映射端口： <ul><li><code>53000:53000</code>: 映射 Web UI 端口。</li><li><code>53001:6881</code> &amp; <code>53001:6881/udp</code>: 映射 BitTorrent 的传输端口。</li></ul></li><li><strong>restart</strong>: 设置重启策略为 <code>unless-stopped</code>，即除非手动停止，否则容器会自动重启。</li></ul></li></ul><blockquote><p><strong>注意</strong>: 此处新建了一个 volume <code>qbittorrent_data</code> 来映射容器内的 <code>/config</code> 文件夹，这种情况下，<code>/config</code> 文件夹并没有映射到宿主机的某个具体路径，而是交由 Docker 管理，这样可以避免破坏该文件。此外，若删除容器后重新部署，若先前创建的 <code>qbittorrent_data</code> 仍在，则可以继承先前容器的数据。🔄</p></blockquote><h3 id="🌐-可选配置" tabindex="-1"><a class="header-anchor" href="#🌐-可选配置"><span>🌐 可选配置</span></a></h3><p>部署完容器后，使用 <strong>nginx</strong> 将 qBittorrent 服务进行反向代理，以下是 nginx 反向代理配置：</p><div class="language-nginx line-numbers-mode" data-highlighter="shiki" data-ext="nginx" data-title="nginx" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">server{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    listen </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">12120</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ssl;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    server_name </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">qbit.domain.com;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    ssl_certificate </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/etc/letsencrypt/live/jayczee.top/fullchain.pem;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    ssl_certificate_key </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/etc/letsencrypt/live/jayczee.top/privkey.pem;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    location</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> / {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      proxy_pass </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">             http://localhost:53000/;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      proxy_http_version </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">     1.1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      proxy_set_header </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">       X-Forwarded-Host        $</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">http_host</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      http2_push_preload </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">on</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Enable http2 push</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此处 nginx 监听 <strong>12120</strong> 端口。可以让所有 nginx 的反向代理配置都监听同一端口，通过监听不同的 servername，即不同的二级域名来代理到不同的服务。🔑</p><blockquote><p><strong>为什么不是 80 端口或 443 端口？</strong> 使用家庭宽带时，通常运营商会封禁家庭宽带的 80 和 443 端口，无法使用，因此需要使用其他端口。推荐使用 1000 及以上的端口号，以避免与其他服务冲突。</p></blockquote><h3 id="🌐-bt传输端口" tabindex="-1"><a class="header-anchor" href="#🌐-bt传输端口"><span>🌐 BT传输端口</span></a></h3><p>浏览器访问 <a href="https://qbit.domain.com:12120" target="_blank" rel="noopener noreferrer">https://qbit.domain.com:12120</a> 或 <a href="http://localhost:53000" target="_blank" rel="noopener noreferrer">http://localhost:53000</a>（若没有进行 nginx 配置），即可访问 qBittorrent WebUI。如图所示：</p><figure><img src="`+d+'" alt="qBittorrent管理界面" tabindex="0" loading="lazy"><figcaption>qBittorrent管理界面</figcaption></figure><p>打开左上角工具 → 选项，弹出的设置对话框中选择连接，确保用于传入连接的端口是在 docker compose 配置中宿主机映射的 BitTorrent 的传输端口，如图所示：</p><figure><img src="'+c+'" alt="qBittorrent配置窗口" tabindex="0" loading="lazy"><figcaption>qBittorrent配置窗口</figcaption></figure><p>之后qBittorrent客户端将使用该端口与其他用户进行通信。</p><h3 id="🎉-完成部署" tabindex="-1"><a class="header-anchor" href="#🎉-完成部署"><span>🎉 完成部署</span></a></h3><p>至此，qBittorrent 的部署工作基本完成。后续将依靠它来下载影音资源到 NAS 服务器中。📥</p><h3 id="📚-相关文章" tabindex="-1"><a class="header-anchor" href="#📚-相关文章"><span>📚 相关文章</span></a></h3>',20)),i("ul",null,[i("li",null,[l(n,{to:"/nas/qbit-category.html"},{default:r(()=>s[0]||(s[0]=[h("qBittorrent 分类管理")])),_:1})])])])}const y=t(k,[["render",g],["__file","7-qbittorrent.html.vue"]]),A=JSON.parse(`{"path":"/nas/basic/7-qbittorrent.html","title":"Qbittorrent BT下载","lang":"zh-CN","frontmatter":{"title":"Qbittorrent BT下载","order":7,"isOriginal":true,"category":["NAS"],"tag":["qbittorrent","docker"],"description":"qBittorrent 是一个开源的 BitTorrent 客户端，旨在提供一个用户友好的界面和丰富的功能。它支持多种操作系统，包括 Windows、macOS 和 Linux。qBittorrent 不仅可以下载种子文件，还支持磁力链接，并内置搜索功能，方便用户查找和下载内容。✨ 将以下 docker compose 配置文件复制进 Stack，点击...","head":[["meta",{"property":"og:url","content":"https://jayczee.cn/nas/basic/7-qbittorrent.html"}],["meta",{"property":"og:site_name","content":"Jayczee's Blog"}],["meta",{"property":"og:title","content":"Qbittorrent BT下载"}],["meta",{"property":"og:description","content":"qBittorrent 是一个开源的 BitTorrent 客户端，旨在提供一个用户友好的界面和丰富的功能。它支持多种操作系统，包括 Windows、macOS 和 Linux。qBittorrent 不仅可以下载种子文件，还支持磁力链接，并内置搜索功能，方便用户查找和下载内容。✨ 将以下 docker compose 配置文件复制进 Stack，点击..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://jayczee.cn/assets/images/nas/qbittorrent/qbit-1.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-15T06:15:38.000Z"}],["meta",{"property":"article:tag","content":"qbittorrent"}],["meta",{"property":"article:tag","content":"docker"}],["meta",{"property":"article:modified_time","content":"2025-01-15T06:15:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Qbittorrent BT下载\\",\\"image\\":[\\"https://jayczee.cn/assets/images/nas/qbittorrent/qbit-1.png\\",\\"https://jayczee.cn/assets/images/nas/qbittorrent/qbit-2.png\\"],\\"dateModified\\":\\"2025-01-15T06:15:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jayczee\\",\\"url\\":\\"https://jayczee.cn\\"}]}"]]},"headers":[{"level":3,"title":"📌 配置说明","slug":"📌-配置说明","link":"#📌-配置说明","children":[]},{"level":3,"title":"🌐 可选配置","slug":"🌐-可选配置","link":"#🌐-可选配置","children":[]},{"level":3,"title":"🌐 BT传输端口","slug":"🌐-bt传输端口","link":"#🌐-bt传输端口","children":[]},{"level":3,"title":"🎉 完成部署","slug":"🎉-完成部署","link":"#🎉-完成部署","children":[]},{"level":3,"title":"📚 相关文章","slug":"📚-相关文章","link":"#📚-相关文章","children":[]}],"git":{"createdTime":1736491706000,"updatedTime":1736921738000,"contributors":[{"name":"Jayczee","username":"Jayczee","email":"jayczee@yeah.net","commits":4,"url":"https://github.com/Jayczee"}]},"readingTime":{"minutes":2.72,"words":817},"filePathRelative":"nas/basic/7-qbittorrent.md","localizedDate":"2025年1月10日","excerpt":"<p><strong>qBittorrent</strong> 是一个开源的 BitTorrent 客户端，旨在提供一个用户友好的界面和丰富的功能。它支持多种操作系统，包括 <strong>Windows</strong>、<strong>macOS</strong> 和 <strong>Linux</strong>。qBittorrent 不仅可以下载种子文件，还支持磁力链接，并内置搜索功能，方便用户查找和下载内容。✨</p>\\n<p>将以下 <strong>docker compose</strong> 配置文件复制进 <strong>Stack</strong>，点击 <strong>Deploy the stack</strong> 进行部署。</p>","autoDesc":true}`);export{y as comp,A as data};
