import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as l,o}from"./app-C39gAUso.js";const e={};function p(t,s){return o(),a("div",null,s[0]||(s[0]=[l(`<h2 id="🚀-相关链接" tabindex="-1"><a class="header-anchor" href="#🚀-相关链接"><span>🚀 相关链接</span></a></h2><p><a href="https://leetcode.cn/problems/minimum-size-subarray-sum/?envType=study-plan-v2&amp;envId=top-interview-150" target="_blank" rel="noopener noreferrer">LeetCode 209 - 长度最小的子数组</a></p><h2 id="📜-描述" tabindex="-1"><a class="header-anchor" href="#📜-描述"><span>📜 描述</span></a></h2><p>给定一个含有 <code>n</code> 个正整数的数组和一个正整数 <code>target</code>。</p><p>找出该数组中满足其总和大于等于 <code>target</code> 的长度最小的 <strong>子数组</strong> <code>[numsl, numsl+1, ..., numsr-1, numsr]</code>，并返回其长度。如果不存在符合条件的子数组，返回 <code>0</code>。</p><h2 id="💡-示例" tabindex="-1"><a class="header-anchor" href="#💡-示例"><span>💡 示例</span></a></h2><ul><li><strong>输入</strong>: <code>target = 7, nums = [2,3,1,2,4,3]</code></li><li><strong>输出</strong>: <code>2</code></li><li><strong>解释</strong>: 子数组 <code>[4,3]</code> 是该条件下的长度最小的子数组。</li></ul><h3 id="示例-2" tabindex="-1"><a class="header-anchor" href="#示例-2"><span>示例 2</span></a></h3><ul><li><strong>输入</strong>: <code>target = 4, nums = [1,4,4]</code></li><li><strong>输出</strong>: <code>1</code></li></ul><h3 id="示例-3" tabindex="-1"><a class="header-anchor" href="#示例-3"><span>示例 3</span></a></h3><ul><li><strong>输入</strong>: <code>target = 11, nums = [1,1,1,1,1,1,1,1]</code></li><li><strong>输出</strong>: <code>0</code></li></ul><h2 id="📝-提示" tabindex="-1"><a class="header-anchor" href="#📝-提示"><span>📝 提示</span></a></h2><ul><li><code>1 &lt;= target &lt;= 10^9</code></li><li><code>1 &lt;= nums.length &lt;= 10^5</code></li><li><code>1 &lt;= nums[i] &lt;= 10^4</code></li></ul><h3 id="进阶" tabindex="-1"><a class="header-anchor" href="#进阶"><span>进阶</span></a></h3><p>如果你已经实现 <code>O(n)</code> 时间复杂度的解法，请尝试设计一个 <code>O(n log(n))</code> 时间复杂度的解法。</p><h2 id="💭-思路" tabindex="-1"><a class="header-anchor" href="#💭-思路"><span>💭 思路</span></a></h2><ol><li><p><strong>暴力解法</strong>：</p><ul><li>使用双重循环枚举所有可能的子数组，计算子数组的和，并记录最小的长度。</li><li>时间复杂度：<code>O(n^2)</code>，在LeetCode中会超时。</li></ul></li><li><p><strong>前缀和 + 二分查找</strong>：</p><ul><li>先计算数组的前缀和数组 <code>sums</code>。</li><li>对于每个位置 <code>i</code>，使用二分查找找到第一个满足 <code>sums[j] - sums[i-1] &gt;= target</code> 的 <code>j</code>，并更新最小长度。</li><li>时间复杂度：<code>O(n log(n))</code>。</li></ul></li><li><p><strong>滑动窗口</strong>：</p><ul><li>维护一个窗口 <code>[start, end]</code>，计算窗口内的和 <code>sum</code>。</li><li>如果 <code>sum &gt;= target</code>，更新最小长度，并尝试缩小窗口（<code>start++</code>）。</li><li>如果 <code>sum &lt; target</code>，扩大窗口（<code>end++</code>）。</li><li>时间复杂度：<code>O(n)</code>。</li></ul></li></ol><h2 id="💻-代码实现" tabindex="-1"><a class="header-anchor" href="#💻-代码实现"><span>💻 代码实现</span></a></h2><ol><li><strong>暴力解法</strong>（超时）</li></ol><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#569CD6;">public</span><span style="color:#4EC9B0;"> int</span><span style="color:#DCDCAA;"> minSubArrayLen</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> target, </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] nums) {</span></span>
<span class="line"><span style="color:#4EC9B0;">    int</span><span style="color:#9CDCFE;"> ans</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">Integer</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">MAX_VALUE</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;">    for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#9CDCFE;"> i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; i &lt; </span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">; i++) {</span></span>
<span class="line"><span style="color:#4EC9B0;">        int</span><span style="color:#9CDCFE;"> sum</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;">        for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#9CDCFE;"> j</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">; j &lt;= ans &amp;&amp; j + i - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;"> &lt; </span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">; j++) {</span></span>
<span class="line"><span style="color:#D4D4D4;">            sum += nums[i + j - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">];</span></span>
<span class="line"><span style="color:#C586C0;">            if</span><span style="color:#D4D4D4;"> (sum &gt;= target) {</span></span>
<span class="line"><span style="color:#D4D4D4;">                ans = j;</span></span>
<span class="line"><span style="color:#D4D4D4;">            }</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#D4D4D4;"> ans == </span><span style="color:#9CDCFE;">Integer</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">MAX_VALUE</span><span style="color:#C586C0;"> ?</span><span style="color:#B5CEA8;"> 0</span><span style="color:#C586C0;"> :</span><span style="color:#D4D4D4;"> ans;</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre></div><ol start="2"><li><strong>前缀和 + 二分查找</strong></li></ol><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#569CD6;">public</span><span style="color:#4EC9B0;"> int</span><span style="color:#DCDCAA;"> minSubArrayLen</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> target, </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] nums) {</span></span>
<span class="line"><span style="color:#4EC9B0;">    int</span><span style="color:#9CDCFE;"> ans</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">Integer</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">MAX_VALUE</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#4EC9B0;">    int</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">sums</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#4EC9B0;"> int</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">];</span></span>
<span class="line"><span style="color:#D4D4D4;">    sums[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">] = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;">    for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#9CDCFE;"> i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">; i &lt;= </span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">; i++) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        sums[i] = sums[i - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">] + nums[i - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">];</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#C586C0;">    for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#9CDCFE;"> i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">; i &lt;= </span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">; i++) {</span></span>
<span class="line"><span style="color:#4EC9B0;">        int</span><span style="color:#9CDCFE;"> bound</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">Arrays</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">binarySearch</span><span style="color:#D4D4D4;">(sums, sums[i - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">] + target);</span></span>
<span class="line"><span style="color:#C586C0;">        if</span><span style="color:#D4D4D4;"> (bound &lt; </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">            bound = -bound - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">; </span><span style="color:#6A9955;">// Arrays.binarySearch特性</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#C586C0;">        if</span><span style="color:#D4D4D4;"> (bound &lt;= </span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">            ans = </span><span style="color:#9CDCFE;">Math</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">min</span><span style="color:#D4D4D4;">(ans, bound - (i - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">));</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#D4D4D4;"> ans == </span><span style="color:#9CDCFE;">Integer</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">MAX_VALUE</span><span style="color:#C586C0;"> ?</span><span style="color:#B5CEA8;"> 0</span><span style="color:#C586C0;"> :</span><span style="color:#D4D4D4;"> ans;</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre></div><ol start="3"><li><strong>滑动窗口</strong></li></ol><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#569CD6;">public</span><span style="color:#4EC9B0;"> int</span><span style="color:#DCDCAA;"> lengthOfLongestSubstring</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;"> s) {</span></span>
<span class="line"><span style="color:#4EC9B0;">        List</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">Character</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;">list</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#4EC9B0;"> ArrayList</span><span style="color:#D4D4D4;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#4EC9B0;">        int</span><span style="color:#9CDCFE;"> l</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, r= </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, ans = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;">        while</span><span style="color:#D4D4D4;">(l &lt;= r &amp;&amp; r&lt; </span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">length</span><span style="color:#D4D4D4;">()){</span></span>
<span class="line"><span style="color:#C586C0;">            if</span><span style="color:#D4D4D4;"> (l == r){</span></span>
<span class="line"><span style="color:#9CDCFE;">                list</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">add</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">charAt</span><span style="color:#D4D4D4;">(l));</span></span>
<span class="line"><span style="color:#D4D4D4;">                ans = </span><span style="color:#9CDCFE;">Math</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">max</span><span style="color:#D4D4D4;">(ans, </span><span style="color:#9CDCFE;">list</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">size</span><span style="color:#D4D4D4;">());</span></span>
<span class="line"><span style="color:#D4D4D4;">                r++;</span></span>
<span class="line"><span style="color:#D4D4D4;">            }</span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;">{</span></span>
<span class="line"><span style="color:#4EC9B0;">                Character</span><span style="color:#9CDCFE;"> c</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">charAt</span><span style="color:#D4D4D4;">(r);</span></span>
<span class="line"><span style="color:#C586C0;">                if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">list</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">contains</span><span style="color:#D4D4D4;">(c)){</span></span>
<span class="line"><span style="color:#9CDCFE;">                    list</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">removeFirst</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">                    l++;</span></span>
<span class="line"><span style="color:#D4D4D4;">                }</span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;">{</span></span>
<span class="line"><span style="color:#9CDCFE;">                    list</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">add</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">charAt</span><span style="color:#D4D4D4;">(r));</span></span>
<span class="line"><span style="color:#D4D4D4;">                    ans = </span><span style="color:#9CDCFE;">Math</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">max</span><span style="color:#D4D4D4;">(ans, </span><span style="color:#9CDCFE;">list</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">size</span><span style="color:#D4D4D4;">());</span></span>
<span class="line"><span style="color:#D4D4D4;">                    r++;</span></span>
<span class="line"><span style="color:#D4D4D4;">                }</span></span>
<span class="line"><span style="color:#D4D4D4;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#C586C0;">        return</span><span style="color:#D4D4D4;"> ans;</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span></code></pre></div>`,24)]))}const D=n(e,[["render",p]]),y=JSON.parse(`{"path":"/note/leet150/30-leet209.html","title":"209 长度最小的子数组","lang":"zh-CN","frontmatter":{"title":"209 长度最小的子数组","order":30,"category":["LeetCode"],"tag":["LeetCode面试经典150题","LeetCode209","中等题","数组","滑动窗口"],"description":"🚀 相关链接 LeetCode 209 - 长度最小的子数组 📜 描述 给定一个含有 n 个正整数的数组和一个正整数 target。 找出该数组中满足其总和大于等于 target 的长度最小的 子数组 [numsl, numsl+1, ..., numsr-1, numsr]，并返回其长度。如果不存在符合条件的子数组，返回 0。 💡 示例 输入:...","head":[["meta",{"property":"og:url","content":"https://jayczee.cn/note/leet150/30-leet209.html"}],["meta",{"property":"og:site_name","content":"Jayczee's Blog"}],["meta",{"property":"og:title","content":"209 长度最小的子数组"}],["meta",{"property":"og:description","content":"🚀 相关链接 LeetCode 209 - 长度最小的子数组 📜 描述 给定一个含有 n 个正整数的数组和一个正整数 target。 找出该数组中满足其总和大于等于 target 的长度最小的 子数组 [numsl, numsl+1, ..., numsr-1, numsr]，并返回其长度。如果不存在符合条件的子数组，返回 0。 💡 示例 输入:..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-27T07:51:43.000Z"}],["meta",{"property":"article:tag","content":"LeetCode面试经典150题"}],["meta",{"property":"article:tag","content":"LeetCode209"}],["meta",{"property":"article:tag","content":"中等题"}],["meta",{"property":"article:tag","content":"数组"}],["meta",{"property":"article:tag","content":"滑动窗口"}],["meta",{"property":"article:modified_time","content":"2025-05-27T07:51:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"209 长度最小的子数组\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-27T07:51:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jayczee\\",\\"url\\":\\"https://jayczee.cn\\"}]}"]]},"headers":[{"level":2,"title":"🚀 相关链接","slug":"🚀-相关链接","link":"#🚀-相关链接","children":[]},{"level":2,"title":"📜 描述","slug":"📜-描述","link":"#📜-描述","children":[]},{"level":2,"title":"💡 示例","slug":"💡-示例","link":"#💡-示例","children":[{"level":3,"title":"示例 2","slug":"示例-2","link":"#示例-2","children":[]},{"level":3,"title":"示例 3","slug":"示例-3","link":"#示例-3","children":[]}]},{"level":2,"title":"📝 提示","slug":"📝-提示","link":"#📝-提示","children":[{"level":3,"title":"进阶","slug":"进阶","link":"#进阶","children":[]}]},{"level":2,"title":"💭 思路","slug":"💭-思路","link":"#💭-思路","children":[]},{"level":2,"title":"💻 代码实现","slug":"💻-代码实现","link":"#💻-代码实现","children":[]}],"git":{"createdTime":1748332303000,"updatedTime":1748332303000,"contributors":[{"name":"Jayczee","username":"Jayczee","email":"jayczee@yeah.net","commits":1,"url":"https://github.com/Jayczee"}]},"readingTime":{"minutes":2.1,"words":630},"filePathRelative":"note/leet150/30-leet209.md","localizedDate":"2025年5月27日","excerpt":"<h2>🚀 相关链接</h2>\\n<p><a href=\\"https://leetcode.cn/problems/minimum-size-subarray-sum/?envType=study-plan-v2&amp;envId=top-interview-150\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">LeetCode 209 - 长度最小的子数组</a></p>\\n<h2>📜 描述</h2>\\n<p>给定一个含有 <code>n</code> 个正整数的数组和一个正整数 <code>target</code>。</p>\\n<p>找出该数组中满足其总和大于等于 <code>target</code> 的长度最小的 <strong>子数组</strong> <code>[numsl, numsl+1, ..., numsr-1, numsr]</code>，并返回其长度。如果不存在符合条件的子数组，返回 <code>0</code>。</p>","autoDesc":true}`);export{D as comp,y as data};
