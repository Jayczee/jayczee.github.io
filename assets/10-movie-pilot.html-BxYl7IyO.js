import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,a as e,b as a,d as n,e as t,w as i,r,o as c}from"./app-DXs7qa2N.js";const g="/assets/images/nas/moviepilot/moviepilot-1.png",m="/assets/images/nas/moviepilot/moviepilot-2.png",y="/assets/images/nas/moviepilot/moviepilot-3.png",d="/assets/images/nas/moviepilot/moviepilot-4.png",v="/assets/images/nas/moviepilot/moviepilot-5.png",D="/assets/images/nas/moviepilot/moviepilot-6.png",h="/assets/images/nas/moviepilot/moviepilot-7.png",f="/assets/images/nas/moviepilot/moviepilot-8.png",u="/assets/images/nas/moviepilot/moviepilot-9.png",b="/assets/images/nas/moviepilot/moviepilot-10.png",k="/assets/images/nas/moviepilot/moviepilot-11.png",C={};function _(z,s){const o=r("RouteLink");return c(),p("div",null,[s[11]||(s[11]=e('<p>已安装的 qbittorrent 服务与 jellyfin 服务已经能提供最基本的影音需求，但在使用 jellyfin 查看媒体文件夹中的影片时，可能会出现以下问题：</p><ol><li>📽️ 影音文件以源文件名而不是影片名显示</li><li>🖼️ 缺少海报，演员信息</li><li>📂 所有影音资源挤在一个下载文件夹中，包含了一些非影音资源文件，显得非常杂乱</li><li>🎬 影音文件缺少字幕</li><li>🔄 媒体库刷新不及时，经常需要手动刷新</li><li>📝 媒体文件需要手动命名，手动设置元数据等等</li></ol><p>此时，需要一款帮助解决此类问题的媒体整体工具，即 <strong>Movie pilot</strong>（原 Nas tool 作者开发，为 Nas tool 上位替代版本）。</p><p>相关链接：</p><ul><li><a href="https://wiki.movie-pilot.org/" target="_blank" rel="noopener noreferrer">Movie pilot 官方 Wiki</a></li><li><a href="https://github.com/jxxghp/MoviePilot" target="_blank" rel="noopener noreferrer">Movie pilot Github</a></li></ul><h2 id="🚀-安装步骤" tabindex="-1"><a class="header-anchor" href="#🚀-安装步骤"><span>🚀 安装步骤</span></a></h2><p>详细的安装参数建议参考 <a href="https://wiki.movie-pilot.org/" target="_blank" rel="noopener noreferrer">Movie pilot 官方 Wiki</a>，此处仅简述安装步骤。</p><h3 id="🔑-获取-iyuu-token" tabindex="-1"><a class="header-anchor" href="#🔑-获取-iyuu-token"><span>🔑 获取 IYUU Token</span></a></h3><p>为了防止该项目遭到滥用，作者设置了认证环节，用户在使用之前需要使用 PT 站点或者 IYUU 进行认证 (<a href="https://wiki.movie-pilot.org/configuration" target="_blank" rel="noopener noreferrer">查看详情</a>)。此处提供 IYUU 认证步骤示例，较为简单。参考官方文档，如果准备使用其他站点的认证可以跳过该步骤。如果不进行认证，将无法使用 Moviepilot 的大部分功能。</p><p>访问 <a href="https://iyuu.cn/" target="_blank" rel="noopener noreferrer">IYUU 爱语飞飞</a>，点击页面中间的开始使用：</p><figure><img src="'+g+'" alt="IYUU官方网站" tabindex="0" loading="lazy"><figcaption>IYUU官方网站</figcaption></figure><p>点击之后页面中央会出现二维码，使用微信扫码，关注 IYUU 公众号，获得 IYUU Token 的推送：</p><figure><img src="'+m+`" alt="IYUU微信号推送" tabindex="0" loading="lazy"><figcaption>IYUU微信号推送</figcaption></figure><h3 id="🛠️-服务部署" tabindex="-1"><a class="header-anchor" href="#🛠️-服务部署"><span>🛠️ 服务部署</span></a></h3><p>docker compose 文件如下：</p><div class="language-yaml" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#569CD6;">version</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&#39;3.3&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">services</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">    moviepilot</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#569CD6;">        stdin_open</span><span style="color:#D4D4D4;">: </span><span style="color:#569CD6;">true</span></span>
<span class="line"><span style="color:#569CD6;">        tty</span><span style="color:#D4D4D4;">: </span><span style="color:#569CD6;">true</span></span>
<span class="line"><span style="color:#569CD6;">        container_name</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">moviepilot-v2</span></span>
<span class="line"><span style="color:#569CD6;">        hostname</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">moviepilot-v2</span></span>
<span class="line"><span style="color:#569CD6;">        networks</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">            - </span><span style="color:#CE9178;">moviepilot</span></span>
<span class="line"><span style="color:#569CD6;">        ports</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">            - </span><span style="color:#569CD6;">target</span><span style="color:#D4D4D4;">: </span><span style="color:#B5CEA8;">53010</span></span>
<span class="line"><span style="color:#569CD6;">              published</span><span style="color:#D4D4D4;">: </span><span style="color:#B5CEA8;">53010</span></span>
<span class="line"><span style="color:#569CD6;">              protocol</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">tcp</span></span>
<span class="line"><span style="color:#569CD6;">        volumes</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">            - </span><span style="color:#CE9178;">&#39;/mnt:/mnt&#39;</span></span>
<span class="line"><span style="color:#D4D4D4;">            - </span><span style="color:#CE9178;">&#39;/moviepilot-v2/config:/config&#39;</span></span>
<span class="line"><span style="color:#D4D4D4;">            - </span><span style="color:#CE9178;">&#39;/moviepilot-v2/core:/moviepilot/.cache/ms-playwright&#39;</span></span>
<span class="line"><span style="color:#D4D4D4;">            - </span><span style="color:#CE9178;">&#39;/var/run/docker.sock:/var/run/docker.sock:ro&#39;</span></span>
<span class="line"><span style="color:#569CD6;">        environment</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">            - </span><span style="color:#CE9178;">&#39;NGINX_PORT=53010&#39;</span></span>
<span class="line"><span style="color:#D4D4D4;">            - </span><span style="color:#CE9178;">&#39;PORT=3001&#39;</span></span>
<span class="line"><span style="color:#D4D4D4;">            - </span><span style="color:#CE9178;">&#39;PUID=0&#39;</span></span>
<span class="line"><span style="color:#D4D4D4;">            - </span><span style="color:#CE9178;">&#39;PGID=0&#39;</span></span>
<span class="line"><span style="color:#D4D4D4;">            - </span><span style="color:#CE9178;">&#39;UMASK=000&#39;</span></span>
<span class="line"><span style="color:#D4D4D4;">            - </span><span style="color:#CE9178;">&#39;TZ=Asia/Shanghai&#39;</span></span>
<span class="line"><span style="color:#D4D4D4;">            - </span><span style="color:#CE9178;">&#39;SUPERUSER=jayczee&#39;</span></span>
<span class="line"><span style="color:#D4D4D4;">            - </span><span style="color:#CE9178;">&#39;AUTH_SITE=iyuu&#39;</span></span>
<span class="line"><span style="color:#D4D4D4;">            - </span><span style="color:#CE9178;">&#39;IYUU_SIGN=你的IYUU TOKEN&#39;</span></span>
<span class="line"><span style="color:#D4D4D4;">            - </span><span style="color:#CE9178;">&#39;PROXY_HOST=http://192.168.10.229:50171&#39;</span></span>
<span class="line"><span style="color:#569CD6;">        restart</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">always</span></span>
<span class="line"><span style="color:#569CD6;">        image</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">jxxghp/moviepilot-v2:latest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">networks</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#569CD6;">  moviepilot</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#569CD6;">    name</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">moviepilot</span></span></code></pre></div>`,16)),a("p",null,[s[1]||(s[1]=n("此处使用的是 moviepilot-v2 版本，特别设置了 ")),s[2]||(s[2]=a("code",null,"SUPERUSER=jayczee",-1)),s[3]||(s[3]=n("，管理员用户名设为 jayczee，同时设置了代理地址 (参考 ")),t(o,{to:"/nas/basic/9-v2rayn.html"},{default:i(()=>s[0]||(s[0]=[n("V2rayN & V2rayA")])),_:1,__:[0]}),s[4]||(s[4]=n(")，方便镜像从 GitHub 上更快速抓取项目。"))]),s[12]||(s[12]=e('<div class="hint-container tip"><p class="hint-container-title">提示</p><p>moviepilot 容器启动后，需要等待一段时间。容器会从 GitHub 上抓取前后端代码进行编译，速度比较慢，可以从 Portainer 中查看容器 log 了解进度。即便 log 中已经显示了 web 服务的地址且能够访问，但在实际登录管理员账号时会提示 502 或 404 等错误。这实际上是由于容器中的后端服务尚未完全部署完毕。当时踩了这个坑很久，一度对自己产生怀疑。</p></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>moviepilot 内置了一个 nginx 来反向代理其中的 web 服务，修改上述的 NGINX_PORT 属性时，需要同步修改 ports 中的 target 与 published 端口。</p></div><p>安装完后界面大致如下（不包含影音资源）：</p><figure><img src="'+y+'" alt="MoviePilot" tabindex="0" loading="lazy"><figcaption>MoviePilot</figcaption></figure><h2 id="⚙️-配置-moviepilot" tabindex="-1"><a class="header-anchor" href="#⚙️-配置-moviepilot"><span>⚙️ 配置 Moviepilot</span></a></h2><h3 id="📥-下载器配置" tabindex="-1"><a class="header-anchor" href="#📥-下载器配置"><span>📥 下载器配置</span></a></h3><p>以之前部署的 Qbittorrent 为例，Moviepilot 左侧导航栏设定 -&gt; 系统 -&gt; 下载器，点击 + 号，选择 Qbittorrent，点击新跳出的选项卡：</p><figure><img src="'+d+'" alt="点击新建的选项卡" tabindex="0" loading="lazy"><figcaption>点击新建的选项卡</figcaption></figure>',8)),a("p",null,[s[6]||(s[6]=n("输入下载器对应的地址、用户名以及密码，可以选择勾选自动分类管理 (参考 ")),t(o,{to:"/nas/qbit-category.html"},{default:i(()=>s[5]||(s[5]=[n("Qbittorrent 自动分类")])),_:1,__:[5]}),s[7]||(s[7]=n(") 等选项。"))]),s[13]||(s[13]=e('<figure><img src="'+v+'" alt="设置下载器相关参数" tabindex="0" loading="lazy"><figcaption>设置下载器相关参数</figcaption></figure><div class="hint-container tip"><p class="hint-container-title">提示</p><p>下载器的地址，如果 Moviepilot 没有使用 host 模式（默认配置是这样，使用 host 会占用比较多的端口），则需要进入 Portainer 查看网关（即宿主机）的内网 IP 地址，然后通过宿主机连接对应的下载器的地址。</p><figure><img src="'+D+'" alt="查看Moviepilot网关地址" tabindex="0" loading="lazy"><figcaption>查看Moviepilot网关地址</figcaption></figure><p>此处可以看到 Moviepilot 的网关的地址为 172.20.0.1，即通过该 IP 可以连通宿主机，若假设 Qbittorrent WebUI 在宿主机上的端口为 53000，则 Moviepilot 可以通过 172.20.0.1:53000 访问到 Qbittorrent。</p><p>所以此处填写 <a href="http://172.20.0.1:53000" target="_blank" rel="noopener noreferrer">http://172.20.0.1:53000</a></p></div><p>设置完后点击保存。</p><h3 id="📂-媒体目录配置" tabindex="-1"><a class="header-anchor" href="#📂-媒体目录配置"><span>📂 媒体目录配置</span></a></h3><p>需要设置媒体文件整体前（刚刚下载好，无元数据，杂乱的文件）的目录和整理后的目录（已重命名且刮削元数据的任务）。点击左侧导航栏设定 -&gt; 系统 -&gt; 存储 &amp; 目录 -&gt; 目录，点击现金目录，填写如下：</p><figure><img src="'+h+'" alt="目录填写" tabindex="0" loading="lazy"><figcaption>目录填写</figcaption></figure><p>如同先前在 jellyfin 中设置的媒体类型一项，电影选择“电影”即可，而电视剧、综艺以及动漫等有多季多期特征的资源选择“电视剧”，媒体类别选择“全部”，当然，如果想细分，可以选择对应的媒体类别。</p><p>下载/源存储选择<code>本地</code>，目录输入先前 Qbittorrent 配置的下载目录。</p><p>自动整理选择<code>目录监控</code>，每当 qbittorrent 下载新的媒体文件时都能自动进行整理。</p><p>监控模式选择<code>性能模式</code>。</p><p>目录输入一个自定义的文件整理后的目录。</p>',11)),a("p",null,[s[9]||(s[9]=n("整理方式选择硬链接 (相关文档: ")),t(o,{to:"/win_linux/link.html"},{default:i(()=>s[8]||(s[8]=[n("软硬链接的区别")])),_:1,__:[8]}),s[10]||(s[10]=n(")，覆盖模式选择保留最新文件。"))]),s[14]||(s[14]=e('<div class="hint-container tip"><p class="hint-container-title">提示</p><p>我个人的目录结构如下：</p><ul><li>电影下载保存地址： <code>/mnt/data_hdd1/download_movie</code></li><li>整理后地址：<code>/mnt/data_hdd1/movie</code></li></ul><p>-综艺下载保存地址： <code>/mnt/data_hdd1/download_tv</code></p><ul><li><p>整理后地址：<code>/mnt/data_hdd1/tv</code></p></li><li><p>动漫下载保存地址： <code>/mnt/data_hdd1/download_cartoon</code></p></li><li><p>整理后地址：<code>/mnt/data_hdd1/cartoon</code></p></li></ul></div><figure><img src="'+f+'" alt="整理前效果" tabindex="0" loading="lazy"><figcaption>整理前效果</figcaption></figure><figure><img src="'+u+'" alt="整理后效果" tabindex="0" loading="lazy"><figcaption>整理后效果</figcaption></figure><p>由于采用的是硬链接的方式，所以占用空间不会变大。填写完配置信息后点击保存。</p><h3 id="📺-媒体服务器配置" tabindex="-1"><a class="header-anchor" href="#📺-媒体服务器配置"><span>📺 媒体服务器配置</span></a></h3><p>首先访问 Jellyfin，点击控制台 -&gt; API 秘钥，创建一个 API 秘钥。</p><figure><img src="'+b+'" alt="Jellyfin创建API秘钥" tabindex="0" loading="lazy"><figcaption>Jellyfin创建API秘钥</figcaption></figure><p>Moviepilot 点击左边侧边栏设定 -&gt; 系统 -&gt; 媒体服务器，点击加号。</p><figure><img src="'+k+'" alt="媒体服务器配置" tabindex="0" loading="lazy"><figcaption>媒体服务器配置</figcaption></figure><p>先前在 nginx 中配置了 jellyfin 外网访问地址，所以此处两个地址都填外网访问地址即可。API 秘钥填写 Jellyfin 中生成的秘钥。</p><p>至此，Moviepilot 配置完成，可以自动帮忙整理下载好的媒体文件。🎉</p><hr><h2 id="🔗-相关资源" tabindex="-1"><a class="header-anchor" href="#🔗-相关资源"><span>🔗 相关资源</span></a></h2><ul><li><a href="https://wiki.movie-pilot.org/" target="_blank" rel="noopener noreferrer">Movie pilot 官方 Wiki</a></li><li><a href="https://github.com/jxxghp/MoviePilot" target="_blank" rel="noopener noreferrer">Movie pilot Github</a></li><li><a href="https://iyuu.cn/" target="_blank" rel="noopener noreferrer">IYUU 爱语飞飞</a></li></ul>',14))])}const E=l(C,[["render",_]]),j=JSON.parse(`{"path":"/nas/basic/10-movie-pilot.html","title":"Movie-pilot 自动化媒体整理","lang":"zh-CN","frontmatter":{"title":"Movie-pilot 自动化媒体整理","order":10,"isOriginal":true,"category":["NAS"],"tag":["movie-pilot","docker"],"description":"已安装的 qbittorrent 服务与 jellyfin 服务已经能提供最基本的影音需求，但在使用 jellyfin 查看媒体文件夹中的影片时，可能会出现以下问题： 📽️ 影音文件以源文件名而不是影片名显示 🖼️ 缺少海报，演员信息 📂 所有影音资源挤在一个下载文件夹中，包含了一些非影音资源文件，显得非常杂乱 🎬 影音文件缺少字幕 🔄 媒体...","head":[["meta",{"property":"og:url","content":"https://jayczee.cn/nas/basic/10-movie-pilot.html"}],["meta",{"property":"og:site_name","content":"Jayczee's Blog"}],["meta",{"property":"og:title","content":"Movie-pilot 自动化媒体整理"}],["meta",{"property":"og:description","content":"已安装的 qbittorrent 服务与 jellyfin 服务已经能提供最基本的影音需求，但在使用 jellyfin 查看媒体文件夹中的影片时，可能会出现以下问题： 📽️ 影音文件以源文件名而不是影片名显示 🖼️ 缺少海报，演员信息 📂 所有影音资源挤在一个下载文件夹中，包含了一些非影音资源文件，显得非常杂乱 🎬 影音文件缺少字幕 🔄 媒体..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://jayczee.cn/assets/images/nas/moviepilot/moviepilot-1.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-05T10:13:42.000Z"}],["meta",{"property":"article:tag","content":"movie-pilot"}],["meta",{"property":"article:tag","content":"docker"}],["meta",{"property":"article:modified_time","content":"2025-03-05T10:13:42.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Movie-pilot 自动化媒体整理\\",\\"image\\":[\\"https://jayczee.cn/assets/images/nas/moviepilot/moviepilot-1.png\\",\\"https://jayczee.cn/assets/images/nas/moviepilot/moviepilot-2.png\\",\\"https://jayczee.cn/assets/images/nas/moviepilot/moviepilot-3.png\\",\\"https://jayczee.cn/assets/images/nas/moviepilot/moviepilot-4.png\\",\\"https://jayczee.cn/assets/images/nas/moviepilot/moviepilot-5.png\\",\\"https://jayczee.cn/assets/images/nas/moviepilot/moviepilot-6.png\\",\\"https://jayczee.cn/assets/images/nas/moviepilot/moviepilot-7.png\\",\\"https://jayczee.cn/assets/images/nas/moviepilot/moviepilot-8.png\\",\\"https://jayczee.cn/assets/images/nas/moviepilot/moviepilot-9.png\\",\\"https://jayczee.cn/assets/images/nas/moviepilot/moviepilot-10.png\\",\\"https://jayczee.cn/assets/images/nas/moviepilot/moviepilot-11.png\\"],\\"dateModified\\":\\"2025-03-05T10:13:42.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jayczee\\",\\"url\\":\\"https://jayczee.cn\\"}]}"]]},"headers":[{"level":2,"title":"🚀 安装步骤","slug":"🚀-安装步骤","link":"#🚀-安装步骤","children":[{"level":3,"title":"🔑 获取 IYUU Token","slug":"🔑-获取-iyuu-token","link":"#🔑-获取-iyuu-token","children":[]},{"level":3,"title":"🛠️ 服务部署","slug":"🛠️-服务部署","link":"#🛠️-服务部署","children":[]}]},{"level":2,"title":"⚙️ 配置 Moviepilot","slug":"⚙️-配置-moviepilot","link":"#⚙️-配置-moviepilot","children":[{"level":3,"title":"📥 下载器配置","slug":"📥-下载器配置","link":"#📥-下载器配置","children":[]},{"level":3,"title":"📂 媒体目录配置","slug":"📂-媒体目录配置","link":"#📂-媒体目录配置","children":[]},{"level":3,"title":"📺 媒体服务器配置","slug":"📺-媒体服务器配置","link":"#📺-媒体服务器配置","children":[]}]},{"level":2,"title":"🔗 相关资源","slug":"🔗-相关资源","link":"#🔗-相关资源","children":[]}],"git":{"createdTime":1736491706000,"updatedTime":1741169622000,"contributors":[{"name":"Jayczee","username":"Jayczee","email":"jayczee@yeah.net","commits":5,"url":"https://github.com/Jayczee"}]},"readingTime":{"minutes":5.27,"words":1580},"filePathRelative":"nas/basic/10-movie-pilot.md","localizedDate":"2025年1月10日","excerpt":"<p>已安装的 qbittorrent 服务与 jellyfin 服务已经能提供最基本的影音需求，但在使用 jellyfin 查看媒体文件夹中的影片时，可能会出现以下问题：</p>\\n<ol>\\n<li>📽️ 影音文件以源文件名而不是影片名显示</li>\\n<li>🖼️ 缺少海报，演员信息</li>\\n<li>📂 所有影音资源挤在一个下载文件夹中，包含了一些非影音资源文件，显得非常杂乱</li>\\n<li>🎬 影音文件缺少字幕</li>\\n<li>🔄 媒体库刷新不及时，经常需要手动刷新</li>\\n<li>📝 媒体文件需要手动命名，手动设置元数据等等</li>\\n</ol>\\n<p>此时，需要一款帮助解决此类问题的媒体整体工具，即 <strong>Movie pilot</strong>（原 Nas tool 作者开发，为 Nas tool 上位替代版本）。</p>","autoDesc":true}`);export{E as comp,j as data};
