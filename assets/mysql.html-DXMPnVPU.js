import{_ as s,c as t,a as n,o as a}from"./app-C2RRyImQ.js";const l="/assets/images/note/mysql/m-1.png",e="/assets/images/note/mysql/m-2.png",d="/assets/images/note/mysql/m-3.png",r="/assets/images/note/mysql/m-4.png",p="/assets/images/note/mysql/m-5.png",h="/assets/images/note/mysql/m-6.png",o="/assets/images/note/mysql/m-7.png",k="/assets/images/note/mysql/m-8.png",g="/assets/images/note/mysql/m-9.png",c="/assets/images/note/mysql/m-10.png",A="/assets/images/note/mysql/m-11.png",y="/assets/images/note/mysql/m-12.png",B="/assets/images/note/mysql/m-14.png",m="/assets/images/note/mysql/m-15.png",E="/assets/images/note/mysql/m-16.png",b="/assets/images/note/mysql/m-17.png",u="/assets/images/note/mysql/m-18.png",F="/assets/images/note/mysql/m-19.png",_="/assets/images/note/mysql/m-20.png",D="/assets/images/note/mysql/m-21.png",v="/assets/images/note/mysql/m-22.png",S="/assets/images/note/mysql/m-23.png",L="/assets/images/note/mysql/m-24.png",I="/assets/images/note/mysql/m-26.png",f={};function N(C,i){return a(),t("div",null,i[0]||(i[0]=[n('<h2 id="感谢原书作者" tabindex="-1"><a class="header-anchor" href="#感谢原书作者"><span>感谢原书作者</span></a></h2><p>感谢原书作者的总结，原书地址：<a href="https://juejin.cn/book/6844733769996304392" target="_blank" rel="noopener noreferrer">原书地址</a></p><p>免费分享出来的Github Page：<a href="https://relph1119.github.io/mysql-learning-notes/#/" target="_blank" rel="noopener noreferrer">Github Page</a></p><p>有机会还是付费支持一下原作者，此处仅总结个人学习到的知识点，不展开说明。</p><h2 id="第一章-重新认识mysql" tabindex="-1"><a class="header-anchor" href="#第一章-重新认识mysql"><span>第一章 重新认识MYSQL</span></a></h2><ol><li><strong>MySQL是C/S架构的</strong>，默认使用TCP协议通信。</li><li><strong>mysqld</strong>是服务端程序，可用于直接启动一个mysqld进程。</li><li><strong>mysqld_safe</strong>是一个脚本，用于启动mysqld的同时启动一个守护进程，当mysqld挂掉时重启，还会将错误信息日志等重定向到别的文件中方便调查。</li><li><strong>mysql.server</strong>间接调用mysql_safe，用于启动和停止MySQL服务器的脚本。</li><li><strong>mysql</strong>用于启动客户端程序与服务端进行通信，启动参数可使用<code>-h</code>指定服务器地址，<code>-u</code>指定用户，<code>-p</code>指定密码。</li><li><strong>mysqld</strong>启动时使用<code>-P</code>指定监听端口，同样客户端mysql启动时也可以使用<code>-P</code>指定服务端端口。</li><li>服务端处理客户端查询请求大致分为<strong>连接管理</strong>、<strong>解析与优化</strong>、<strong>存储引擎</strong>三个部分，如下图:</li></ol><figure><img src="'+l+`" alt="MySQL客户端处理客户端请求" tabindex="0" loading="lazy"><figcaption>MySQL客户端处理客户端请求</figcaption></figure><ol start="8"><li>服务端与客户端建立连接后，服务端会创建一个线程处理该客户端的请求。当连接断开后，该线程会放入缓存，避免频繁创建与销毁线程带来的开销。</li><li>连接创建后，需要经过解析与优化，分别是<strong>查询缓存</strong>、<strong>语法解析</strong>、<strong>查询优化</strong>。</li><li>查询缓存只有查询语句SQL与先前的SQL一模一样时才有机会命中缓存，任何的不同都不会命中。</li><li>包含某些系统函数（比如NOW）、用户自定义变量与函数以及系统表的SQL的查询结果不会被缓存。</li><li>如果某表被更新，那么相关的缓存全都会失效。</li><li>如果缓存未命中，则进入语法解析阶段。</li><li>语法解析完成后进入查询优化，最终会生成一个执行计划。可以使用<code>EXPLAIN</code>命令查看。截止到目前为止尚未访问真实表。</li><li><strong>查询缓存</strong>、<strong>语法解析</strong>、<strong>查询优化</strong>划分为<strong>Mysql Server</strong>的功能，而真实存取数据的功能划分为<strong>存储引擎</strong>的功能。各种存储引擎向<strong>Mysql Server</strong>层提供统一的调用接口（存储引擎API）。</li><li><strong>Mysql Server</strong>完成查询优化后，根据生成的执行计划调用存储引擎API，直接返回数据。</li><li>Mysql存储引擎包含：</li></ol><table><thead><tr><th>存储引擎</th><th>描述</th></tr></thead><tbody><tr><td>ARCHIVE</td><td>用于数据存档（行被插入后不能再修改）</td></tr><tr><td>BLACKHOLE</td><td>丢弃写操作，读操作会返回空内容</td></tr><tr><td>CSV</td><td>在存储数据时，以逗号分隔各个数据项</td></tr><tr><td>FEDERATED</td><td>用来访问远程表</td></tr><tr><td>InnoDB</td><td>具备外键支持功能的事务存储引擎</td></tr><tr><td>MEMORY</td><td>置于内存的表</td></tr><tr><td>MERGE</td><td>用来管理多个MyISAM表构成的表集合</td></tr><tr><td>MyISAM</td><td>主要的非事务处理存储引擎</td></tr><tr><td>NDB</td><td>MySQL集群专用存储引擎</td></tr></tbody></table><p>最常用的是<strong>InnoDB</strong>和<strong>MyISAM</strong>。</p><ol start="18"><li>存储引擎是负责对表中的数据进行提取和写入的，可以为不同的表设置不同的存储引擎。</li></ol><h2 id="第二章-启动选项和系统变量" tabindex="-1"><a class="header-anchor" href="#第二章-启动选项和系统变量"><span>第二章 启动选项和系统变量</span></a></h2><ol><li><p><code>mysqld --skip-networking</code> 禁止客户端TCP/IP通信。</p></li><li><p><code>mysqld --default-storage-engine=MyISAM</code> 设置默认存储引擎，未指定时默认为InnoDB。</p></li><li><p>启动选项有长形式和短形式，例如<code>--host</code>等价于<code>-h</code>，使用短形式时选项名和选项值之间可以没有空格，<code>-p</code>除外。</p></li><li><p>推荐使用配置文件来设置启动选项。</p></li><li><p>配置文件内容格式如下：</p><div class="language-ini line-numbers-mode" data-highlighter="shiki" data-ext="ini" data-title="ini" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">[server]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">(具体的启动选项...)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">[mysqld]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">(具体的启动选项...)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">[mysqld_safe]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">(具体的启动选项...)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">[client]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">(具体的启动选项...)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">[mysql]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">(具体的启动选项...)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">[mysqladmin]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">(具体的启动选项...)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>填写格式如下：</p><div class="language-ini line-numbers-mode" data-highlighter="shiki" data-ext="ini" data-title="ini" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">[server]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">option1            </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 这是option1，该选项不需要选项值</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">option2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;"> value2   </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 这是option2，该选项需要选项值</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以使用类命令行形式:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">--option1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --option2=value2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>启动命令会读取多个组的配置，具体如下：</p></li></ol><table><thead><tr><th>启动命令</th><th>类别</th><th>能读取的组</th></tr></thead><tbody><tr><td>mysqld</td><td>启动服务器</td><td>[mysqld]、[server]</td></tr><tr><td>mysqld_safe</td><td>启动服务器</td><td>[mysqld]、[server]、[mysqld_safe]</td></tr><tr><td>mysql.server</td><td>启动服务器</td><td>[mysqld]、[server]、[mysql.server]</td></tr><tr><td>mysql</td><td>启动客户端</td><td>[mysql]、[client]</td></tr><tr><td>mysqladmin</td><td>启动客户端</td><td>[mysqladmin]、[client]</td></tr><tr><td>mysqldump</td><td>启动客户端</td><td>[mysqldump]、[client]</td></tr></tbody></table><ol start="7"><li><p>如果想指定mysql.server程序的启动参数，则必须将它们放在配置文件中，而不是放在命令行中。mysql.server仅支持start和stop作为命令行参数。</p></li><li><p>选项组的名称后加上特定的MySQL版本号，比如对于[mysqld]选项组来说，可以定义一个[mysqld-5.7]的选项组，它的含义和[mysqld]一样，但只有版本号为5.7的mysqld程序才能使用这个选项组中的选项。</p></li><li><p>如果在多个配置文件中设置了相同的启动选项，则以最后一个配置文件中的为准。需要参考配置文件优先级。</p></li><li><p>在统一配置文件中，如果读取到的多个组包含同一启动项，将<strong>以最后一个出现的组中的启动选项为准</strong>。</p></li><li><p>如果不希望mysql搜索默认路径的配置文件，则可以使用<code>--defaults-file</code>指定配置文件，没有则报错。</p></li><li><p>同一个启动选项既出现在命令行中，又出现在配置文件中，则以命令行中的启动选项为准。</p></li><li><p>MySQL系统变量拥有作用范围<code>GLOBAL</code>和<code>SESSION</code>，即对全部客户端生效或对当前客户端生效。大部分系统变量可以在运行时使用SET命令动态修改。例如：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SET</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> SESSION</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> default_storage_engine </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> MyISAM;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ol><p>不指定作用范围时，默认为<code>SESSION</code>。</p><ol start="14"><li><code>SHOW VARIABLES</code>查看的是<code>SESSION</code>范围的系统变量。可以通过<code>SHOW GLOBAL VARIABLES</code>查看<code>GLOBAL</code>范围的系统变量。</li><li>如果某个客户端改变了某个系统变量在<code>GLOBAL</code>作用范围的值，并不会影响该系统变量在当前已经连接的客户端作用范围为<code>SESSION</code>的值，只会影响后续连入的客户端在作用范围为<code>SESSION</code>的值。</li><li>并不是所有系统变量都具有<code>GLOBAL</code>和<code>SESSION</code>的作用范围。一些系统变量只具有<code>GLOBAL</code>作用范围，比如<code>max_connections</code>；一些系统变量只具有<code>SESSION</code>作用范围，比如<code>insert_id</code>；一些系统变量的值既具有<code>GLOBAL</code>作用范围，也具有<code>SESSION</code>作用范围，比如<code>default_storage_engine</code>；有些系统变量是只读的，并不能设置值，比如<code>version</code>。</li></ol><h2 id="第三章-字符集和比较规则" tabindex="-1"><a class="header-anchor" href="#第三章-字符集和比较规则"><span>第三章 字符集和比较规则</span></a></h2><ol><li><p><strong>同一种字符集可以有多种比较规则</strong>。</p></li><li><p>MySQL中的<strong>utf8</strong>是<strong>utf8mb3</strong>的缩写，<strong>utf8mb3</strong>是utf8字符集的阉割版，使用1<sub>3个字节表示字符，**utf8mb4**才是正常的utf8字符集，使用1</sub>4个字节表示字符。</p></li><li><p>每种字符集对应若干种比较规则，每种字符集都有一种默认的比较规则。<code>SHOW COLLATION</code>的返回结果中的<code>Default</code>列的值为<code>YES</code>的就是该字符集的默认比较规则，比如utf8字符集默认的比较规则就是<code>utf8_general_ci</code>。</p></li><li><p>MySQL有4个级别的字符集和比较规则，分别是<strong>服务器级别</strong>、<strong>数据库级别</strong>、<strong>表级别</strong>与<strong>列级别</strong>。</p></li><li><p>创建数据库时若不指定数据库字符集和比较规则，则使用服务器级别的值。</p></li><li><p>单独修改字符集或比较规则时，只修改字符集，则比较规则将变为修改后的字符集默认的比较规则；只修改比较规则，则字符集将变为修改后的比较规则对应的字符集。</p></li><li><p>MySQL中字符的转换依靠<strong>服务器解码时的字符集</strong><code>character_set_client</code>、<strong>服务器将请求转换成目标字符集</strong><code>character_set_connection</code>以及<strong>服务器返回结果的字符集</strong><code>character_set_results</code>三个系统变量。过程如下：</p><figure><img src="`+e+'" alt="MySQL字符集转换" tabindex="0" loading="lazy"><figcaption>MySQL字符集转换</figcaption></figure></li><li><p>可以使用<code>SET NAMES 字符集名</code>将上述三个系统变量一口气改为客户端字符集，这样可以省去转换过程。</p></li></ol><h2 id="第四章-innodb记录结构" tabindex="-1"><a class="header-anchor" href="#第四章-innodb记录结构"><span>第四章 InnoDB记录结构</span></a></h2><ol><li><p><strong>InnoDB</strong>采取的方式是将数据划分为若干个页，以页作为磁盘和内存之间交互的基本单位，InnoDB中页的大小一般为16 KB。也就是说，在一般情况下，一次最少从磁盘中读取16 KB的内容到内存中，一次最少把内存中的16 KB内容刷新到磁盘中。</p></li><li><p>记录在磁盘上的存放方式也被称为<strong>行格式</strong>或<strong>记录格式</strong>，分别有<strong>Compact</strong>、<strong>Redundant</strong>、<strong>Dynamic</strong>和<strong>Compressed</strong>行格式。</p></li><li><p><strong>Compact</strong>格式结构如下：</p><figure><img src="'+d+'" alt="Compact 行格式结构" tabindex="0" loading="lazy"><figcaption>Compact 行格式结构</figcaption></figure><p>变长字段长度列表：变长字段即MySQL中<code>VARCHAR(M)</code>、<code>VARBINARY(M)</code>、各种<code>TEXT</code>类型、各种<code>BLOB</code>类型等长度不固定的类型的字段。变长字段中存储多少字节的数据是不固定的，所以在存储真实数据时需要顺便把这些数据占用的字节数也存起来。</p><p>在Compact行格式中，把所有变长字段的真实数据占用的字节长度都存放在记录的开头部位，从而形成一个变长字段长度列表，各变长字段数据占用的字节数按照列的顺序<strong>逆序存放</strong>。</p></li><li><p>Compact行真实占用字节长度 = 字符长度 * 相应字符编码一个字符占用的字节数。</p></li><li><p>变长字段长度列表中可能会用1个或2个字节来表示某个变长字段真实长度。若可变字段最大长度M&lt;=255，则用1个字节表示（11111111）；若理论最大长度大于255，则看实际占用长度L，若L&lt;=127则用1个字节，否则用2个字节。此处用127进行分割是因为有些字符可能需要两个字节来表示。判断一个字符是一个字节表示还是两个字节表示通过首位标志位是0是1来判断，0则为单字节字符，1则表示当前字节为整个字符的一半。</p></li><li><p>并不是所有记录都有变长字段长度列表，变长字段长度列表仅存储非NULL值列的可变字段长度，若所有列都不是可变字段长度列或所有可变字段长度列都为NULL，则该部分就不需要。</p></li><li><p>如果没有允许NULL值的列，那么NULL值列表也不存在。</p></li><li><p>如果存在允许NULL值的列，每一列在NULL值列表中对应一个二进制位，也是逆序排序，若为0则该列为非NULL值，若为1则该列为NULL值。</p></li><li><p>MySQL规定NULL值列表必须用整数个字节表示，一个字节有8位，可以记录8列，若允许NULL值的列不足8列，则高位补0。</p><figure><img src="'+r+'" alt="NULL值列表高位补零" tabindex="0" loading="lazy"><figcaption>NULL值列表高位补零</figcaption></figure></li><li><p>记录头由5个固定字节组成，即40位，代表着不同的含义：</p></li></ol><figure><img src="'+p+'" alt="记录头结构" tabindex="0" loading="lazy"><figcaption>记录头结构</figcaption></figure><table><thead><tr><th>名称</th><th>大小（单位：bit）</th><th>描述</th></tr></thead><tbody><tr><td>预留位1</td><td>1</td><td>没有使用</td></tr><tr><td>预留位2</td><td>1</td><td>没有使用</td></tr><tr><td>delete_mask</td><td>1</td><td>标记该记录是否被删除</td></tr><tr><td>min_rec_mask</td><td>1</td><td>B+树的每层非叶子节点中的最小记录都会添加该标记</td></tr><tr><td>n_owned</td><td>4</td><td>表示当前记录拥有的记录数</td></tr><tr><td>heap_no</td><td>13</td><td>表示当前记录在记录堆的位置信息</td></tr><tr><td>record_type</td><td>3</td><td>表示当前记录的类型，0表示普通记录，1表示B+树非叶子节点记录，2表示最小记录，3表示最大记录</td></tr><tr><td>next_record</td><td>16</td><td>表示下一条记录的相对位置</td></tr></tbody></table><ol start="11"><li>MySQL每条记录除了自己定义的数据列之外，还会有一些隐藏列：<code>DB_ROW_ID</code>（唯一标识行id）、<code>DB_TRX_ID</code>（事务id）、<code>DB_ROLL_PTR</code>（回滚指针）。</li><li>InnoDB表对主键的生成策略：优先使用用户自定义主键作为主键，如果用户没有定义主键，则选取一个Unique键作为主键，如果表中连Unique键都没有定义，InnoDB会为表默认添加一个名为<code>DB_ROW_ID</code>的隐藏列作为主键。因此，从上表中可以看出：InnoDB存储引擎会为每条记录添加<code>DB_TRX_ID</code>和<code>DB_ROLL_PTR</code>这两个列，但<code>DB_ROW_ID</code>是可选的（在没有自定义主键以及Unique键的情况下才会添加该列）。</li><li>在Compact行格式中，加不加入<strong>可变字段长度列表</strong>还要参考当前的字符集，例如<code>char(n)</code>类型的字段，若使用<code>ascii</code>字符集，则其为定长字段列，但如果使用<code>utf8</code>，则该列中的字符可能是1个字节也可能是3个字节表示的，此时需要将长度存储到可变长度字段列表中。</li><li><strong>Redundant</strong>格式行相比<strong>Compressed</strong>格式行，头部的<strong>可变字段长度列表</strong>变为<strong>字段长度偏移列表</strong>，用相邻两个数字的差值来表示各个字段（所有字段长度都会存储，包括隐藏列）的实际长度。</li><li>Redundant格式行的记录头由6个字节组成，即48位：</li></ol><table><thead><tr><th>名称</th><th>大小（单位：bit）</th><th>描述</th></tr></thead><tbody><tr><td>预留位1</td><td>1</td><td>没有使用</td></tr><tr><td>预留位2</td><td>1</td><td>没有使用</td></tr><tr><td>delete_mask</td><td>1</td><td>标记该记录是否被删除</td></tr><tr><td>min_rec_mask</td><td>1</td><td>B+树的每层非叶子节点中的最小记录都会添加该标记</td></tr><tr><td>n_owned</td><td>4</td><td>表示当前记录拥有的记录数</td></tr><tr><td>heap_no</td><td>13</td><td>表示当前记录在页面堆的位置信息</td></tr><tr><td>n_field</td><td>10</td><td>表示记录中列的数量</td></tr><tr><td>1byte_offs_flag</td><td>1</td><td>标记字段长度偏移列表中每个列对应的偏移量是使用1字节还是2字节表示的</td></tr><tr><td>next_record</td><td>16</td><td>表示下一条记录的相对位置</td></tr></tbody></table><ol start="16"><li><strong>字段长度偏移列表</strong>实质上是存储每个列中的值占用的空间在记录的真实数据处结束的位置，因此通过计算差值可以计算列长度。整条记录实际数据长度小于等于127（01111111），则用1个字节；大于127小于等于32767（0111111111111111），则用2个字节。超出之后存到溢出页，字段偏移长度表仅存储本页面上的偏移。</li><li><strong>字段长度偏移列表</strong>无NULL值列表，列是否为NULL判断如下：当列是定长列时，将对应偏移量转为二进制，若第一位为1则该列值为NULL，其真实数据用0x00填充；若列为变长列，用偏移量减相邻值计算长度，若长度为0，则该列值为NULL。</li><li>Redundant格式行中，<code>char(n)</code>类型列真实数据空间始终为字符集格式最大长度 * n，例如utf8的<code>char(10)</code>就始终为30。</li><li>MySQL除了<code>BLOB</code>和<code>TEXT</code>，其他所有类型的一行（不包含记录头和隐藏列）总长不能超过65535个字节。</li><li>在Compact和Redundant行格式中，对于占用存储空间非常大的列，在记录的真实数据处只会存储该列的一部分数据，把剩余的数据分散存储在几个其他的页中，然后记录的真实数据处用20个字节存储指向这些页的地址（当然这20个字节中还包括这些分散在其他页面中的数据的占用的字节数）。</li><li>一个页一般是16KB，当记录中的数据太多，当前页放不下的时候，会把多余的数据存储到其他页中，这种现象称为<strong>行溢出</strong>。</li><li>Redundant行格式中，当某列数据非常长时，该行只会记录该列前<em>768字节</em>的数据，然后记录溢出页的地址。</li></ol><figure><img src="'+h+'" alt="Redundant存储行数据" tabindex="0" loading="lazy"><figcaption>Redundant存储行数据</figcaption></figure><figure><img src="'+o+'" alt="Redundant行格式" tabindex="0" loading="lazy"><figcaption>Redundant行格式</figcaption></figure><ol start="23"><li>不只是<code>VARCHAR(M)</code>类型的列，其他的<code>TEXT</code>、<code>BLOB</code>类型的列在存储数据非常多的时候也会发生行溢出。</li><li>MySQL中要求一个页至少存储两行记录。</li><li>MySQL 5.7、8默认行格式是<strong>Dynamic</strong>。</li><li><strong>Dynamic</strong>和<strong>Compressed</strong>行格式会把所有行溢出数据存储到其他页，原页面只记录页地址。<strong>Compressed</strong>会对页数据进行压缩。</li></ol><h2 id="第五章-innodb数据页结构" tabindex="-1"><a class="header-anchor" href="#第五章-innodb数据页结构"><span>第五章 InnoDB数据页结构</span></a></h2><ol><li><p>页是InnoDB管理存储空间的基本单位。</p></li><li><p>MySQL中有许多不同类型的页。</p><figure><img src="'+k+'" alt="Index索引页结构" tabindex="0" loading="lazy"><figcaption>Index索引页结构</figcaption></figure></li></ol><table><thead><tr><th>名称</th><th>中文名</th><th>占用空间大小</th><th>简单描述</th></tr></thead><tbody><tr><td>File Header</td><td>文件头部</td><td>38字节</td><td>页的一些通用信息</td></tr><tr><td>Page Header</td><td>页面头部</td><td>56字节</td><td>数据页专有的一些信息</td></tr><tr><td>Infimum + Supremum</td><td>最小记录和最大记录</td><td>26字节</td><td>两个虚拟的行记录</td></tr><tr><td>User Records</td><td>用户记录</td><td>不确定</td><td>实际存储的行记录内容</td></tr><tr><td>Free Space</td><td>空闲空间</td><td>不确定</td><td>页中尚未使用的空间</td></tr><tr><td>Page Directory</td><td>页面目录</td><td>不确定</td><td>页中的某些记录的相对位置</td></tr><tr><td>File Trailer</td><td>文件尾部</td><td>8字节</td><td>校验页是否完整</td></tr></tbody></table><ol start="3"><li><p>我们自己插入的记录会以我们设置好的行格式存储在User Records的部分。User Records起初不存在，每当插入数据时会从Free Space中申请。Free Space使用完即页使用完了。</p><figure><img src="'+g+'" alt="记录在Index索引页中的存储" tabindex="0" loading="lazy"><figcaption>记录在Index索引页中的存储</figcaption></figure></li><li><p>当表有主键时，一行记录不会生成row_id，而是把原来row_id的位置存储主键那一列的数据。</p></li><li><p>User Records中记录的存储格式如下（记录本身的信息进行了省略，只显示了记录头和数据部分）：</p><figure><img src="'+c+'" alt="记录在Index索引页中的存储 2" tabindex="0" loading="lazy"><figcaption>记录在Index索引页中的存储 2</figcaption></figure></li><li><p>当记录被删除时，记录头中的delete_mask将会从0置1，但是实际上并不会从磁盘上立刻删除，而是生成了一个“垃圾链表”，垃圾链表上的记录构成一个可重用空间，当有新纪录进来时会将数据覆盖到这个可重用空间上。</p></li><li><p>heap_no 记录位置从2开始。0和1由两条隐藏记录<code>最小记录</code>和<code>最大记录</code>占用。</p></li><li><p>最小记录和最大记录都由5B的记录头和8B的固定部分组成：</p><figure><img src="'+A+'" alt="最小记录和最大记录构成" tabindex="0" loading="lazy"><figcaption>最小记录和最大记录构成</figcaption></figure></li><li><p>record_type为记录的类型，0为普通记录，1为B+树非叶子节点记录，2为最小记录，3为最大记录。</p></li><li><p>next_record为当前记录到下一条记录的偏移量。通过该值，从最小记录开始，经过用户记录，到最大记录结束，构成了一个单向链表。</p></li></ol><figure><img src="'+y+'" alt="记录链表" tabindex="0" loading="lazy"><figcaption>记录链表</figcaption></figure><ol start="11"><li>删除记录的步骤：</li></ol><ul><li>将被删除记录的delete_mask置为1</li><li>将上一条记录的值的next_record值指向被删除记录的下一条记录</li><li>将被删除记录的next_record置为0</li><li>最大记录的n_owned值减1</li></ul><p>可以参考单向链表删除节点的方法</p><ol start="12"><li>不论我们怎么对页中的记录做增删改操作，InnoDB始终会维护一条记录的单链表，链表中的各个节点是按照主键值由小到大的顺序连接起来的。</li><li>把页中所有正常的记录划分为几个组，每个组中的最后一条记录的n_owned代表<code>该记录拥有多少条记录</code>，即<code>该组拥有多少条记录</code>。将每一组中最后一条记录的地址偏移量统一保存到页尾部的一个位置，这个偏移量被成为<code>Slot槽</code>，组成的部分即为页目录.</li><li>对于最小记录所在的分组只能有 1 条记录，最大记录所在的分组拥有的记录条数只能在 1~8 条之间，剩下的分组中记录的条数范围只能在是 4~8 条之间。</li><li>记录分组步骤如下：</li></ol><ul><li>初始只有最小记录和最大记录两个分组。</li><li>之后每插入一条记录，就会找到主键值大于要插入记录且差值最小的一个槽，将槽对应的n_owned记录加1，表示新增一条记录，直到该分组记录数量达到8。</li><li>在分组记录数达到8后，再添加一条记录，会将该分组拆分为大小分别为4和5的两个分组。此时会新增一个槽用于记录新增分组最后一条记录（最大记录）的偏移量。</li></ul><ol start="16"><li>根据主键值查找记录时，会通过二分法（用的还是双指针）找到对应记录所在的槽，然后再通过next_record遍历这个槽来找到对应的记录。</li><li>Page Header页头用于记录页面中的状态信息，固定56个字节：</li></ol><table><thead><tr><th>名称</th><th>占用空间大小</th><th>描述</th></tr></thead><tbody><tr><td>PAGE_N_DIR_SLOTS</td><td>2字节</td><td>在页目录中的槽数量</td></tr><tr><td>PAGE_HEAP_TOP</td><td>2字节</td><td>还未使用的空间最小地址，也就是说从该地址之后就是Free Space</td></tr><tr><td>PAGE_N_HEAP</td><td>2字节</td><td>本页中的记录的数量（包括最小和最大记录以及标记为删除的记录）</td></tr><tr><td>PAGE_FREE</td><td>2字节</td><td>第一个已经标记为删除的记录地址（各个已删除的记录通过next_record也会组成一个单链表，这个单链表中的记录可以被重新利用）</td></tr><tr><td>PAGE_GARBAGE</td><td>2字节</td><td>已删除记录占用的字节数</td></tr><tr><td>PAGE_LAST_INSERT</td><td>2字节</td><td>最后插入记录的位置</td></tr><tr><td>PAGE_DIRECTION</td><td>2字节</td><td>记录插入的方向</td></tr><tr><td>PAGE_N_DIRECTION</td><td>2字节</td><td>一个方向连续插入的记录数量</td></tr><tr><td>PAGE_N_RECS</td><td>2字节</td><td>该页中记录的数量（不包括最小和最大记录以及被标记为删除的记录）</td></tr><tr><td>PAGE_MAX_TRX_ID</td><td>8字节</td><td>修改当前页的最大事务ID，该值仅在二级索引中定义</td></tr><tr><td>PAGE_LEVEL</td><td>2字节</td><td>当前页在B+树中所处的层级</td></tr><tr><td>PAGE_INDEX_ID</td><td>8字节</td><td>索引ID，表示当前页属于哪个索引</td></tr><tr><td>PAGE_BTR_SEG_LEAF</td><td>10字节</td><td>B+树叶子段的头部信息，仅在B+树的Root页定义</td></tr><tr><td>PAGE_BTR_SEG_TOP</td><td>10字节</td><td>B+树非叶子段的头部信息，仅在B+树的Root页定义</td></tr></tbody></table><ol start="18"><li>PAGE_DIRECTION用来表示最后一条记录插入的方向，若新的一条记录的主键值比上一条插入的记录大，则插入方向为右边，否则为左边。</li><li>Page Header针对InnoDB的Index页记录各种信息，而File Header记录的是所有类型的页通用的信息，固定38个字节：</li></ol><table><thead><tr><th>名称</th><th>占用空间大小</th><th>描述</th></tr></thead><tbody><tr><td>FIL_PAGE_SPACE_OR_CHKSUM</td><td>4字节</td><td>页的校验和（checksum值）</td></tr><tr><td>FIL_PAGE_OFFSET</td><td>4字节</td><td>页号</td></tr><tr><td>FIL_PAGE_PREV</td><td>4字节</td><td>上一个页的页号</td></tr><tr><td>FIL_PAGE_NEXT</td><td>4字节</td><td>下一个页的页号</td></tr><tr><td>FIL_PAGE_LSN</td><td>8字节</td><td>页面被最后修改时对应的日志序列位置（英文名是：Log Sequence Number）</td></tr><tr><td>FIL_PAGE_TYPE</td><td>2字节</td><td>该页的类型</td></tr><tr><td>FIL_PAGE_FILE_FLUSH_LSN</td><td>8字节</td><td>仅在系统表空间的一个页中定义，代表文件至少被刷新到了对应的LSN值</td></tr><tr><td>FIL_PAGE_ARCH_LOG_NO_OR_SPACE_ID</td><td>4字节</td><td>页属于哪个表空间</td></tr></tbody></table><ol start="20"><li>每一个页都有单独、唯一的一个页号。</li><li>页类型如下：</li></ol><table><thead><tr><th>类型名称</th><th>十六进制</th><th>描述</th></tr></thead><tbody><tr><td>FIL_PAGE_TYPE_ALLOCATED</td><td>0x0000</td><td>最新分配，还没使用</td></tr><tr><td>FIL_PAGE_UNDO_LOG</td><td>0x0002</td><td>Undo日志页</td></tr><tr><td>FIL_PAGE_INODE</td><td>0x0003</td><td>段信息节点</td></tr><tr><td>FIL_PAGE_IBUF_FREE_LIST</td><td>0x0004</td><td>Insert Buffer空闲列表</td></tr><tr><td>FIL_PAGE_IBUF_BITMAP</td><td>0x0005</td><td>Insert Buffer位图</td></tr><tr><td>FIL_PAGE_TYPE_SYS</td><td>0x0006</td><td>系统页</td></tr><tr><td>FIL_PAGE_TYPE_TRX_SYS</td><td>0x0007</td><td>事务系统数据</td></tr><tr><td>FIL_PAGE_TYPE_FSP_HDR</td><td>0x0008</td><td>表空间头部信息</td></tr><tr><td>FIL_PAGE_TYPE_XDES</td><td>0x0009</td><td>扩展描述页</td></tr><tr><td>FIL_PAGE_TYPE_BLOB</td><td>0x000A</td><td>BLOB页</td></tr><tr><td>FIL_PAGE_INDEX</td><td>0x45BF</td><td>索引页，也就是我们所说的数据页</td></tr></tbody></table><ol start="22"><li>并非所有类型的页都有<code>FIL_PAGE_PREV</code>和<code>FIL_PAGE_NECT</code>属性。</li><li>File Trailer固定由8个字节组成，前4个字节代表页的校验和，后4个字节代表页面被最后修改时对应的日志序列位置（LSN）。</li><li>File Trailer所有类型的页通用。</li></ol><h2 id="第六章-b-树索引" tabindex="-1"><a class="header-anchor" href="#第六章-b-树索引"><span>第六章 B+树索引</span></a></h2><ol><li><p>在无索引且以非主键列为条件的查找中，查询过程是从第一页按顺序进行，效率较低。</p></li><li><p>新插入数据分配的页号不一定与上一条数据分配的页号连续，页与页之间以双向链表的形式连接，因此在物理存储上不一定连续。</p></li><li><p>记录头信息中的 <code>record_type</code> 为 1 的是目录项记录。</p></li><li><p>目录项记录仅包含主键值和页的编号两个列，而普通的用户记录的列是用户自定义的，可能包含多个列，此外还有 InnoDB 自己添加的隐藏列。</p></li><li><p>只有在存储目录项记录的页中，主键值最小的目录项记录的 <code>min_rec_mask</code> 值为 1，其他记录的 <code>min_rec_mask</code> 值均为 0。</p></li><li><p>存储目录项记录的页和存储用户记录的页是相互独立的，不会混合存储两种记录。</p><figure><img src="'+B+'" alt="目录项记录结构" tabindex="0" loading="lazy"><figcaption>目录项记录结构</figcaption></figure><figure><img src="'+m+'" alt="B+树结构" tabindex="0" loading="lazy"><figcaption>B+树结构</figcaption></figure><p>实际用户记录存放在 B+ 树的最底层节点上，这些节点称为叶子节点或叶节点，其余用来存放目录项的节点称为非叶子节点或内节点，其中 B+ 树最上面的节点称为根节点。</p></li><li><p>拥有以下特性的 B+ 树称为 <strong>聚簇索引</strong>：</p><ul><li><p>使用记录主键值的大小进行记录和页的排序，包括三个方面的含义：</p><ul><li>页内的记录按照主键的大小顺序排成一个单向链表。</li><li>各个存放用户记录的页根据页中用户记录的主键大小顺序排成一个双向链表。</li><li>存放目录项记录的页分为不同的层次，在同一层次中的页也根据页中目录项记录的主键大小顺序排成一个双向链表。</li></ul></li><li><p>B+ 树的叶子节点存储完整的用户记录。</p></li></ul><p>这种聚簇索引不需要在 MySQL 语句中显式使用 <code>INDEX</code> 语句去创建（后面会介绍索引相关的语句），InnoDB 存储引擎会自动为我们创建聚簇索引。另一个有趣的点是，在 InnoDB 存储引擎中，聚簇索引就是数据的存储方式（所有用户记录都存储在了叶子节点），也就是所谓的“索引即数据，数据即索引”。</p></li><li><p>聚簇索引只有在搜索条件为主键时才有效。</p></li><li><p>二级索引 / 辅助索引的特点如下：</p><ul><li><p>使用记录 <code>c2</code> 列的大小进行记录和页的排序，包括三个方面的含义：</p><ul><li>页内的记录按照 <code>c2</code> 列的大小顺序排成一个单向链表。</li><li>各个存放用户记录的页根据页中记录的 <code>c2</code> 列大小顺序排成一个双向链表。</li><li>存放目录项记录的页分为不同的层次，在同一层次中的页也根据页中目录项记录的 <code>c2</code> 列大小顺序排成一个双向链表。</li></ul></li><li><p>B+ 树的叶子节点存储的不是完整的用户记录，而仅包含 <code>c2</code> 列和主键这两个列的值。</p></li><li><p>目录项记录中不再是主键 + 页号的搭配，而变成了 <code>c2</code> 列 + 页号的搭配。</p></li></ul></li><li><p>通过二级索引查找目标记录的步骤如下：</p><ul><li>确定目录项记录页</li><li>通过目录项记录页确定用户记录真实所在的页</li><li>在真实存储用户记录的页中定位到具体的记录</li><li>由于 B+ 树的叶子节点中的记录只存储了 <code>c2</code> 和 <code>c1</code>（即主键）两个列，因此必须根据主键值再去聚簇索引中查找完整的用户记录。</li></ul><p>这个过程称为 <strong>回表</strong>。</p></li><li><p>联合索引是以多列的值的大小排序建立 B+ 树，本质上也是二级索引，区别在于只会生成一棵 B+ 树。</p></li><li><p>一个 B+ 树索引的根节点自诞生之日起，便不会再移动。最开始表只有一个节点，不断向其中添加记录，超出大小上限时，其数据会先分配到一个新的页，然后该新页进行 <strong>页分裂</strong>，分出另一个新页，将数据按相关索引列值大小排序分配到不同的页上，原来的节点升级为这两个页的根节点。此后每当 InnoDB 需要用到该索引时，会从固定的节点中取出该索引。</p></li><li><p>为了让新插入记录能找到自己在那个页里，需要保证在 B+ 树的同一层内节点的目录项记录除页号字段外是唯一的。因此，二级索引的内节点的目录项记录实际上由三个部分构成：</p><ul><li>索引列的值</li><li>主键值</li><li>页号</li></ul><p>此时列值相同时通过比较主键值进行排序。</p></li><li><p>在 MyISAM 中，索引和用户记录完全独立存储。先将用户记录存储到一张列表中，然后建立一张主键 -&gt; 行号的索引，通过索引找到行号，再根据行号找到实际记录，因此 MyISAM 中的索引全都是二级索引。</p></li><li><p>MyISAM 中对其他列建立索引的原理与 InnoDB 中类似，在叶子节点处存储的是相应列值 + 行号。</p></li></ol><h2 id="第七章-b-树索引的使用" tabindex="-1"><a class="header-anchor" href="#第七章-b-树索引的使用"><span>第七章 B+树索引的使用</span></a></h2><ol><li><p><strong>匹配左边的列</strong>：命中多列的联合索引必须从左边开始，可以只查询部分列来命中部分索引。由于 InnoDB B+树的目录项记录是多列组成的单向链表，因此只能先匹配前面的列。</p></li><li><p><strong>匹配列前缀</strong>：在匹配左边的列的前提下，搜索索引列时使用条件 <em><strong>&#39;str%&#39;</strong></em>，也能快速定位记录。</p></li><li><p><strong>匹配范围值</strong>：B+树记录按照索引列值的大小进行排序，因此在使用范围搜索条件（如 &gt;、&lt; 等）时，也能快速定位记录。然而，对于多个索引列进行范围查找时，只有最左边的列可以利用 B+树索引快速定位记录。</p></li><li><p><strong>范围查找的优先级</strong>：如果对多个索引列进行范围查找，而左边的列已经通过精确查找（已使用 B+树索引），那么下面第一个范围查找的列将使用 B+树索引。</p></li><li><p><strong>使用索引列排序</strong>：查询语句中若使用索引列进行排序，可以省去文件排序的过程。在使用联合索引时，也需遵循前述规则。</p></li><li><p><strong>不能使用联合索引进行排序的情况</strong>：</p><ul><li><code>ORDER BY</code> 中的字段 ASC 和 DESC 混用，排序方向不一致</li><li><code>WHERE</code> 子句中使用了非排序列</li><li>排序中包含非同一个索引的列</li><li>排序中使用了复杂的表达式（只能使用简单的列排序，不能使用函数处理）</li></ul></li><li><p><strong>使用 GROUP BY</strong>：当 <code>GROUP BY</code> 中的列恰巧与索引一致时，可以使用 B+树进行分组，而非默认的在内存中分组。</p></li><li><p><strong>回表记录的影响</strong>：需要回表的记录越多，使用二级索引的性能就越低。</p></li><li><p><strong>全表查询的倾向</strong>：需要回表的记录数越多，MySQL 越倾向于使用全表查询。</p></li><li><p><strong>尽量避免回表</strong>：若查询列表中只包含索引列，则可以避免回表操作带来的性能损耗。</p></li><li><p><strong>索引创建</strong>：尽量只为用于分组、排序或搜索的列创建索引。</p></li><li><p><strong>基数考虑</strong>：考虑列的基数（同一列中不同值的数量），为基数大的列建立索引。</p></li><li><p><strong>索引列类型</strong>：索引列的类型尽量小。数据类型越小，查询时的比较速度就越快；数据类型越小，一个页存储的记录就越多，从而减少磁盘 I/O 带来的性能损耗。</p></li><li><p><strong>字符串列索引</strong>：尽量只对字符串列的前面部分字符进行索引，尤其是字符串列存储值较大的时候。但这样会使得该列排序无法使用索引排序，只能使用文件排序。</p></li><li><p><strong>索引列的独立性</strong>：让索引列在比较表达式中单独出现。例如：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> table</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> WHERE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> age </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 20</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> / </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>而不是：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> table</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> WHERE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> age * </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 20</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这样才能命中索引。</p></li><li><p><strong>避免冗余索引</strong>：避免冗余索引和重复索引的出现。</p></li></ol><h2 id="第八章-mysql的数据目录" tabindex="-1"><a class="header-anchor" href="#第八章-mysql的数据目录"><span>第八章 MySQL的数据目录</span></a></h2><ol><li>MySQL服务器程序在启动时会到文件系统的某个目录下加载一些文件，之后在运行过程中产生的数据也都会存储到这个目录下的某些文件中，这个目录就称为 <code>数据目录</code>。</li><li>每个数据库都对应数据目录下的一个子目录(文件夹)，除了系统数据库 <code>information_schema</code>。</li><li>页被划分于表空间中，表空间对应文件系统上的一个或多个文件。</li><li>表空间分为系统表空间、独立表空间等多种类型。</li><li>每个MySQL只会有一个系统表空间。</li><li>在MySQL 5.6.6 以及之后的版本中，InnoDB并不会默认的把各个表的数据存储到系统表空间中，而是为每一个表建立一个独立表空间，也就是说我们创建了多少个表，就有多少个独立表空间。使用独立表空间来存储表数据的话，会在该表所属数据库对应的子目录下创建一个表示该独立表空间的文件，文件名和表名相同，只不过添加了一个 .ibd 的扩展名而已。</li><li>在MySQL 8.0 及以上版本中，.frm 文件已被替换为数据字典，表结构信息存储在系统表中，而不是以文件形式存在。</li><li>MyISAM没有表空间，表数据都存放在对应的数据库子目录下。 <code>.MYD</code> 代表表的数据文件，<code>.MYI</code> 代表表的索引文件。</li><li>存储视图的时候是不需要存储真实的数据的，只需要把它的结构存储起来就行了。和表一样，描述视图结构的文件也会被存储到所属数据库对应的子目录下面，只会存储一个视图名 .frm 的文件。但在 MySQL 8 之后页直接存在了数据字典里。</li><li>MySQL会把数据库名和表名中所有除数字和拉丁字母以外的所有字符在文件名里都映射成 @+编码值的形式作为文件名。</li><li>系统数据库 mysql：存储了 MySQL 的用户账户和权限信息，一些存储过程、事件的定义信息，一些运行过程中产生的日志信息，一些帮助信息以及时区信息等。</li><li>系统数据库 information_schema：保存着 MySQL 服务器维护的所有其他数据库的信息，比如表、视图、触发器、列、索引等等。这些信息并不是真实的用户数据，而是一些描述性信息，有时候也称之为元数据。</li><li>系统数据库 performance_schema：保存着 MySQL 状态信息。</li><li>系统数据库 sys：通过视图把 information_schema 和 performance_schema结合起来，方便程序员查询信息。</li></ol><h2 id="第九章-innodb的表空间" tabindex="-1"><a class="header-anchor" href="#第九章-innodb的表空间"><span>第九章 InnoDB的表空间</span></a></h2><ol><li><p>对于 16KB 的页而言，每 64 页分为一个区（extent，共 1MB），每 256 个区分为一组（共 256MB）。</p></li><li><p>表空间中第一个组的头三个页的类型是固定的，分别为：</p><ul><li><strong>FSP_HDR</strong>（Flash Storage Protocol Header）：用于记录表空间的一些属性和本组所有的区，即（extent0~extent255）。一个表空间只有一个 FSP_HDR 类型的页。</li><li><strong>IBUF_BITMAP</strong>（Input Buffer Bitmap）：存储本组所有的区的所有页关于 INSERT BUFFER 的信息。</li><li><strong>INODE</strong>（Index Node 索引节点）：类型的页存储了许多称为 INODE 的数据结构。</li></ul></li><li><p>其余组头两个页的类型是固定的，分别为：</p><ul><li><strong>XEDS</strong>：extent descriptor，用来登记本组 256 个区的属性。</li><li><strong>IBUF_BITMAP</strong>。</li></ul></li><li><p>为什么要引入区？如果仅有页的概念，并不影响存储引擎的运行。但是在数据量及其庞大时，已知数据都存储在聚簇索引和二级索引中，索引中的每一层都是一个双向链表，范围查询时我们定位数据只需要从找到最左边数据所在页和最右边数据所在页，遍历其中记录即可，但是这两个页物理位置可能相距非常远，此时的 IO 为随机 IO，相比顺序 IO 速度非常慢，所以需要引入区，区即为物理位置上 1MB 的连续空间，连续的 64 个页。为了尽可能地消除随机 IO。</p></li><li><p>InnoDB 中把所有非叶子节点放到一个区，把叶子节点放到另外一个区。存放所有非叶子节点的区的结合为一个段，存放叶子结点的区的集合为另一个段。一个索引会生成两个段，一个叶子节点段，一个非叶子节点段。</p></li><li><p>但是记录并不是一开始就存储在段中的，零碎的记录先存入碎片区，碎片区不属于任何一个段，其直属于表空间。碎片区中的页可能不只存储了一个区的数据，而是多个区的数据。</p></li><li><p>区分为四种状态（类型，State）：FREE, FREE_FRAG, FULL_FRAG, FSEG（Fragmented Segment）。前三个状态时区直属于表空间，最后一个状态时区才属于某一个段。</p></li><li><p>为了方便管理区（不在段中的），引入 XDES Entry（Extent Descriptor Entry），结构如下：</p><figure><img src="'+E+'" alt="XDES Entry结构" tabindex="0" loading="lazy"><figcaption>XDES Entry结构</figcaption></figure><ul><li><strong>Segment ID</strong>：表示当前区所在的段，前提是该区已经被分配给某个段了，否则没有意义。</li><li><strong>List Node</strong>：指向前一个和后一个 XDES Entry。</li><li><strong>State</strong>：区的状态。</li><li><strong>Page State Bitmap</strong>：描述页的状态，总共 16 字节，128 位，一个区中 64 个页，每个页用两位来描述，第一位描述该页是否空闲，第二位还没用。</li></ul></li><li><p>当某个段数据较少时，向该段中插入一条数据。MySQL 先会寻找该段中是否存在 FREE_FRAG 碎片区，若有则取其零碎页将数据插入其中。若没有，则向表空间申请一个 FREE 状态的区，然后从该区中取零碎页将数据插入，后续插入的数据都会插入该区，后续不同段使用零碎页都会从该区中取 FULL_FRAG。</p></li><li><p>通过 XDES Entry 中的 List Node，将 Free 状态的 XDES Entry 连接起来，形成 <code>Free链表</code>；FREE_FRAG 状态的 Entry 连接起来形成 <code>FREE_FRAG链表</code>；FULL_FRAG 的 Entry 连接起来形成 <code>FULL_FRAG</code> 链表。每当需要取 FREE_FRAG 状态的区时，就取 FREE_FRAG 链表的头结点，若链表无节点，就从 FREE 链表中取一个节点，插入数据后节点转移到 FREE_FRAG 链表。</p></li><li><p>当段中的数据已经占满 32 个零碎页时，就会直接申请完整的区来插入数据了。</p></li><li><p>同一个段中，根据区的状态，将其 XDES Entry 连接成不同的链表：</p><ul><li><strong>FREE</strong>：同一个段中，所有页都是空闲的区会被加入该列表。</li><li><strong>NOT_FULL</strong>：同一个段中，仍有空闲页的区会被加入该列表。</li><li><strong>FULL</strong>：同一个段中，没有空闲页的区会被加入该列表。</li></ul></li><li><p>每个索引都有两个段，每个段都会维护上述三个链表。</p></li><li><p>用于定位上述链表的结构称为 List Base Node，链表基节点，结构如下：</p></li></ol><figure><img src="'+b+'" alt="List Base Node结构" tabindex="0" loading="lazy"><figcaption>List Base Node结构</figcaption></figure><ul><li><strong>List Length</strong> 表明该链表一共有多少节点。</li><li><strong>First Node Page Number</strong> 和 <strong>First Node Offset</strong> 表明该链表的头节点在表空间中的位置。</li><li><strong>Last Node Page Number</strong> 和 <strong>Last Node Offset</strong> 表明该链表的尾节点在表空间中的位置。</li></ul><p>一般某个链表对应的 List Base Node 结构放置在表空间中固定的位置。<br> 15. 正如有 XDES Entry 描述区，描述段也有对应的结构，称为 INODE Entry，结构如下：</p><figure><img src="'+u+'" alt="INODE Entry结构" tabindex="0" loading="lazy"><figcaption>INODE Entry结构</figcaption></figure><ul><li><strong>Segment ID</strong>：所描述的段的编号。</li><li><strong>NOT_FULL_N_USED</strong>：对应段的 NOT_FULL 链表已经使用了多少页，下次使用 NOT_FULL 可以直接依靠该值定位到，而不需要从头遍历节点。</li><li>3个 List Base Node：分别为 FREE、NOT_FULL、FULL 链表的链表基节点。</li><li><strong>Magic Number</strong>：表示该 INODE Entry 是否已经初始化，若值为 <code>97937874</code> 则表示已经初始化，否则没有。</li><li><strong>Fragment Array Entry</strong>：段是零散页和一些完整区的集合。每个 Fragment Array Entry 对应着一个零散页，每个四字节，表示页号。</li></ul><ol start="16"><li>第一个组中的第一个页，即表空间中的第一个页，类型为 FSP_HDR 的页的结构如下：</li></ol><figure><img src="'+F+'" alt="FSP_HDR类型页结构" tabindex="0" loading="lazy"><figcaption>FSP_HDR类型页结构</figcaption></figure><table><thead><tr><th>名称</th><th>中文名</th><th>占用空间大小</th><th>简单描述</th></tr></thead><tbody><tr><td>File Header</td><td>文件头部</td><td>38字节</td><td>页的一些通用信息</td></tr><tr><td>File Space Header</td><td>表空间头部</td><td>112字节</td><td>表空间的一些整体属性信息</td></tr><tr><td>XDES Entry</td><td>区描述信息</td><td>10240字节</td><td>存储本组 256 个区对应的属性信息</td></tr><tr><td>Empty Space</td><td>尚未使用空间</td><td>5986字节</td><td>用于页结构的填充，没什么实际意义</td></tr><tr><td>File Trailer</td><td>文件尾部</td><td>8字节</td><td>校验页是否完整</td></tr></tbody></table><ol start="17"><li>File Space Header 结构如下：</li></ol><figure><img src="'+_+'" alt="File Space Header结构" tabindex="0" loading="lazy"><figcaption>File Space Header结构</figcaption></figure><table><thead><tr><th>名称</th><th>占用空间大小</th><th>描述</th></tr></thead><tbody><tr><td>Space ID</td><td>4字节</td><td>表空间的 ID</td></tr><tr><td>Not Used</td><td>4字节</td><td>这 4 个字节未被使用，可以忽略</td></tr><tr><td>Size</td><td>4字节</td><td>当前表空间占有的页数</td></tr><tr><td>FREE Limit</td><td>4字节</td><td>尚未被初始化的最小页号，大于或等于这个页号的区对应的 XDES Entry 结构都没有被加入 FREE 链表</td></tr><tr><td>Space Flags</td><td>4字节</td><td>表空间的一些占用存储空间比较小的属性</td></tr><tr><td>FRAG_N_USED</td><td>4字节</td><td>FREE_FRAG 链表中已使用的页数量</td></tr><tr><td>List Base Node for FREE List</td><td>16字节</td><td>FREE 链表的基节点</td></tr><tr><td>List Base Node for FREE_FRAG List</td><td>16字节</td><td>FREE_FREG 链表的基节点</td></tr><tr><td>List Base Node for FULL_FRAG List</td><td>16字节</td><td>FULL_FREG 链表的基节点</td></tr><tr><td>Next Unused Segment ID</td><td>8字节</td><td>当前表空间中下一个未使用的 Segment ID</td></tr><tr><td>List Base Node for SEG_INODES_FULL List</td><td>16字节</td><td>SEG_INODES_FULL 链表的基节点</td></tr><tr><td>List Base Node for SEG_INODES_FREE List</td><td>16字节</td><td>SEG_INODES_FREE 链表的基节点</td></tr></tbody></table><ul><li><p>其中对于 List Base Node for SEG_INODES_FULL List 和 List Base Node for SEG_INODES_FREE List：每个段对应的 INODE Entry 结构会集中存放到一个 <code>类型为 INODE 的页</code> 中，如果表空间中的段特别多，则会有多个 INODE Entry 结构，可能一个页放不下，这些 <code>INODE 类型的页</code> 会组成两种列表：</p><ul><li><p><strong>SEG_INODES_FULL</strong> 链表，该链表中的 INODE 类型的页都已经被 INODE Entry 结构填充满了，没空闲空间存放额外的 INODE Entry 了。</p></li><li><p><strong>SEG_INODES_FREE</strong> 链表，该链表中的 INODE 类型的页都已经仍有空闲空间来存放 INODE Entry 结构。</p></li></ul></li><li><p>对于 FREE LIMIT，主要记录着从哪个页开始，其 XDES Entry 还未加入 FREE 链表。等什么时候空闲链表中的 XDES Entry 结构对应的区不够使了，再把之前没有加入 FREE 链表的空闲区对应的 XDES Entry 结构加入 FREE 链表，中心思想就是什么时候用到什么时候初始化，设计 InnoDB 的大佬采用的就是后者，他们为表空间定义了 FREE Limit 这个字段，在该字段表示的页号之前的区都被初始化了，之后的区尚未被初始化。</p></li><li><p><strong>Next Unused Segment ID</strong>，即字面意思，下一个未使用的段 ID，每个表中每个索引对应着两个段，当创建新索引时，就是创建新的两个段，需要赋予每个段一个 ID，根据该值即可快速获得唯一 ID。</p></li></ul><ol start="18"><li>XDES Entry 就存储在表空间中第一个页（FSP_HDR 类型页）中保存，之所以分散开市因为每个页空间有限。XDES Entry0 对应的就是区 extent0，XDES Entry255 对应的就是 extent255。</li><li>后续 XDES Entry 类型存储在每个组的第一个页（XDES 类型页）中，其结构和 FSP_HDR 非常相似。FSP_HDR 额外存储着表空间的一些属性。</li><li>与 FSP_HDR 类型的页对比，除了少了 File Space Header 部分之外，也就是除了少了记录表空间整体属性的部分之外，其余的部分是一样一样的。</li></ol><figure><img src="'+D+'" alt="XDES类型页结构" tabindex="0" loading="lazy"><figcaption>XDES类型页结构</figcaption></figure><ol start="21"><li>INODE 类型页用于存储 INODE Entry 结构，INODE 类型页结构如下：</li></ol><figure><img src="'+v+'" alt="INODE类型页结构" tabindex="0" loading="lazy"><figcaption>INODE类型页结构</figcaption></figure><table><thead><tr><th>名称</th><th>中文名</th><th>占用空间大小</th><th>简单描述</th></tr></thead><tbody><tr><td>File Header</td><td>文件头部</td><td>38字节</td><td>页的一些通用信息</td></tr><tr><td>List Node for INODE Page List</td><td>通用链表节点</td><td>12字节</td><td>存储上一个 INODE 页和下一个 INODE 页的指针</td></tr><tr><td>INODE Entry</td><td>段描述信息</td><td>16128字节</td><td></td></tr><tr><td>Empty Space</td><td>尚未使用空间</td><td>6字节</td><td>用于页结构的填充，没什么实际意义</td></tr><tr><td>File Trailer</td><td>文件尾部</td><td>8字节</td><td>校验页是否完整</td></tr></tbody></table><ol start="22"><li>List Node for INODE Page List 为存储上一个 INODE 页和下一个 INODE 页的指针，与 File Page Header 中的 List Base Node for SEG_INODES_FULL List 与 List Base Node for SEG_INODES_FREE List 对应。</li><li>在 INDEX 类型页的 Page Header 中有以下两个属性：</li></ol><table><thead><tr><th>名称</th><th>占用空间大小</th><th>描述</th></tr></thead><tbody><tr><td>PAGE_BTR_SEG_LEAF</td><td>10字节</td><td>B+树叶子段的头部信息，仅在 B+树的根页定义</td></tr><tr><td>PAGE_BTR_SEG_TOP</td><td>10字节</td><td>B+树非叶子段的头部信息，仅在 B+树的根页定义</td></tr></tbody></table><p>其对应的是一个名为 SEGMENT HEADER 的结构，其定义如下：</p><figure><img src="'+S+'" alt="SEGMENT HEADER结构" tabindex="0" loading="lazy"><figcaption>SEGMENT HEADER结构</figcaption></figure><table><thead><tr><th>名称</th><th>占用字节数</th><th>描述</th></tr></thead><tbody><tr><td>Space ID of the INODE Entry</td><td>4</td><td>INODE Entry 结构所在的表空间 ID</td></tr><tr><td>Page Number of the INODE Entry</td><td>4</td><td>INODE Entry 结构所在的页页号</td></tr><tr><td>Byte Offset of the INODE Ent</td><td>2</td><td>INODE Entry 结构在该页中的偏移量</td></tr></tbody></table><p>PAGE_BTR_SEG_LEAF 记录着叶子节点段对应的 INODE Entry 结构的地址是哪个表空间的哪个页的哪个偏移量，PAGE_BTR_SEG_TOP 记录着非叶子节点段对应的 INODE Entry 结构的地址是哪个表空间的哪个页的哪个偏移量。这样子索引和其对应的段的关系就建立起来了。不过需要注意的一点是，因为一个索引只对应两个段，所以只需要在索引的根页中记录这两个结构即可。</p><ol start="24"><li>系统表空间和独立表空间结构类似，只不过整个 MySQL 进程只有一个系统表空间，其表空间 ID 为 0，结构如下：</li></ol><figure><img src="'+L+`" alt="系统表空间结构" tabindex="0" loading="lazy"><figcaption>系统表空间结构</figcaption></figure><ol start="25"><li>MySQL 为了更好的管理用户数据而不得已引入的一些额外数据，这些数据也称为元数据。InnoDB 存储引擎特意定义了一些列的内部系统表（internal system table）来记录这些这些元数据:</li></ol><table><thead><tr><th>表名</th><th>描述</th></tr></thead><tbody><tr><td>SYS_TABLES</td><td>整个 InnoDB 存储引擎中所有的表的信息</td></tr><tr><td>SYS_COLUMNS</td><td>整个 InnoDB 存储引擎中所有的列的信息</td></tr><tr><td>SYS_INDEXES</td><td>整个 InnoDB 存储引擎中所有的索引的信息</td></tr></tbody></table><div class="language-markdown line-numbers-mode" data-highlighter="shiki" data-ext="markdown" data-title="markdown" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| SYS_FIELDS          | 整个 InnoDB 存储引擎中所有的索引对应的列的信息 |</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| SYS_FOREIGN         | 整个 InnoDB 存储引擎中所有的外键的信息        |</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| SYS_FOREIGN_COLS    | 整个 InnoDB 存储引擎中所有的外键对应列的信息  |</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| SYS_TABLESPACES     | 整个 InnoDB 存储引擎中所有的表空间信息        |</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| SYS_DATAFILES       | 整个 InnoDB 存储引擎中所有的表空间对应文件系统的文件路径信息 |</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| SYS_VIRTUAL         | 整个 InnoDB 存储引擎中所有的虚拟生成列的信息  |</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">这些系统表也被称为数据字典，它们都是以 B+树的形式保存在系统表空间的某些页中，其中 SYS_TABLES、SYS_COLUMNS、SYS_INDEXES、SYS_FIELDS 这四个表尤其重要，称之为基本系统表（basic system tables）。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">26.</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> SYS_TABLES 表结构如下：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| 列名     | 描述                                         |</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">|----------|----------------------------------------------|</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| NAME     | 表的名称                                     |</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| ID       | InnoDB 存储引擎中每个表都有一个唯一的 ID      |</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| N_COLS   | 该表拥有列的个数                             |</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| TYPE     | 表的类型，记录了一些文件格式、行格式、压缩等信息 |</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| MIX_ID   | 已过时，忽略                                 |</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| MIX_LEN  | 表的一些额外的属性                           |</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| CLUSTER_ID| 未使用，忽略                                |</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| SPACE    | 该表所属表空间的 ID                           |</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">其包含以 NAME 列为主键的聚簇索引以及以 ID 列建立的二级索引。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">27.</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> SYS_COLUMN 表结构如下：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| 列名     | 描述                                             |</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">|----------|--------------------------------------------------|</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| TABLE_ID | 该列所属表对应的 ID                              |</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| POS      | 该列在表中是第几列                              |</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| NAME     | 该列的名称                                      |</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| MTYPE    | main data type，主数据类型，即 INT、CHAR、VARCHAR、FLOAT、DOUBLE 等类型 |</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| PRTYPE   | precise type，精确数据类型，修饰主数据类型的属性，如是否允许 NULL 值、是否允许负数等 |</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| LEN      | 该列最多占用存储空间的字节数                    |</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| PREC     | 该列的精度，通常未使用，默认值为 0               |</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">该表只包含以 (TABLE_ID, POS) 列为主键的聚簇索引。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">28.</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> SYS_INDEX 表结构如下：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| 列名               | 描述                                             |</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">|--------------------|--------------------------------------------------|</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| TABLE_ID           | 该索引所属表对应的 ID                            |</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| ID                 | InnoDB 存储引擎中每个索引都有一个唯一的 ID        |</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| NAME               | 该索引的名称                                    |</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| N_FIELDS           | 该索引包含列的个数                              |</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| TYPE               | 该索引的类型，比如聚簇索引、唯一索引、修改缓冲区的索引、全文索引、普通的二级索引等 |</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| SPACE              | 该索引根页所在的表空间 ID                        |</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| PAGE_NO            | 该索引根页所在的页号                            |</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| MERGE_THRESHOLD     | 如果页中的记录被删除到某个比例，就把该页和相邻页合并，这个值就是这个比例 |</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">该表只包含以 (TABLE_ID, ID) 列为主键的聚簇索引。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">29.</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> SYS_FIELDS 表结构如下：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| 列名       | 描述                                         |</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">|------------|----------------------------------------------|</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| INDEX_ID   | 该索引列所属的索引的 ID                      |</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| POS        | 该索引列在某个索引中是第几列                |</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| COL_NAME   | 该索引列的名称                              |</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">该表只包含以 (INDEX_ID, POS) 列为主键的聚簇索引。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">30.</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 只要有了上述 4 个基本系统表，也就意味着可以获取其他系统表以及用户定义的表的所有元数据。但这 4 个表的元数据就无法通过其他表查询，而是将其存储在数据字典的头部，用一个固定的页来记录这 4 个基本表的聚簇索引和二级索引的位置，即 Data Dictionary Header，结构如下：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">![</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">数据字典头部结构</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span><span style="--shiki-light:#A626A4;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#A626A4;--shiki-light-text-decoration:inherit;--shiki-dark:#C678DD;--shiki-dark-text-decoration:underline;">/assets/images/note/mysql/m-25.png</span><span style="--shiki-light:#A626A4;--shiki-dark:#E06C75;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| 名称                        | 中文名               | 占用空间大小 | 简单描述                                         |</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">|-----------------------------|----------------------|--------------|--------------------------------------------------|</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| File Header                 | 文件头部             | 38字节       | 页的一些通用信息                                 |</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| Data Dictionary Header      | 数据字典头部信息     | 56字节       | 记录一些基本系统表的根页位置以及 InnoDB 存储引擎的一些全局信息 |</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| Segment Header              | 段头部信息           | 10字节       | 记录本页所在段对应的 INODE Entry 位置信息         |</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| Empty Space                 | 尚未使用空间         | 16272字节    | 用于页结构的填充，没什么实际意义                 |</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| File Trailer                | 文件尾部             | 8字节        | 校验页是否完整                                   |</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">其中关于 Data Dictionary Header，</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">-</span><span style="--shiki-light:#986801;--shiki-light-font-weight:bold;--shiki-dark:#D19A66;--shiki-dark-font-weight:inherit;"> **Max Row ID**</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">：当一个表中没有主键和唯一索引时，该表就会生成一个隐藏的值唯一的 row_id 列，其最大值保存在该属性中，且所有拥有该列的表的 row_id 共享该属性。当向这类表中插入一条数据时，该值自增 1，新数据的 row_id 值即为自增后的新值。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">-</span><span style="--shiki-light:#986801;--shiki-light-font-weight:bold;--shiki-dark:#D19A66;--shiki-dark-font-weight:inherit;"> **Max Table ID**</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">：InnoDB 存储引擎中，每当创建一个新表，该值自增 1，新表的值即为自增后的新值。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">-</span><span style="--shiki-light:#986801;--shiki-light-font-weight:bold;--shiki-dark:#D19A66;--shiki-dark-font-weight:inherit;"> **Max Index ID**</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">：索引 ID，同上。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">-</span><span style="--shiki-light:#986801;--shiki-light-font-weight:bold;--shiki-dark:#D19A66;--shiki-dark-font-weight:inherit;"> **Max Space ID**</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">：表空间 ID，同上。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">-</span><span style="--shiki-light:#986801;--shiki-light-font-weight:bold;--shiki-dark:#D19A66;--shiki-dark-font-weight:inherit;"> **Mix ID Low(Unused)**</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">：未使用。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">-</span><span style="--shiki-light:#986801;--shiki-light-font-weight:bold;--shiki-dark:#D19A66;--shiki-dark-font-weight:inherit;"> **Root of SYS_TABLES clust index**</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">：本字段代表 SYS_TABLES 表聚簇索引的根页的页号。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">-</span><span style="--shiki-light:#986801;--shiki-light-font-weight:bold;--shiki-dark:#D19A66;--shiki-dark-font-weight:inherit;"> **Root of SYS_TABLE_IDS sec index**</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">：本字段代表 SYS_TABLES 表为 ID 列建立的二级索引的根页的页号。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">-</span><span style="--shiki-light:#986801;--shiki-light-font-weight:bold;--shiki-dark:#D19A66;--shiki-dark-font-weight:inherit;"> **Root of SYS_INDEXES clust index**</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">：本字段代表 SYS_INDEXES 表聚簇索引的根页的页号。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">-</span><span style="--shiki-light:#986801;--shiki-light-font-weight:bold;--shiki-dark:#D19A66;--shiki-dark-font-weight:inherit;"> **Root of SYS_FIELDS clust index**</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">：本字段代表 SYS_FIELDS 表聚簇索引的根页的页号。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">31.</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 用户是不能直接访问 InnoDB 的这些内部系统表的，除非你直接去解析系统表空间对应文件系统上的文件。不过设计 InnoDB 的大佬考虑到查看这些表的内容可能有助于大家分析问题，所以在系统数据库 information_schema 中提供了一些以 innodb_sys 开头的表：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\`\`\`sql</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">mysql</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> USE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> information_schema;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">Database</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> changed</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">mysql</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> SHOW TABLES </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">LIKE</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;innodb_sys%&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">+</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">--------------------------------------------+</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| Tables_in_information_schema (innodb_sys%) |</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">+</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">--------------------------------------------+</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| INNODB_SYS_DATAFILES                       |</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| INNODB_SYS_VIRTUAL                         |</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| INNODB_SYS_INDEXES                         |</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| INNODB_SYS_TABLES                          |</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| INNODB_SYS_FIELDS                          |</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| INNODB_SYS_TABLESPACES                     |</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| INNODB_SYS_FOREIGN_COLS                    |</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| INNODB_SYS_COLUMNS                         |</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| INNODB_SYS_FOREIGN                         |</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| INNODB_SYS_TABLESTATS                      |</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">+</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">--------------------------------------------+</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> rows</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> in</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">00</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sec)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 information_schema 数据库中的这些以 INNODB_SYS 开头的表并不是真正的内部系统表（内部系统表就是我们上面介绍的以 SYS 开头的那些表），而是在存储引擎启动时读取这些以 SYS 开头的系统表，然后填充到这些以 INNODB_SYS 开头的表中。以 INNODB_SYS 开头的表和以 SYS 开头的表中的字段并不完全一样。</p><ol start="32"><li>总结图</li></ol><figure><img src="`+I+`" alt="InnoDB表空间总结图" tabindex="0" loading="lazy"><figcaption>InnoDB表空间总结图</figcaption></figure><h2 id="第十章-单表的访问方法-🚀" tabindex="-1"><a class="header-anchor" href="#第十章-单表的访问方法-🚀"><span>第十章 单表的访问方法 🚀</span></a></h2><ol><li><p>MySQL执行查询语句的方式称为 <code>访问方法</code> 或 <code>访问方式</code>。</p></li><li><p><strong>const访问方法</strong>：通过主键或 <code>唯一二级索引列</code> 与常数的 <code>等值比较</code> 来定位一条记录，速度如同坐火箭般快速。因此，这种通过主键或唯一二级索引列来定位记录的访问方法被定义为：<strong>const</strong>，意即常数级别，代价可以忽略不计。多列索引需每一列都进行等值比较才能使用 const 访问方法。若列允许 NULL 值，则无法使用 const 访问方法，因为 NULL 值数量不确定且不唯一。</p></li><li><p><strong>ref访问方法</strong>：搜索条件为二级索引列与常数等值比较，采用二级索引来执行查询的访问方法。当二级索引列与常数等值匹配的条数较少，回表操作次数少时，优先使用索引而非全表扫描。二级索引列允许 NULL 值时，可采用 ref 访问方法。对于包含多个列的二级索引，只需最左边的连续索引列都进行常数等值比较，即可使用 ref 访问方法。</p><p>以下可以使用 ref 访问方法：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> single_table </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">WHERE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> key_part1 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;god like&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> single_table </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">WHERE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> key_part1 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;god like&#39;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> AND</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> key_part2 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;legendary&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> single_table </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">WHERE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> key_part1 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;god like&#39;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> AND</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> key_part2 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;legendary&#39;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> AND</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> key_part3 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;penta kill&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下不可以使用：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> single_table </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">WHERE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> key_part1 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;god like&#39;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> AND</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> key_part2 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;legendary&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><strong>ref_or_null访问方法</strong>：不仅想要找出索引列与常数等值的记录，也想找出索引列为 NULL 值的记录。</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> single_demo </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">WHERE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> key1 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;abc&#39;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> OR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> key1 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">IS</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><strong>range访问方法</strong>：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> single_table </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">WHERE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> key2 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">IN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1438</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">6328</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">OR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (key2 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 38</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> AND</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> key2 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 79</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>上述查询语句，索引列 key2 进行范围匹配时的查询使用 range 访问方法。</p></li><li><p><strong>index访问方法</strong>：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> key_part1, key_part2, key_part3 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> single_table </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">WHERE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> key_part2 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;abc&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>上述查询语句中，查询的三个字段恰巧包含在一个多列索引中，且查询条件也被包含在一个多列索引中，此时可直接遍历对应的二级索引，比遍历聚簇索引更为快速。该方法称为 index 访问方法。</p></li><li><p><strong>all访问方法</strong>：全表扫描。</p></li><li><p><strong>索引合并</strong>：一般查询只会使用一个二级索引，当一次查询使用多个二级索引时，该情况称为索引合并。</p></li><li><p><strong>Intersection合并</strong>：将查询条件中的两个二级索引查找到的 ID 值取交集，然后再回表从聚簇索引中查询。</p></li><li><p>可能会使用 Intersection 合并的情况：</p><ul><li>二级索引列是等值匹配的情况，对于联合索引来说，在联合索引中的每个列都必须等值匹配，不能出现只匹配部分列的情况。</li><li>主键列可以是范围匹配。</li></ul><p>之所以在二级索引列都是等值匹配的情况下才可能使用 Intersection 索引合并，是因为只有在这种情况下，根据二级索引查询出的结果集是按照主键值排序的。Intersection 索引合并会把从多个二级索引中查询出的主键值求交集，如果从各个二级索引中查询得到的结果集本身已经按照主键排好序，那么求交集的过程就会变得轻松。优化器只有在单独根据搜索条件从某个二级索引中获取的记录数太多，导致回表开销过大，而通过 Intersection 索引合并后需要回表的记录数大幅减少时，才会使用 Intersection 索引合并。</p></li><li><p><strong>Intersection</strong> 是交集的意思，适用于使用不同索引的搜索条件之间使用 AND 连接的情况；<strong>Union</strong> 是并集的意思，适用于使用不同索引的搜索条件之间使用 OR 连接的情况。</p></li><li><p>可能会使用 Union 合并的情况：</p><ul><li>二级索引是等值匹配的情况，若是联合索引则联合索引中所有字段都是等值匹配的情况。</li><li>主键列可以是范围匹配。</li><li>满足使用 Interaction 合并的情况：即在一条 SQL 查询语句中，使用部分搜索条件用于 Interaction 合并得到主键集合，然后再用剩下的搜索条件使用 Union 合并获取主键集合。</li></ul></li><li><p><strong>Sort Union合并</strong>：Union 合并要求二级索引时等值匹配的情况，例如下列语句不是等值匹配就不能使用 Union 合并：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> single_table </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">WHERE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> key1 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;a&#39;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> OR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> key3 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;z&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Sort Union 是先根据 key1 &lt; &#39;a&#39; 从二级索引中获取主键记录进行排序，再根据 key3 &gt; &#39;z&#39; 从二级索引中获取主键记录进行排序，两个主键记录排序后再进行 Union 合并。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>之所以存在 Sort Union 合并，也仅是因为从二级索引中匹配到的记录较少，此时添加一个排序操作也不费时，才会使用 Sort Union 合并。</p><p>之所以没有 Sort Interaction 合并，是因为 Interaction 合并原理是从二级索引中获取的记录过多，才取交集减少二级索引匹配记录数，若还要增加排序操作，则与设计初衷相违背。</p></div></li><li><p>可以通过联合索引的方式避免索引合并，例如：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> single_table </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">WHERE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> key1 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;a&#39;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> AND</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> key3 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;b&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>其之所以触发索引合并，是因为 key1 和 key3 是两棵单独的 B+ 树，可以直接将其创建为联合索引，避免索引合并。</p></li></ol>`,87)]))}const O=s(f,[["render",N],["__file","mysql.html.vue"]]),q=JSON.parse(`{"path":"/note/mysql.html","title":"《MySQL是怎样运行的：从根上理解MySQL》","lang":"zh-CN","frontmatter":{"title":"《MySQL是怎样运行的：从根上理解MySQL》","category":["学习笔记"],"tag":["MySQL"],"description":"感谢原书作者 感谢原书作者的总结，原书地址：原书地址 免费分享出来的Github Page：Github Page 有机会还是付费支持一下原作者，此处仅总结个人学习到的知识点，不展开说明。 第一章 重新认识MYSQL MySQL是C/S架构的，默认使用TCP协议通信。 mysqld是服务端程序，可用于直接启动一个mysqld进程。 mysqld_saf...","head":[["meta",{"property":"og:url","content":"https://jayczee.cn/note/mysql.html"}],["meta",{"property":"og:site_name","content":"Jayczee's Blog"}],["meta",{"property":"og:title","content":"《MySQL是怎样运行的：从根上理解MySQL》"}],["meta",{"property":"og:description","content":"感谢原书作者 感谢原书作者的总结，原书地址：原书地址 免费分享出来的Github Page：Github Page 有机会还是付费支持一下原作者，此处仅总结个人学习到的知识点，不展开说明。 第一章 重新认识MYSQL MySQL是C/S架构的，默认使用TCP协议通信。 mysqld是服务端程序，可用于直接启动一个mysqld进程。 mysqld_saf..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://jayczee.cn/assets/images/note/mysql/m-1.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-25T07:03:08.000Z"}],["meta",{"property":"article:tag","content":"MySQL"}],["meta",{"property":"article:modified_time","content":"2025-02-25T07:03:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"《MySQL是怎样运行的：从根上理解MySQL》\\",\\"image\\":[\\"https://jayczee.cn/assets/images/note/mysql/m-1.png\\",\\"https://jayczee.cn/assets/images/note/mysql/m-2.png\\",\\"https://jayczee.cn/assets/images/note/mysql/m-3.png\\",\\"https://jayczee.cn/assets/images/note/mysql/m-4.png\\",\\"https://jayczee.cn/assets/images/note/mysql/m-5.png\\",\\"https://jayczee.cn/assets/images/note/mysql/m-6.png\\",\\"https://jayczee.cn/assets/images/note/mysql/m-7.png\\",\\"https://jayczee.cn/assets/images/note/mysql/m-8.png\\",\\"https://jayczee.cn/assets/images/note/mysql/m-9.png\\",\\"https://jayczee.cn/assets/images/note/mysql/m-10.png\\",\\"https://jayczee.cn/assets/images/note/mysql/m-11.png\\",\\"https://jayczee.cn/assets/images/note/mysql/m-12.png\\",\\"https://jayczee.cn/assets/images/note/mysql/m-14.png\\",\\"https://jayczee.cn/assets/images/note/mysql/m-15.png\\",\\"https://jayczee.cn/assets/images/note/mysql/m-16.png\\",\\"https://jayczee.cn/assets/images/note/mysql/m-17.png\\",\\"https://jayczee.cn/assets/images/note/mysql/m-18.png\\",\\"https://jayczee.cn/assets/images/note/mysql/m-19.png\\",\\"https://jayczee.cn/assets/images/note/mysql/m-20.png\\",\\"https://jayczee.cn/assets/images/note/mysql/m-21.png\\",\\"https://jayczee.cn/assets/images/note/mysql/m-22.png\\",\\"https://jayczee.cn/assets/images/note/mysql/m-23.png\\",\\"https://jayczee.cn/assets/images/note/mysql/m-24.png\\",\\"https://jayczee.cn/assets/images/note/mysql/m-25.png\\",\\"https://jayczee.cn/assets/images/note/mysql/m-26.png\\"],\\"dateModified\\":\\"2025-02-25T07:03:08.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jayczee\\",\\"url\\":\\"https://jayczee.cn\\"}]}"]]},"headers":[{"level":2,"title":"感谢原书作者","slug":"感谢原书作者","link":"#感谢原书作者","children":[]},{"level":2,"title":"第一章 重新认识MYSQL","slug":"第一章-重新认识mysql","link":"#第一章-重新认识mysql","children":[]},{"level":2,"title":"第二章 启动选项和系统变量","slug":"第二章-启动选项和系统变量","link":"#第二章-启动选项和系统变量","children":[]},{"level":2,"title":"第三章 字符集和比较规则","slug":"第三章-字符集和比较规则","link":"#第三章-字符集和比较规则","children":[]},{"level":2,"title":"第四章 InnoDB记录结构","slug":"第四章-innodb记录结构","link":"#第四章-innodb记录结构","children":[]},{"level":2,"title":"第五章 InnoDB数据页结构","slug":"第五章-innodb数据页结构","link":"#第五章-innodb数据页结构","children":[]},{"level":2,"title":"第六章 B+树索引","slug":"第六章-b-树索引","link":"#第六章-b-树索引","children":[]},{"level":2,"title":"第七章 B+树索引的使用","slug":"第七章-b-树索引的使用","link":"#第七章-b-树索引的使用","children":[]},{"level":2,"title":"第八章 MySQL的数据目录","slug":"第八章-mysql的数据目录","link":"#第八章-mysql的数据目录","children":[]},{"level":2,"title":"第九章 InnoDB的表空间","slug":"第九章-innodb的表空间","link":"#第九章-innodb的表空间","children":[]},{"level":2,"title":"第十章 单表的访问方法 🚀","slug":"第十章-单表的访问方法-🚀","link":"#第十章-单表的访问方法-🚀","children":[]}],"git":{"createdTime":1739009296000,"updatedTime":1740466988000,"contributors":[{"name":"Jayczee","username":"Jayczee","email":"jayczee@yeah.net","commits":6,"url":"https://github.com/Jayczee"}]},"readingTime":{"minutes":49.2,"words":14759},"filePathRelative":"note/mysql.md","localizedDate":"2025年2月8日","excerpt":"<h2>感谢原书作者</h2>\\n<p>感谢原书作者的总结，原书地址：<a href=\\"https://juejin.cn/book/6844733769996304392\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">原书地址</a></p>\\n<p>免费分享出来的Github Page：<a href=\\"https://relph1119.github.io/mysql-learning-notes/#/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Github Page</a></p>\\n<p>有机会还是付费支持一下原作者，此处仅总结个人学习到的知识点，不展开说明。</p>","autoDesc":true}`);export{O as comp,q as data};
