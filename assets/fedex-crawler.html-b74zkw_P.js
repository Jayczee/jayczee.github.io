import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as l,o as p}from"./app-DhzwfMOa.js";const e={};function o(t,s){return p(),a("div",null,s[0]||(s[0]=[l(`<h2 id="📂-项目地址" tabindex="-1"><a class="header-anchor" href="#📂-项目地址"><span>📂 项目地址</span></a></h2><p><a href="https://github.com/Jayczee/fedex_tracking_bot" target="_blank" rel="noopener noreferrer">[Github]Fedex Tracking Bot</a></p><h2 id="📚-背景" tabindex="-1"><a class="header-anchor" href="#📚-背景"><span>📚 背景</span></a></h2><p>在最近的工作中，运营部门要求确认一些 FedEx 物流单号的状态。虽然自己在过去的工作中主要专注于 CRUD 操作，并没有深入了解物流相关的内容，但这次的任务激发了对这一领域的浓厚兴趣。为了满足需求，经过一番摸索和实践，成功实现了一个简单的爬虫，收获颇丰，感到非常兴奋，也希望能与大家分享经验并寻求指导。</p><h2 id="🎯-需求" tabindex="-1"><a class="header-anchor" href="#🎯-需求"><span>🎯 需求</span></a></h2><p>本次任务的目标是对 <strong>8000</strong> 个左右的 FedEx 物流单号进行状态爬取，明确判断其状态是 <strong>Label Created</strong> 还是 <strong>Delivered</strong>。这一过程涉及到对 FedEx 物流系统的深入了解，尤其是在状态查询的实现上。</p><h2 id="🛠️-尝试方案记录" tabindex="-1"><a class="header-anchor" href="#🛠️-尝试方案记录"><span>🛠️ 尝试方案记录</span></a></h2><h3 id="_1-使用官方-api" tabindex="-1"><a class="header-anchor" href="#_1-使用官方-api"><span>1. 使用官方 API</span></a></h3><ul><li><strong>结果</strong>：略过</li><li><strong>原因</strong>：由于自己负责的项目并未对接过 FedEx，因此需要现学，容易在过程中遇到各种问题。不过，可以参考公司其他项目的配置作为备选方案。</li></ul><h3 id="_2-直接调用-fedex-查询接口" tabindex="-1"><a class="header-anchor" href="#_2-直接调用-fedex-查询接口"><span>2. 直接调用 FedEx 查询接口</span></a></h3><ul><li><strong>结果</strong>：失败</li><li><strong>原因</strong>：尝试直接调用 <code>https://api.fedex.com.cn/track/v2/shipments</code> 接口，发现返回了 403 错误。即便添加了 Cookie 和 User-Agent 等必要参数，依然无法成功获取数据。</li></ul><h3 id="_3-jsoup-获取页面信息" tabindex="-1"><a class="header-anchor" href="#_3-jsoup-获取页面信息"><span>3. Jsoup 获取页面信息</span></a></h3><ul><li><strong>结果</strong>：失败</li><li><strong>原因</strong>：通过分析发现，物流查询页面为动态加载的页面，使用 Jsoup 获取的 HTML 仅为初始页面，无法获得实际的物流信息。</li></ul><h3 id="_4-使用-selenium" tabindex="-1"><a class="header-anchor" href="#_4-使用-selenium"><span>4. 使用 Selenium</span></a></h3><ul><li><strong>结果</strong>：成功</li><li><strong>原因</strong>：考虑到页面是动态加载的，决定使用 Selenium 库。Selenium 能够模拟真实用户在浏览器中的操作，访问页面并等待 JavaScript 渲染数据。虽然原本计划使用 Java 实现，但由于网上大部分文档和案例都是用 Python 编写，因此最终选择 Python 完成代码编写，便于快速实施。</li></ul><h2 id="📊-物流状态信息分析" tabindex="-1"><a class="header-anchor" href="#📊-物流状态信息分析"><span>📊 物流状态信息分析</span></a></h2><p>通过对页面的深入分析，发现物流状态相关的 HTML 结构是有规律可循的：</p><ul><li><strong>加粗黑体字部分</strong>（如“寄件人”、“我们收到了您的包裹”、“外出递送”、“已送达”）使用 <code>class=&quot;shipment-status-progress-step-label&quot;</code> 的 <code>&lt;span&gt;</code> 标签进行展示。</li><li><strong>斜体小字部分</strong>（如“标签已创建”、“已送达”）则使用 <code>class=&quot;shipment-status-progress-step-label-info&quot;</code> 的 <code>&lt;span&gt;</code> 标签。</li></ul><figure><img src="https://blog-1302595532.cos.ap-shanghai.myqcloud.com/blog/fedex-tracking-bot-1.png" alt="Fedex物流信息截图" tabindex="0" loading="lazy"><figcaption>Fedex物流信息截图</figcaption></figure><h3 id="🔍-基本逻辑" tabindex="-1"><a class="header-anchor" href="#🔍-基本逻辑"><span>🔍 基本逻辑</span></a></h3><p>基于以上分析，爬取物流状态的基本逻辑如下：</p><ol><li>使用 Selenium 访问指定的 URL，并将单号部分替换为待查询的单号。</li><li>等待页面加载完成，确保上述 class 的元素出现在 HTML 中。</li><li>定位到 <code>shipment-status-progress-step active</code> 下的状态信息，并获取其值。</li></ol><h2 id="⚠️-遇到的问题及解决方案" tabindex="-1"><a class="header-anchor" href="#⚠️-遇到的问题及解决方案"><span>⚠️ 遇到的问题及解决方案</span></a></h2><h3 id="_1-页面提示-under-construction" tabindex="-1"><a class="header-anchor" href="#_1-页面提示-under-construction"><span>1. 页面提示 “Under Construction”</span></a></h3><div class="hint-container warning"><p class="hint-container-title">注意</p><p>在某些情况下，FedEx 页面会提示“Under Construction”，导致无法获取信息。为了解决这一问题，建议在代码中加入重试机制，以便在遇到此类问题时能够自动重试。</p></div><h3 id="_2-爬取速度慢" tabindex="-1"><a class="header-anchor" href="#_2-爬取速度慢"><span>2. 爬取速度慢</span></a></h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>由于每个单号的查询需要大约 10 秒钟，整体爬取速度较慢。为此，可以考虑使用多线程技术，开启多个窗口同时进行爬取。不过需要注意的是，多开 Chrome 浏览器会消耗大量内存，建议合理设置线程数量。</p></div><h3 id="_3-内存泄漏" tabindex="-1"><a class="header-anchor" href="#_3-内存泄漏"><span>3. 内存泄漏</span></a></h3><p>在初次实现时，爬取到的数据会暂存到内存中，等爬取完成后再一次性写入 Excel 文件。结果在爬取到 1000 个单号时，内存占用过高导致电脑崩溃。经过反复测试，最终决定将数据在爬取过程中直接写入文件，并加锁以避免并发问题。</p><h3 id="_4-访问频率过高被屏蔽" tabindex="-1"><a class="header-anchor" href="#_4-访问频率过高被屏蔽"><span>4. 访问频率过高被屏蔽</span></a></h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>在进行大量查询时，频繁访问会导致被 FedEx 屏蔽。为了解决这个问题，可以使用代理池，通过实际测试发现，当查询次数超过 100 次时，便会被暂时禁止访问。可以考虑使用自己的代理节点，借助工具将其转为代理池，以均匀分配访问请求。</p></div><h2 id="📝-结论" tabindex="-1"><a class="header-anchor" href="#📝-结论"><span>📝 结论</span></a></h2><p>通过此次实践，成功实现了对 FedEx 物流单号状态的爬取，积累了宝贵的经验和教训。尽管在过程中遇到了一些挑战，但最终都一一克服。希望能与各位前辈分享经验，欢迎进行指导和讨论。</p><h2 id="📚-参考资源" tabindex="-1"><a class="header-anchor" href="#📚-参考资源"><span>📚 参考资源</span></a></h2><ul><li><a href="https://github.com/Rain-kl/glider_guid" target="_blank" rel="noopener noreferrer">Glider Guide</a> - 该工具可以将自己的代理节点转为代理池，帮助更好地管理请求。</li></ul><h2 id="📷-效果图" tabindex="-1"><a class="header-anchor" href="#📷-效果图"><span>📷 效果图</span></a></h2><figure><img src="https://blog-1302595532.cos.ap-shanghai.myqcloud.com/blog/fedex-tracking-bot-2.png" alt="爬取结果" tabindex="0" loading="lazy"><figcaption>爬取结果</figcaption></figure><h2 id="💻-最终代码" tabindex="-1"><a class="header-anchor" href="#💻-最终代码"><span>💻 最终代码</span></a></h2><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> pandas </span><span style="color:#C586C0;">as</span><span style="color:#D4D4D4;"> pd</span></span>
<span class="line"><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> bs4 </span><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> BeautifulSoup</span></span>
<span class="line"><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> selenium </span><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> webdriver</span></span>
<span class="line"><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> selenium.webdriver.chrome.service </span><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> Service</span></span>
<span class="line"><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> selenium.webdriver.common.by </span><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> By</span></span>
<span class="line"><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> selenium.webdriver.support.ui </span><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> WebDriverWait</span></span>
<span class="line"><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> selenium.webdriver.support </span><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> expected_conditions </span><span style="color:#C586C0;">as</span><span style="color:#D4D4D4;"> EC</span></span>
<span class="line"><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> selenium.webdriver.chrome.options </span><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> Options</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> time</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> concurrent.futures</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> logging</span></span>
<span class="line"><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> datetime </span><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> datetime</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> threading</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> os</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;"># 设置日志配置</span></span>
<span class="line"><span style="color:#D4D4D4;">logging.basicConfig(</span><span style="color:#9CDCFE;">level</span><span style="color:#D4D4D4;">=logging.INFO, </span><span style="color:#9CDCFE;">format</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&#39;</span><span style="color:#569CD6;">%(asctime)s</span><span style="color:#CE9178;"> - </span><span style="color:#569CD6;">%(levelname)s</span><span style="color:#CE9178;"> - </span><span style="color:#569CD6;">%(message)s</span><span style="color:#CE9178;">&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">logger = logging.getLogger()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;"># 读取 input.xlsx 中的所有数据</span></span>
<span class="line"><span style="color:#D4D4D4;">df = pd.read_excel(</span><span style="color:#CE9178;">&#39;input.xlsx&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;"># 获取已爬取的单号</span></span>
<span class="line"><span style="color:#D4D4D4;">processed_numbers = </span><span style="color:#4EC9B0;">set</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> file </span><span style="color:#C586C0;">in</span><span style="color:#D4D4D4;"> os.listdir(</span><span style="color:#CE9178;">&#39;.&#39;</span><span style="color:#D4D4D4;">):</span></span>
<span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> file.startswith(</span><span style="color:#CE9178;">&#39;tracking_results&#39;</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">and</span><span style="color:#D4D4D4;"> file.endswith(</span><span style="color:#CE9178;">&#39;.xlsx&#39;</span><span style="color:#D4D4D4;">):</span></span>
<span class="line"><span style="color:#D4D4D4;">        logger.info(</span><span style="color:#569CD6;">f</span><span style="color:#CE9178;">&quot;文件名：</span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">file.split(</span><span style="color:#CE9178;">&#39;.&#39;</span><span style="color:#D4D4D4;">)[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">]</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">        processed_df = pd.read_excel(file)</span></span>
<span class="line"><span style="color:#D4D4D4;">        existed_list = processed_df[</span><span style="color:#CE9178;">&#39;tracking&#39;</span><span style="color:#D4D4D4;">].tolist()</span></span>
<span class="line"><span style="color:#D4D4D4;">        logger.info(</span><span style="color:#569CD6;">f</span><span style="color:#CE9178;">&quot;存在已爬取单号</span><span style="color:#569CD6;">{</span><span style="color:#DCDCAA;">len</span><span style="color:#D4D4D4;">(existed_list)</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">个&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">        logger.info(</span><span style="color:#569CD6;">f</span><span style="color:#CE9178;">&quot;添加前已存在</span><span style="color:#569CD6;">{</span><span style="color:#DCDCAA;">len</span><span style="color:#D4D4D4;">(processed_numbers)</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">个&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">        processed_numbers.update(existed_list)</span></span>
<span class="line"><span style="color:#D4D4D4;">        logger.info(</span><span style="color:#569CD6;">f</span><span style="color:#CE9178;">&quot;添加后已存在</span><span style="color:#569CD6;">{</span><span style="color:#DCDCAA;">len</span><span style="color:#D4D4D4;">(processed_numbers)</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">个&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;"># 将未爬取的 ref_number 列的数据存入 list_ 中</span></span>
<span class="line"><span style="color:#D4D4D4;">list_ = [num </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> num </span><span style="color:#C586C0;">in</span><span style="color:#D4D4D4;"> df[</span><span style="color:#CE9178;">&#39;ref_number&#39;</span><span style="color:#D4D4D4;">].tolist() </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> num </span><span style="color:#569CD6;">not</span><span style="color:#569CD6;"> in</span><span style="color:#D4D4D4;"> processed_numbers]</span></span>
<span class="line"><span style="color:#D4D4D4;">total_count = </span><span style="color:#DCDCAA;">len</span><span style="color:#D4D4D4;">(list_)  </span><span style="color:#6A9955;"># 总数量</span></span>
<span class="line"><span style="color:#D4D4D4;">logger.info(</span><span style="color:#569CD6;">f</span><span style="color:#CE9178;">&quot;需要爬取的总数量: </span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">total_count</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;"># 设置 ChromeOptions</span></span>
<span class="line"><span style="color:#D4D4D4;">chrome_options = Options()</span></span>
<span class="line"><span style="color:#D4D4D4;">chrome_options.add_argument(</span><span style="color:#CE9178;">&#39;--proxy-server=socks5://127.0.0.1:8443&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">chrome_options.add_argument(</span><span style="color:#CE9178;">&#39;--disable-gpu&#39;</span><span style="color:#D4D4D4;">)  </span><span style="color:#6A9955;"># 禁用 GPU 加速</span></span>
<span class="line"><span style="color:#D4D4D4;">chrome_options.add_argument(</span><span style="color:#CE9178;">&#39;--no-sandbox&#39;</span><span style="color:#D4D4D4;">)  </span><span style="color:#6A9955;"># 解决 DevToolsActivePort 文件不存在的错误</span></span>
<span class="line"><span style="color:#D4D4D4;">chrome_options.add_argument(</span><span style="color:#CE9178;">&#39;--disable-dev-shm-usage&#39;</span><span style="color:#D4D4D4;">)  </span><span style="color:#6A9955;"># 共享内存不足的问题</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;"># 创建锁</span></span>
<span class="line"><span style="color:#D4D4D4;">lock = threading.Lock()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;"># 找到下一个 tracking_resultsN.xlsx 文件名</span></span>
<span class="line"><span style="color:#D4D4D4;">file_index = </span><span style="color:#B5CEA8;">1</span></span>
<span class="line"><span style="color:#C586C0;">while</span><span style="color:#D4D4D4;"> os.path.exists(</span><span style="color:#569CD6;">f</span><span style="color:#CE9178;">&#39;tracking_results</span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">file_index</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">.xlsx&#39;</span><span style="color:#D4D4D4;">):</span></span>
<span class="line"><span style="color:#D4D4D4;">    file_index += </span><span style="color:#B5CEA8;">1</span></span>
<span class="line"><span style="color:#D4D4D4;">output_file = </span><span style="color:#569CD6;">f</span><span style="color:#CE9178;">&#39;tracking_results</span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">file_index</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">.xlsx&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;"># 定义一个函数来处理每个单号</span></span>
<span class="line"><span style="color:#569CD6;">def</span><span style="color:#DCDCAA;"> fetch_tracking_info</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">num</span><span style="color:#D4D4D4;">):</span></span>
<span class="line"><span style="color:#D4D4D4;">    driver = </span><span style="color:#569CD6;">None</span></span>
<span class="line"><span style="color:#D4D4D4;">    retries = </span><span style="color:#B5CEA8;">3</span><span style="color:#6A9955;">  # 设置重试次数</span></span>
<span class="line"><span style="color:#C586C0;">    for</span><span style="color:#D4D4D4;"> attempt </span><span style="color:#C586C0;">in</span><span style="color:#DCDCAA;"> range</span><span style="color:#D4D4D4;">(retries):</span></span>
<span class="line"><span style="color:#C586C0;">        try</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">            logger.info(</span><span style="color:#569CD6;">f</span><span style="color:#CE9178;">&quot;开始处理单号: </span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">num</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">, 尝试次数: </span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">attempt + </span><span style="color:#B5CEA8;">1</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">            driver = webdriver.Chrome(</span><span style="color:#9CDCFE;">service</span><span style="color:#D4D4D4;">=Service(</span><span style="color:#CE9178;">&#39;./chromedriver.exe&#39;</span><span style="color:#D4D4D4;">), </span><span style="color:#9CDCFE;">options</span><span style="color:#D4D4D4;">=chrome_options)</span></span>
<span class="line"><span style="color:#D4D4D4;">            driver.execute_cdp_cmd(</span><span style="color:#CE9178;">&quot;Page.addScriptToEvaluateOnNewDocument&quot;</span><span style="color:#D4D4D4;">, {</span></span>
<span class="line"><span style="color:#CE9178;">                &quot;source&quot;</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#CE9178;">                Object.defineProperty(navigator, &#39;webdriver&#39;, {</span></span>
<span class="line"><span style="color:#CE9178;">                  get: () =&gt; undefined</span></span>
<span class="line"><span style="color:#CE9178;">                })</span></span>
<span class="line"><span style="color:#CE9178;">              &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">            })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">            driver.get(</span><span style="color:#569CD6;">f</span><span style="color:#CE9178;">&quot;https://www.fedex.com.cn/fedextrack/?trknbr=</span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">num</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">            # 等待 shipment-status-progress-step-label 出现并且有值</span></span>
<span class="line"><span style="color:#C586C0;">            try</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">                WebDriverWait(driver, </span><span style="color:#B5CEA8;">15</span><span style="color:#D4D4D4;">).until(</span></span>
<span class="line"><span style="color:#D4D4D4;">                    EC.presence_of_element_located((By.CLASS_NAME, </span><span style="color:#CE9178;">&#39;shipment-status-progress-step-label-info&#39;</span><span style="color:#D4D4D4;">))</span></span>
<span class="line"><span style="color:#D4D4D4;">                )</span></span>
<span class="line"><span style="color:#D4D4D4;">                time.sleep(</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">)  </span><span style="color:#6A9955;"># 确保页面加载完成</span></span>
<span class="line"><span style="color:#D4D4D4;">                x = driver.page_source</span></span>
<span class="line"><span style="color:#D4D4D4;">                html = BeautifulSoup(x, </span><span style="color:#CE9178;">&quot;html.parser&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">                active_step = html.find(</span><span style="color:#CE9178;">&#39;div&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">class_</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&#39;shipment-status-progress-step active&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">                label_value = </span><span style="color:#569CD6;">None</span></span>
<span class="line"><span style="color:#C586C0;">                if</span><span style="color:#D4D4D4;"> active_step:</span></span>
<span class="line"><span style="color:#D4D4D4;">                    label_span = active_step.find(</span><span style="color:#CE9178;">&#39;span&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">class_</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&#39;shipment-status-progress-step-label-info&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#C586C0;">                    if</span><span style="color:#D4D4D4;"> label_span </span><span style="color:#569CD6;">and</span><span style="color:#D4D4D4;"> label_span.get_text(</span><span style="color:#9CDCFE;">strip</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">True</span><span style="color:#D4D4D4;">):</span></span>
<span class="line"><span style="color:#D4D4D4;">                        label_value = label_span.get_text(</span><span style="color:#9CDCFE;">strip</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">True</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">                if</span><span style="color:#D4D4D4;"> label_value:</span></span>
<span class="line"><span style="color:#D4D4D4;">                    logger.info(</span><span style="color:#569CD6;">f</span><span style="color:#CE9178;">&quot;完成处理单号: </span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">num</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">, 状态: </span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">label_value</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#6A9955;">                    # 使用锁来确保线程安全写入Excel文件</span></span>
<span class="line"><span style="color:#C586C0;">                    with</span><span style="color:#D4D4D4;"> lock:</span></span>
<span class="line"><span style="color:#C586C0;">                        if</span><span style="color:#D4D4D4;"> os.path.exists(output_file):</span></span>
<span class="line"><span style="color:#D4D4D4;">                            existing_df = pd.read_excel(output_file)</span></span>
<span class="line"><span style="color:#D4D4D4;">                            new_df = pd.DataFrame([[num, label_value]], </span><span style="color:#9CDCFE;">columns</span><span style="color:#D4D4D4;">=[</span><span style="color:#CE9178;">&#39;tracking&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;label_value&#39;</span><span style="color:#D4D4D4;">], </span><span style="color:#9CDCFE;">dtype</span><span style="color:#D4D4D4;">=</span><span style="color:#4EC9B0;">str</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">                            result_df = pd.concat([existing_df, new_df], </span><span style="color:#9CDCFE;">ignore_index</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">True</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#C586C0;">                        else</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">                            result_df = pd.DataFrame([[num, label_value]], </span><span style="color:#9CDCFE;">columns</span><span style="color:#D4D4D4;">=[</span><span style="color:#CE9178;">&#39;tracking&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;label_value&#39;</span><span style="color:#D4D4D4;">], </span><span style="color:#9CDCFE;">dtype</span><span style="color:#D4D4D4;">=</span><span style="color:#4EC9B0;">str</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">                        result_df.to_excel(output_file, </span><span style="color:#9CDCFE;">index</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">False</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#C586C0;">                    return</span><span style="color:#D4D4D4;"> num, label_value</span></span>
<span class="line"><span style="color:#C586C0;">                else</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#C586C0;">                    raise</span><span style="color:#4EC9B0;"> Exception</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;状态标签没有值&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#C586C0;">            except</span><span style="color:#4EC9B0;"> Exception</span><span style="color:#C586C0;"> as</span><span style="color:#D4D4D4;"> e:</span></span>
<span class="line"><span style="color:#D4D4D4;">                logger.warning(</span><span style="color:#569CD6;">f</span><span style="color:#CE9178;">&quot;单号 </span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">num</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;"> 状态标签未找到或无值&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#C586C0;">                if</span><span style="color:#D4D4D4;"> attempt &lt; retries - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">                    logger.info(</span><span style="color:#569CD6;">f</span><span style="color:#CE9178;">&quot;重试单号: </span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">num</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">, 尝试次数: </span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">attempt + </span><span style="color:#B5CEA8;">2</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#C586C0;">                else</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">                    logger.error(</span><span style="color:#569CD6;">f</span><span style="color:#CE9178;">&quot;单号 </span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">num</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;"> 处理失败，已达到最大重试次数&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#C586C0;">                continue</span><span style="color:#6A9955;">  # 继续重试</span></span>
<span class="line"><span style="color:#C586C0;">        except</span><span style="color:#4EC9B0;"> Exception</span><span style="color:#C586C0;"> as</span><span style="color:#D4D4D4;"> e:</span></span>
<span class="line"><span style="color:#D4D4D4;">            logger.error(</span><span style="color:#569CD6;">f</span><span style="color:#CE9178;">&quot;处理单号 </span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">num</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;"> 时发生错误: </span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">e</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#C586C0;">        finally</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#C586C0;">            if</span><span style="color:#D4D4D4;"> driver:</span></span>
<span class="line"><span style="color:#D4D4D4;">                driver.quit()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">    # 在达到最大重试次数后，记录失败的结果</span></span>
<span class="line"><span style="color:#C586C0;">    with</span><span style="color:#D4D4D4;"> lock:</span></span>
<span class="line"><span style="color:#C586C0;">        if</span><span style="color:#D4D4D4;"> os.path.exists(output_file):</span></span>
<span class="line"><span style="color:#D4D4D4;">            existing_df = pd.read_excel(output_file)   </span></span>
<span class="line"><span style="color:#D4D4D4;">            new_df = pd.DataFrame([[num, </span><span style="color:#CE9178;">&#39;Unknown&#39;</span><span style="color:#D4D4D4;">]], </span><span style="color:#9CDCFE;">columns</span><span style="color:#D4D4D4;">=[</span><span style="color:#CE9178;">&#39;tracking&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;label_value&#39;</span><span style="color:#D4D4D4;">], </span><span style="color:#9CDCFE;">dtype</span><span style="color:#D4D4D4;">=</span><span style="color:#4EC9B0;">str</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">            result_df = pd.concat([existing_df, new_df], </span><span style="color:#9CDCFE;">ignore_index</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">True</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#C586C0;">        else</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">            result_df = pd.DataFrame([[num, </span><span style="color:#CE9178;">&#39;Unknown&#39;</span><span style="color:#D4D4D4;">]], </span><span style="color:#9CDCFE;">columns</span><span style="color:#D4D4D4;">=[</span><span style="color:#CE9178;">&#39;tracking&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;label_value&#39;</span><span style="color:#D4D4D4;">], </span><span style="color:#9CDCFE;">dtype</span><span style="color:#D4D4D4;">=</span><span style="color:#4EC9B0;">str</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">        result_df.to_excel(output_file, </span><span style="color:#9CDCFE;">index</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">False</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#D4D4D4;"> num, </span><span style="color:#569CD6;">None</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;"># 记录开始时间</span></span>
<span class="line"><span style="color:#D4D4D4;">start_time = datetime.now()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;"># 使用 ThreadPoolExecutor 来并行处理</span></span>
<span class="line"><span style="color:#C586C0;">with</span><span style="color:#D4D4D4;"> concurrent.futures.ThreadPoolExecutor(</span><span style="color:#9CDCFE;">max_workers</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">15</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">as</span><span style="color:#D4D4D4;"> executor:</span></span>
<span class="line"><span style="color:#D4D4D4;">    future_to_num = {executor.submit(fetch_tracking_info, num): num </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> num </span><span style="color:#C586C0;">in</span><span style="color:#D4D4D4;"> list_}</span></span>
<span class="line"><span style="color:#C586C0;">    for</span><span style="color:#D4D4D4;"> future </span><span style="color:#C586C0;">in</span><span style="color:#D4D4D4;"> concurrent.futures.as_completed(future_to_num):</span></span>
<span class="line"><span style="color:#D4D4D4;">        tracking_num, label_value = future.result()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;"># 记录结束时间</span></span>
<span class="line"><span style="color:#D4D4D4;">end_time = datetime.now()</span></span>
<span class="line"><span style="color:#6A9955;"># 计算运行时长</span></span>
<span class="line"><span style="color:#D4D4D4;">duration = end_time - start_time</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;"># 输出运行时长</span></span>
<span class="line"><span style="color:#D4D4D4;">hours, remainder = </span><span style="color:#DCDCAA;">divmod</span><span style="color:#D4D4D4;">(duration.total_seconds(), </span><span style="color:#B5CEA8;">3600</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">minutes, seconds = </span><span style="color:#DCDCAA;">divmod</span><span style="color:#D4D4D4;">(remainder, </span><span style="color:#B5CEA8;">60</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">logger.info(</span><span style="color:#569CD6;">f</span><span style="color:#CE9178;">&quot;程序运行时间: </span><span style="color:#569CD6;">{</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">(hours)</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">时 </span><span style="color:#569CD6;">{</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">(minutes)</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">分 </span><span style="color:#569CD6;">{</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">(seconds)</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">秒&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">logger.info(</span><span style="color:#CE9178;">&quot;所有单号处理完成&quot;</span><span style="color:#D4D4D4;">)</span></span></code></pre></div><h3 id="代码说明" tabindex="-1"><a class="header-anchor" href="#代码说明"><span>代码说明</span></a></h3><ul><li><strong>日志记录</strong>：使用 <code>logging</code> 模块记录程序的运行状态，便于调试和跟踪。</li><li><strong>数据读取与写入</strong>：使用 <code>pandas</code> 读取输入的 Excel 文件，并在爬取过程中将结果写入新的 Excel 文件。</li><li><strong>Selenium 操作</strong>：通过 Selenium 模拟用户在浏览器中的操作，获取动态加载的物流状态信息。</li><li><strong>多线程处理</strong>：使用 <code>ThreadPoolExecutor</code> 实现多线程爬取，提高爬取效率。</li><li><strong>异常处理与重试机制</strong>：在遇到错误时进行重试，确保程序的健壮性。</li></ul><p>通过以上步骤与代码实现，成功爬取了 FedEx 物流单号的状态信息，为运营部门提供了所需的数据支持。希望这份经验能帮助到更多有类似需求的朋友们！</p>`,42)]))}const D=n(e,[["render",o]]),i=JSON.parse(`{"path":"/code/fedex-crawler.html","title":"📦 Fedex物流单号状态爬取","lang":"zh-CN","frontmatter":{"title":"📦 Fedex物流单号状态爬取","isOriginal":true,"star":true,"category":["Code"],"tag":["爬虫","fedex","python"],"order":1,"description":"📂 项目地址 [Github]Fedex Tracking Bot 📚 背景 在最近的工作中，运营部门要求确认一些 FedEx 物流单号的状态。虽然自己在过去的工作中主要专注于 CRUD 操作，并没有深入了解物流相关的内容，但这次的任务激发了对这一领域的浓厚兴趣。为了满足需求，经过一番摸索和实践，成功实现了一个简单的爬虫，收获颇丰，感到非常兴奋，也...","head":[["meta",{"property":"og:url","content":"https://jayczee.cn/code/fedex-crawler.html"}],["meta",{"property":"og:site_name","content":"Jayczee's Blog"}],["meta",{"property":"og:title","content":"📦 Fedex物流单号状态爬取"}],["meta",{"property":"og:description","content":"📂 项目地址 [Github]Fedex Tracking Bot 📚 背景 在最近的工作中，运营部门要求确认一些 FedEx 物流单号的状态。虽然自己在过去的工作中主要专注于 CRUD 操作，并没有深入了解物流相关的内容，但这次的任务激发了对这一领域的浓厚兴趣。为了满足需求，经过一番摸索和实践，成功实现了一个简单的爬虫，收获颇丰，感到非常兴奋，也..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://blog-1302595532.cos.ap-shanghai.myqcloud.com/blog/fedex-tracking-bot-1.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-24T09:00:57.000Z"}],["meta",{"property":"article:tag","content":"爬虫"}],["meta",{"property":"article:tag","content":"fedex"}],["meta",{"property":"article:tag","content":"python"}],["meta",{"property":"article:modified_time","content":"2025-06-24T09:00:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"📦 Fedex物流单号状态爬取\\",\\"image\\":[\\"https://blog-1302595532.cos.ap-shanghai.myqcloud.com/blog/fedex-tracking-bot-1.png\\",\\"https://blog-1302595532.cos.ap-shanghai.myqcloud.com/blog/fedex-tracking-bot-2.png\\"],\\"dateModified\\":\\"2025-06-24T09:00:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jayczee\\",\\"url\\":\\"https://jayczee.cn\\"}]}"]]},"headers":[{"level":2,"title":"📂 项目地址","slug":"📂-项目地址","link":"#📂-项目地址","children":[]},{"level":2,"title":"📚 背景","slug":"📚-背景","link":"#📚-背景","children":[]},{"level":2,"title":"🎯 需求","slug":"🎯-需求","link":"#🎯-需求","children":[]},{"level":2,"title":"🛠️ 尝试方案记录","slug":"🛠️-尝试方案记录","link":"#🛠️-尝试方案记录","children":[{"level":3,"title":"1. 使用官方 API","slug":"_1-使用官方-api","link":"#_1-使用官方-api","children":[]},{"level":3,"title":"2. 直接调用 FedEx 查询接口","slug":"_2-直接调用-fedex-查询接口","link":"#_2-直接调用-fedex-查询接口","children":[]},{"level":3,"title":"3. Jsoup 获取页面信息","slug":"_3-jsoup-获取页面信息","link":"#_3-jsoup-获取页面信息","children":[]},{"level":3,"title":"4. 使用 Selenium","slug":"_4-使用-selenium","link":"#_4-使用-selenium","children":[]}]},{"level":2,"title":"📊 物流状态信息分析","slug":"📊-物流状态信息分析","link":"#📊-物流状态信息分析","children":[{"level":3,"title":"🔍 基本逻辑","slug":"🔍-基本逻辑","link":"#🔍-基本逻辑","children":[]}]},{"level":2,"title":"⚠️ 遇到的问题及解决方案","slug":"⚠️-遇到的问题及解决方案","link":"#⚠️-遇到的问题及解决方案","children":[{"level":3,"title":"1. 页面提示 “Under Construction”","slug":"_1-页面提示-under-construction","link":"#_1-页面提示-under-construction","children":[]},{"level":3,"title":"2. 爬取速度慢","slug":"_2-爬取速度慢","link":"#_2-爬取速度慢","children":[]},{"level":3,"title":"3. 内存泄漏","slug":"_3-内存泄漏","link":"#_3-内存泄漏","children":[]},{"level":3,"title":"4. 访问频率过高被屏蔽","slug":"_4-访问频率过高被屏蔽","link":"#_4-访问频率过高被屏蔽","children":[]}]},{"level":2,"title":"📝 结论","slug":"📝-结论","link":"#📝-结论","children":[]},{"level":2,"title":"📚 参考资源","slug":"📚-参考资源","link":"#📚-参考资源","children":[]},{"level":2,"title":"📷 效果图","slug":"📷-效果图","link":"#📷-效果图","children":[]},{"level":2,"title":"💻 最终代码","slug":"💻-最终代码","link":"#💻-最终代码","children":[{"level":3,"title":"代码说明","slug":"代码说明","link":"#代码说明","children":[]}]}],"git":{"createdTime":1736761506000,"updatedTime":1750755657000,"contributors":[{"name":"Jayczee","username":"Jayczee","email":"jayczee@yeah.net","commits":6,"url":"https://github.com/Jayczee"}]},"readingTime":{"minutes":7.24,"words":2171},"filePathRelative":"code/fedex-crawler.md","localizedDate":"2025年1月13日","excerpt":"<h2>📂 项目地址</h2>\\n<p><a href=\\"https://github.com/Jayczee/fedex_tracking_bot\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">[Github]Fedex Tracking Bot</a></p>\\n<h2>📚 背景</h2>\\n<p>在最近的工作中，运营部门要求确认一些 FedEx 物流单号的状态。虽然自己在过去的工作中主要专注于 CRUD 操作，并没有深入了解物流相关的内容，但这次的任务激发了对这一领域的浓厚兴趣。为了满足需求，经过一番摸索和实践，成功实现了一个简单的爬虫，收获颇丰，感到非常兴奋，也希望能与大家分享经验并寻求指导。</p>","autoDesc":true}`);export{D as comp,i as data};
