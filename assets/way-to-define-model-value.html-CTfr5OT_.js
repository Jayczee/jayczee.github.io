import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as l,o as p}from"./app-DFbPUm1L.js";const o={};function e(t,s){return p(),a("div",null,s[0]||(s[0]=[l(`<h2 id="🚀-传统做法示例" tabindex="-1"><a class="header-anchor" href="#🚀-传统做法示例"><span>🚀 传统做法示例</span></a></h2><p>假设有一个子组件 <code>ChildComponent.vue</code>，需要向父组件暴露两个属性 <code>props1</code> 和 <code>props2</code>，并实现双向绑定：</p><div class="language-vue" data-highlighter="shiki" data-ext="vue" data-title="vue" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#6A9955;">&lt;!-- ChildComponent.vue --&gt;</span></span>
<span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">template</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">  &lt;</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">...</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">template</span><span style="color:#808080;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">script</span><span style="color:#9CDCFE;"> setup</span><span style="color:#9CDCFE;"> lang</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;ts&quot;</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">computed</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;vue&#39;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> props</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">defineProps</span><span style="color:#D4D4D4;">&lt;{</span></span>
<span class="line"><span style="color:#9CDCFE;">  props1</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;"> | </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#9CDCFE;">  props2</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">boolean</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">}&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> emit</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">defineEmits</span><span style="color:#D4D4D4;">([</span><span style="color:#CE9178;">&#39;update:props1&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;update:props2&#39;</span><span style="color:#D4D4D4;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> localProp1</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">computed</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#DCDCAA;">  get</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#9CDCFE;"> props</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">props1</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#DCDCAA;">  set</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">val</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#DCDCAA;">    emit</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;update:props1&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">val</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">  },</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> localProp2</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">computed</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#DCDCAA;">  get</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#9CDCFE;"> props</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">props2</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#DCDCAA;">  set</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">val</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#DCDCAA;">    emit</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;update:props2&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">val</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">  },</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span>
<span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></code></pre></div><h3 id="👨‍👩‍👧-父组件写法" tabindex="-1"><a class="header-anchor" href="#👨‍👩‍👧-父组件写法"><span>👨‍👩‍👧 父组件写法</span></a></h3><p>父组件通过 <code>v-model</code> 修饰符绑定多个属性：</p><div class="language-vue" data-highlighter="shiki" data-ext="vue" data-title="vue" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">template</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">  &lt;</span><span style="color:#569CD6;">ChildComponent</span><span style="color:#9CDCFE;"> v-model:props1</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;xxx1&quot;</span><span style="color:#9CDCFE;"> v-model:props2</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;xxx2&quot;</span><span style="color:#808080;"> /&gt;</span></span>
<span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">template</span><span style="color:#808080;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">script</span><span style="color:#9CDCFE;"> setup</span><span style="color:#9CDCFE;"> lang</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;ts&quot;</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">shallowRef</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;vue&#39;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> xxx1</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">shallowRef</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">&gt;(</span><span style="color:#CE9178;">&#39;&#39;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> xxx2</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">shallowRef</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">boolean</span><span style="color:#D4D4D4;">&gt;(</span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></code></pre></div><p>代码略显冗长，不够简洁。</p><hr><h2 id="✨-vue-3-4-的-definemodel-语法糖" tabindex="-1"><a class="header-anchor" href="#✨-vue-3-4-的-definemodel-语法糖"><span>✨ Vue 3.4+ 的 <code>defineModel</code> 语法糖</span></a></h2><p>Vue 3.4 版本新增了 <code>defineModel</code>，用于简化子组件中暴露的双向绑定属性定义。通过 <code>defineModel</code>可以直接声明双向绑定的 props。</p><p><code>ChildComponent.vue</code>可以改为以下写法：</p><div class="language-vue" data-highlighter="shiki" data-ext="vue" data-title="vue" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#6A9955;">&lt;!-- ChildComponent.vue --&gt;</span></span>
<span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">template</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">  &lt;</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">...</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">template</span><span style="color:#808080;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">script</span><span style="color:#9CDCFE;"> setup</span><span style="color:#9CDCFE;"> lang</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;ts&quot;</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> props1</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">defineModel</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">&gt;(</span><span style="color:#CE9178;">&#39;props1&#39;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> props2</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">defineModel</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">boolean</span><span style="color:#D4D4D4;">&gt;(</span><span style="color:#CE9178;">&#39;props2&#39;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// 这里 props1 和 props2 是响应式的，直接使用即可</span></span>
<span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></code></pre></div><p>Vue 会自动帮我们处理 <code>props</code> 和 <code>update:XXX</code> 事件的定义，并可直接使用 <code>props1</code>、<code>props2</code> 变量。</p><h3 id="🎯-父组件绑定更简洁" tabindex="-1"><a class="header-anchor" href="#🎯-父组件绑定更简洁"><span>🎯 父组件绑定更简洁</span></a></h3><ul><li>如果只有一个需要双向绑定的属性，父组件可以直接写：</li></ul><div class="language-vue" data-highlighter="shiki" data-ext="vue" data-title="vue" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">ChildComponent</span><span style="color:#9CDCFE;"> v-model</span><span style="color:#D4D4D4;">=</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#9CDCFE;">xxx</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#808080;"> /&gt;</span></span></code></pre></div><ul><li>多个属性时，仍可使用命名修饰符：</li></ul><div class="language-vue" data-highlighter="shiki" data-ext="vue" data-title="vue" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">ChildComponent</span><span style="color:#9CDCFE;"> v-model</span><span style="color:#D4D4D4;">:</span><span style="color:#9CDCFE;">props1</span><span style="color:#D4D4D4;">=</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#9CDCFE;">xxx1</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#9CDCFE;"> v-model</span><span style="color:#D4D4D4;">:</span><span style="color:#9CDCFE;">props2</span><span style="color:#D4D4D4;">=</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#9CDCFE;">xxx2</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#808080;"> /&gt;</span></span></code></pre></div><hr><h2 id="🔗-参考链接" tabindex="-1"><a class="header-anchor" href="#🔗-参考链接"><span>🔗 参考链接</span></a></h2><ul><li><a href="https://vuejs.org/guide/components/v-model.html" target="_blank" rel="noopener noreferrer">Vue 官方文档：v-model</a></li></ul>`,21)]))}const D=n(o,[["render",e]]),y=JSON.parse(`{"path":"/code/way-to-define-model-value.html","title":"✨ 定义 Vue 子组件双向绑定的属性的语法糖 - defineModel","lang":"zh-CN","frontmatter":{"title":"✨ 定义 Vue 子组件双向绑定的属性的语法糖 - defineModel","isOriginal":true,"star":true,"category":["Code"],"tag":["vue"],"order":3,"description":"🚀 传统做法示例 假设有一个子组件 ChildComponent.vue，需要向父组件暴露两个属性 props1 和 props2，并实现双向绑定： 👨‍👩‍👧 父组件写法 父组件通过 v-model 修饰符绑定多个属性： 代码略显冗长，不够简洁。 ✨ Vue 3.4+ 的 defineModel 语法糖 Vue 3.4 版本新增了 defin...","head":[["meta",{"property":"og:url","content":"https://jayczee.cn/code/way-to-define-model-value.html"}],["meta",{"property":"og:site_name","content":"Jayczee's Blog"}],["meta",{"property":"og:title","content":"✨ 定义 Vue 子组件双向绑定的属性的语法糖 - defineModel"}],["meta",{"property":"og:description","content":"🚀 传统做法示例 假设有一个子组件 ChildComponent.vue，需要向父组件暴露两个属性 props1 和 props2，并实现双向绑定： 👨‍👩‍👧 父组件写法 父组件通过 v-model 修饰符绑定多个属性： 代码略显冗长，不够简洁。 ✨ Vue 3.4+ 的 defineModel 语法糖 Vue 3.4 版本新增了 defin..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-30T06:20:48.000Z"}],["meta",{"property":"article:tag","content":"vue"}],["meta",{"property":"article:modified_time","content":"2025-06-30T06:20:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"✨ 定义 Vue 子组件双向绑定的属性的语法糖 - defineModel\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-06-30T06:20:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jayczee\\",\\"url\\":\\"https://jayczee.cn\\"}]}"]]},"headers":[{"level":2,"title":"🚀 传统做法示例","slug":"🚀-传统做法示例","link":"#🚀-传统做法示例","children":[{"level":3,"title":"👨‍👩‍👧 父组件写法","slug":"👨‍👩‍👧-父组件写法","link":"#👨‍👩‍👧-父组件写法","children":[]}]},{"level":2,"title":"✨ Vue 3.4+ 的 defineModel 语法糖","slug":"✨-vue-3-4-的-definemodel-语法糖","link":"#✨-vue-3-4-的-definemodel-语法糖","children":[{"level":3,"title":"🎯 父组件绑定更简洁","slug":"🎯-父组件绑定更简洁","link":"#🎯-父组件绑定更简洁","children":[]}]},{"level":2,"title":"🔗 参考链接","slug":"🔗-参考链接","link":"#🔗-参考链接","children":[]}],"git":{"createdTime":1750755657000,"updatedTime":1751264448000,"contributors":[{"name":"Jayczee","username":"Jayczee","email":"jayczee@yeah.net","commits":3,"url":"https://github.com/Jayczee"}]},"readingTime":{"minutes":1.27,"words":382},"filePathRelative":"code/way-to-define-model-value.md","localizedDate":"2025年6月24日","excerpt":"<h2>🚀 传统做法示例</h2>\\n<p>假设有一个子组件 <code>ChildComponent.vue</code>，需要向父组件暴露两个属性 <code>props1</code> 和 <code>props2</code>，并实现双向绑定：</p>\\n<div class=\\"language-vue\\" data-highlighter=\\"shiki\\" data-ext=\\"vue\\" data-title=\\"vue\\" style=\\"background-color:#1E1E1E;color:#D4D4D4\\"><pre class=\\"shiki dark-plus vp-code\\"><code><span class=\\"line\\"><span style=\\"color:#6A9955\\">&lt;!-- ChildComponent.vue --&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color:#808080\\">&lt;</span><span style=\\"color:#569CD6\\">template</span><span style=\\"color:#808080\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color:#808080\\">  &lt;</span><span style=\\"color:#569CD6\\">div</span><span style=\\"color:#808080\\">&gt;</span><span style=\\"color:#D4D4D4\\">...</span><span style=\\"color:#808080\\">&lt;/</span><span style=\\"color:#569CD6\\">div</span><span style=\\"color:#808080\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color:#808080\\">&lt;/</span><span style=\\"color:#569CD6\\">template</span><span style=\\"color:#808080\\">&gt;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#808080\\">&lt;</span><span style=\\"color:#569CD6\\">script</span><span style=\\"color:#9CDCFE\\"> setup</span><span style=\\"color:#9CDCFE\\"> lang</span><span style=\\"color:#D4D4D4\\">=</span><span style=\\"color:#CE9178\\">\\"ts\\"</span><span style=\\"color:#808080\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color:#C586C0\\">import</span><span style=\\"color:#D4D4D4\\"> { </span><span style=\\"color:#9CDCFE\\">computed</span><span style=\\"color:#D4D4D4\\"> } </span><span style=\\"color:#C586C0\\">from</span><span style=\\"color:#CE9178\\"> 'vue'</span><span style=\\"color:#D4D4D4\\">;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#569CD6\\">const</span><span style=\\"color:#4FC1FF\\"> props</span><span style=\\"color:#D4D4D4\\"> = </span><span style=\\"color:#DCDCAA\\">defineProps</span><span style=\\"color:#D4D4D4\\">&lt;{</span></span>\\n<span class=\\"line\\"><span style=\\"color:#9CDCFE\\">  props1</span><span style=\\"color:#D4D4D4\\">: </span><span style=\\"color:#4EC9B0\\">string</span><span style=\\"color:#D4D4D4\\"> | </span><span style=\\"color:#4EC9B0\\">number</span><span style=\\"color:#D4D4D4\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color:#9CDCFE\\">  props2</span><span style=\\"color:#D4D4D4\\">: </span><span style=\\"color:#4EC9B0\\">boolean</span><span style=\\"color:#D4D4D4\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color:#D4D4D4\\">}&gt;();</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#569CD6\\">const</span><span style=\\"color:#4FC1FF\\"> emit</span><span style=\\"color:#D4D4D4\\"> = </span><span style=\\"color:#DCDCAA\\">defineEmits</span><span style=\\"color:#D4D4D4\\">([</span><span style=\\"color:#CE9178\\">'update:props1'</span><span style=\\"color:#D4D4D4\\">, </span><span style=\\"color:#CE9178\\">'update:props2'</span><span style=\\"color:#D4D4D4\\">]);</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#569CD6\\">const</span><span style=\\"color:#4FC1FF\\"> localProp1</span><span style=\\"color:#D4D4D4\\"> = </span><span style=\\"color:#DCDCAA\\">computed</span><span style=\\"color:#D4D4D4\\">({</span></span>\\n<span class=\\"line\\"><span style=\\"color:#DCDCAA\\">  get</span><span style=\\"color:#9CDCFE\\">:</span><span style=\\"color:#D4D4D4\\"> () </span><span style=\\"color:#569CD6\\">=&gt;</span><span style=\\"color:#9CDCFE\\"> props</span><span style=\\"color:#D4D4D4\\">.</span><span style=\\"color:#9CDCFE\\">props1</span><span style=\\"color:#D4D4D4\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color:#DCDCAA\\">  set</span><span style=\\"color:#9CDCFE\\">:</span><span style=\\"color:#D4D4D4\\"> (</span><span style=\\"color:#9CDCFE\\">val</span><span style=\\"color:#D4D4D4\\">) </span><span style=\\"color:#569CD6\\">=&gt;</span><span style=\\"color:#D4D4D4\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#DCDCAA\\">    emit</span><span style=\\"color:#D4D4D4\\">(</span><span style=\\"color:#CE9178\\">'update:props1'</span><span style=\\"color:#D4D4D4\\">, </span><span style=\\"color:#9CDCFE\\">val</span><span style=\\"color:#D4D4D4\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color:#D4D4D4\\">  },</span></span>\\n<span class=\\"line\\"><span style=\\"color:#D4D4D4\\">});</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#569CD6\\">const</span><span style=\\"color:#4FC1FF\\"> localProp2</span><span style=\\"color:#D4D4D4\\"> = </span><span style=\\"color:#DCDCAA\\">computed</span><span style=\\"color:#D4D4D4\\">({</span></span>\\n<span class=\\"line\\"><span style=\\"color:#DCDCAA\\">  get</span><span style=\\"color:#9CDCFE\\">:</span><span style=\\"color:#D4D4D4\\"> () </span><span style=\\"color:#569CD6\\">=&gt;</span><span style=\\"color:#9CDCFE\\"> props</span><span style=\\"color:#D4D4D4\\">.</span><span style=\\"color:#9CDCFE\\">props2</span><span style=\\"color:#D4D4D4\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color:#DCDCAA\\">  set</span><span style=\\"color:#9CDCFE\\">:</span><span style=\\"color:#D4D4D4\\"> (</span><span style=\\"color:#9CDCFE\\">val</span><span style=\\"color:#D4D4D4\\">) </span><span style=\\"color:#569CD6\\">=&gt;</span><span style=\\"color:#D4D4D4\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#DCDCAA\\">    emit</span><span style=\\"color:#D4D4D4\\">(</span><span style=\\"color:#CE9178\\">'update:props2'</span><span style=\\"color:#D4D4D4\\">, </span><span style=\\"color:#9CDCFE\\">val</span><span style=\\"color:#D4D4D4\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color:#D4D4D4\\">  },</span></span>\\n<span class=\\"line\\"><span style=\\"color:#D4D4D4\\">});</span></span>\\n<span class=\\"line\\"><span style=\\"color:#808080\\">&lt;/</span><span style=\\"color:#569CD6\\">script</span><span style=\\"color:#808080\\">&gt;</span></span></code></pre>\\n</div>","autoDesc":true}`);export{D as comp,y as data};
