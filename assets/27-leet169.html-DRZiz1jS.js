import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,a as t,o}from"./app-DFbPUm1L.js";const a={};function l(r,e){return o(),s("div",null,e[0]||(e[0]=[t(`<h2 id="🚀-相关链接" tabindex="-1"><a class="header-anchor" href="#🚀-相关链接"><span>🚀 相关链接</span></a></h2><p><a href="https://leetcode.cn/problems/two-sum-ii-input-array-is-sorted/?envType=study-plan-v2&amp;envId=top-interview-150" target="_blank" rel="noopener noreferrer">LeetCode 167 - 两数之和 II - 输入有序数组</a></p><h2 id="📜-描述" tabindex="-1"><a class="header-anchor" href="#📜-描述"><span>📜 描述</span></a></h2><p>给你一个下标从 <code>1</code> 开始的整数数组 <code>numbers</code>，该数组已按 <strong>非递减顺序排列</strong>，请你从数组中找出满足相加之和等于目标数 <code>target</code> 的两个数。如果设这两个数分别是 <code>numbers[index1]</code> 和 <code>numbers[index2]</code>，则 <code>1 &lt;= index1 &lt; index2 &lt;= numbers.length</code>。</p><p>以长度为 <code>2</code> 的整数数组 <code>[index1, index2]</code> 的形式返回这两个整数的下标 <code>index1</code> 和 <code>index2</code>。</p><p>你可以假设每个输入 <strong>只对应唯一的答案</strong>，而且你 <strong>不可以</strong> 重复使用相同的元素。</p><p>你所设计的解决方案必须只使用常量级的额外空间。</p><h2 id="💡-示例" tabindex="-1"><a class="header-anchor" href="#💡-示例"><span>💡 示例</span></a></h2><h3 id="示例-1" tabindex="-1"><a class="header-anchor" href="#示例-1"><span>示例 1</span></a></h3><ul><li><strong>输入</strong>: <code>numbers = [2,7,11,15], target = 9</code></li><li><strong>输出</strong>: <code>[1,2]</code></li><li><strong>解释</strong>: <code>2</code> 与 <code>7</code> 之和等于目标数 <code>9</code>。因此 <code>index1 = 1</code>, <code>index2 = 2</code>。返回 <code>[1, 2]</code>。</li></ul><h3 id="示例-2" tabindex="-1"><a class="header-anchor" href="#示例-2"><span>示例 2</span></a></h3><ul><li><strong>输入</strong>: <code>numbers = [2,3,4], target = 6</code></li><li><strong>输出</strong>: <code>[1,3]</code></li><li><strong>解释</strong>: <code>2</code> 与 <code>4</code> 之和等于目标数 <code>6</code>。因此 <code>index1 = 1</code>, <code>index2 = 3</code>。返回 <code>[1, 3]</code>。</li></ul><h3 id="示例-3" tabindex="-1"><a class="header-anchor" href="#示例-3"><span>示例 3</span></a></h3><ul><li><strong>输入</strong>: <code>numbers = [-1,0], target = -1</code></li><li><strong>输出</strong>: <code>[1,2]</code></li><li><strong>解释</strong>: <code>-1</code> 与 <code>0</code> 之和等于目标数 <code>-1</code>。因此 <code>index1 = 1</code>, <code>index2 = 2</code>。返回 <code>[1, 2]</code>。</li></ul><h2 id="📝-提示" tabindex="-1"><a class="header-anchor" href="#📝-提示"><span>📝 提示</span></a></h2><ul><li><code>2 &lt;= numbers.length &lt;= 3 * 10^4</code></li><li><code>-1000 &lt;= numbers[i] &lt;= 1000</code></li><li><code>numbers</code> 按 <strong>非递减顺序</strong> 排列</li><li><code>-1000 &lt;= target &lt;= 1000</code></li><li><strong>仅存在一个有效答案</strong></li></ul><h2 id="💭-思路" tabindex="-1"><a class="header-anchor" href="#💭-思路"><span>💭 思路</span></a></h2><p>由于数组已经是有序的，可以使用双指针的方法来解决这个问题。具体思路如下：</p><ol><li>初始化两个指针，一个指向数组的起始位置（<code>left</code>），另一个指向数组的末尾（<code>right</code>）。</li><li>计算两个指针所指元素的之和。</li><li>如果和大于 <code>target</code>，则将 <code>right</code> 指针向左移动。</li><li>如果和小于 <code>target</code>，则将 <code>left</code> 指针向右移动。</li><li>如果和等于 <code>target</code>，则返回这两个指针的位置。</li></ol><h2 id="💻-代码实现" tabindex="-1"><a class="header-anchor" href="#💻-代码实现"><span>💻 代码实现</span></a></h2><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#569CD6;">public</span><span style="color:#4EC9B0;"> int</span><span style="color:#D4D4D4;">[] </span><span style="color:#DCDCAA;">twoSum</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] numbers, </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> target) {</span></span>
<span class="line"><span style="color:#4EC9B0;">    int</span><span style="color:#9CDCFE;"> left</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, right = </span><span style="color:#9CDCFE;">numbers</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;">    while</span><span style="color:#D4D4D4;"> (left &lt; right) {</span></span>
<span class="line"><span style="color:#4EC9B0;">        int</span><span style="color:#9CDCFE;"> sum</span><span style="color:#D4D4D4;"> = numbers[left] + numbers[right];</span></span>
<span class="line"><span style="color:#C586C0;">        if</span><span style="color:#D4D4D4;"> (sum &gt; target) {</span></span>
<span class="line"><span style="color:#D4D4D4;">            right--;</span></span>
<span class="line"><span style="color:#D4D4D4;">        } </span><span style="color:#C586C0;">else</span><span style="color:#C586C0;"> if</span><span style="color:#D4D4D4;"> (sum &lt; target) {</span></span>
<span class="line"><span style="color:#D4D4D4;">            left++;</span></span>
<span class="line"><span style="color:#D4D4D4;">        } </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#C586C0;">            return</span><span style="color:#C586C0;"> new</span><span style="color:#4EC9B0;"> int</span><span style="color:#D4D4D4;">[]{left + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, right + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">};</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#C586C0;"> new</span><span style="color:#4EC9B0;"> int</span><span style="color:#D4D4D4;">[]{left + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, right + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">};</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre></div>`,21)]))}const d=n(a,[["render",l]]),i=JSON.parse(`{"path":"/note/leet150/27-leet169.html","title":"167 两数之和 II - 输入有序数组","lang":"zh-CN","frontmatter":{"title":"167 两数之和 II - 输入有序数组","order":27,"category":["LeetCode"],"tag":["LeetCode面试经典150题","LeetCode167","简单题","双指针"],"description":"🚀 相关链接 LeetCode 167 - 两数之和 II - 输入有序数组 📜 描述 给你一个下标从 1 开始的整数数组 numbers，该数组已按 非递减顺序排列，请你从数组中找出满足相加之和等于目标数 target 的两个数。如果设这两个数分别是 numbers[index1] 和 numbers[index2]，则 1 <= index1 ...","head":[["meta",{"property":"og:url","content":"https://jayczee.cn/note/leet150/27-leet169.html"}],["meta",{"property":"og:site_name","content":"Jayczee's Blog"}],["meta",{"property":"og:title","content":"167 两数之和 II - 输入有序数组"}],["meta",{"property":"og:description","content":"🚀 相关链接 LeetCode 167 - 两数之和 II - 输入有序数组 📜 描述 给你一个下标从 1 开始的整数数组 numbers，该数组已按 非递减顺序排列，请你从数组中找出满足相加之和等于目标数 target 的两个数。如果设这两个数分别是 numbers[index1] 和 numbers[index2]，则 1 <= index1 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-26T07:30:05.000Z"}],["meta",{"property":"article:tag","content":"LeetCode面试经典150题"}],["meta",{"property":"article:tag","content":"LeetCode167"}],["meta",{"property":"article:tag","content":"简单题"}],["meta",{"property":"article:tag","content":"双指针"}],["meta",{"property":"article:modified_time","content":"2025-05-26T07:30:05.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"167 两数之和 II - 输入有序数组\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-26T07:30:05.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jayczee\\",\\"url\\":\\"https://jayczee.cn\\"}]}"]]},"headers":[{"level":2,"title":"🚀 相关链接","slug":"🚀-相关链接","link":"#🚀-相关链接","children":[]},{"level":2,"title":"📜 描述","slug":"📜-描述","link":"#📜-描述","children":[]},{"level":2,"title":"💡 示例","slug":"💡-示例","link":"#💡-示例","children":[{"level":3,"title":"示例 1","slug":"示例-1","link":"#示例-1","children":[]},{"level":3,"title":"示例 2","slug":"示例-2","link":"#示例-2","children":[]},{"level":3,"title":"示例 3","slug":"示例-3","link":"#示例-3","children":[]}]},{"level":2,"title":"📝 提示","slug":"📝-提示","link":"#📝-提示","children":[]},{"level":2,"title":"💭 思路","slug":"💭-思路","link":"#💭-思路","children":[]},{"level":2,"title":"💻 代码实现","slug":"💻-代码实现","link":"#💻-代码实现","children":[]}],"git":{"createdTime":1748244605000,"updatedTime":1748244605000,"contributors":[{"name":"Jayczee","username":"Jayczee","email":"jayczee@yeah.net","commits":1,"url":"https://github.com/Jayczee"}]},"readingTime":{"minutes":1.83,"words":550},"filePathRelative":"note/leet150/27-leet169.md","localizedDate":"2025年5月26日","excerpt":"<h2>🚀 相关链接</h2>\\n<p><a href=\\"https://leetcode.cn/problems/two-sum-ii-input-array-is-sorted/?envType=study-plan-v2&amp;envId=top-interview-150\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">LeetCode 167 - 两数之和 II - 输入有序数组</a></p>\\n<h2>📜 描述</h2>\\n<p>给你一个下标从 <code>1</code> 开始的整数数组 <code>numbers</code>，该数组已按 <strong>非递减顺序排列</strong>，请你从数组中找出满足相加之和等于目标数 <code>target</code> 的两个数。如果设这两个数分别是 <code>numbers[index1]</code> 和 <code>numbers[index2]</code>，则 <code>1 &lt;= index1 &lt; index2 &lt;= numbers.length</code>。</p>","autoDesc":true}`);export{d as comp,i as data};
