import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,a,o as l}from"./app-DXs7qa2N.js";const e={};function p(t,s){return l(),o("div",null,s[0]||(s[0]=[a(`<h2 id="🚀-相关链接" tabindex="-1"><a class="header-anchor" href="#🚀-相关链接"><span>🚀 相关链接</span></a></h2><p><a href="https://leetcode.cn/problems/substring-with-concatenation-of-all-words/description/?envType=study-plan-v2&amp;envId=top-interview-150" target="_blank" rel="noopener noreferrer">LeetCode 30 - 串联所有单词的子串</a></p><h2 id="📜-描述" tabindex="-1"><a class="header-anchor" href="#📜-描述"><span>📜 描述</span></a></h2><p>给定一个字符串 <code>s</code> 和一个字符串数组 <code>words</code>。<code>words</code> 中所有字符串 <strong>长度相同</strong>。</p><p><code>s</code> 中的 <strong>串联子串</strong> 是指一个包含 <code>words</code> 中所有字符串以任意顺序排列连接起来的子串。</p><h2 id="💡-示例" tabindex="-1"><a class="header-anchor" href="#💡-示例"><span>💡 示例</span></a></h2><h3 id="示例-1" tabindex="-1"><a class="header-anchor" href="#示例-1"><span>示例 1</span></a></h3><ul><li><strong>输入</strong>: <code>s = &quot;barfoothefoobarman&quot;</code>, <code>words = [&quot;foo&quot;,&quot;bar&quot;]</code></li><li><strong>输出</strong>: <code>[0,9]</code></li><li><strong>解释</strong>: <ul><li>子串 <code>&quot;barfoo&quot;</code> 开始位置是 <code>0</code>。它是 <code>words</code> 中以 <code>[&quot;bar&quot;,&quot;foo&quot;]</code> 顺序排列的连接。</li><li>子串 <code>&quot;foobar&quot;</code> 开始位置是 <code>9</code>。它是 <code>words</code> 中以 <code>[&quot;foo&quot;,&quot;bar&quot;]</code> 顺序排列的连接。</li></ul></li></ul><h3 id="示例-2" tabindex="-1"><a class="header-anchor" href="#示例-2"><span>示例 2</span></a></h3><ul><li><strong>输入</strong>: <code>s = &quot;wordgoodgoodgoodbestword&quot;</code>, <code>words = [&quot;word&quot;,&quot;good&quot;,&quot;best&quot;,&quot;word&quot;]</code></li><li><strong>输出</strong>: <code>[]</code></li><li><strong>解释</strong>: 没有符合条件的子串。</li></ul><h3 id="示例-3" tabindex="-1"><a class="header-anchor" href="#示例-3"><span>示例 3</span></a></h3><ul><li><strong>输入</strong>: <code>s = &quot;barfoofoobarthefoobarman&quot;</code>, <code>words = [&quot;bar&quot;,&quot;foo&quot;,&quot;the&quot;]</code></li><li><strong>输出</strong>: <code>[6,9,12]</code></li><li><strong>解释</strong>: <ul><li>子串 <code>&quot;foobarthe&quot;</code> 开始位置是 <code>6</code>。</li><li>子串 <code>&quot;barthefoo&quot;</code> 开始位置是 <code>9</code>。</li><li>子串 <code>&quot;thefoobar&quot;</code> 开始位置是 <code>12</code>。</li></ul></li></ul><h2 id="📝-提示" tabindex="-1"><a class="header-anchor" href="#📝-提示"><span>📝 提示</span></a></h2><ul><li><code>1 &lt;= s.length &lt;= 10^4</code></li><li><code>1 &lt;= words.length &lt;= 5000</code></li><li><code>1 &lt;= words[i].length &lt;= 30</code></li><li><code>words[i]</code> 和 <code>s</code> 由小写英文字母组成</li></ul><h2 id="💭-思路" tabindex="-1"><a class="header-anchor" href="#💭-思路"><span>💭 思路</span></a></h2><h3 id="方法一-滑动窗口-哈希表" tabindex="-1"><a class="header-anchor" href="#方法一-滑动窗口-哈希表"><span>方法一：滑动窗口 + 哈希表</span></a></h3><ol><li><p><strong>预处理</strong>：</p><ul><li>计算每个单词的长度 <code>wordLen</code> 和所有单词连接后的总长度 <code>groupLen</code>。</li><li>如果 <code>s</code> 的长度小于 <code>groupLen</code>，直接返回空列表。</li></ul></li><li><p><strong>滑动窗口</strong>：</p><ul><li>使用滑动窗口在 <code>s</code> 上滑动，窗口大小为 <code>groupLen</code>。</li><li>对于每个窗口，统计窗口内单词出现的频率，并与 <code>words</code> 的频率进行比较。</li><li>具体实现为使用一个哈希表，key为单词，用words数组进行初始化，words数组每出现一次就减1，窗口内出现一次就加1，若该窗口使hashmap中的值全为0，则该窗口起始位置为1个答案。</li></ul></li></ol><h2 id="💻-代码实现" tabindex="-1"><a class="header-anchor" href="#💻-代码实现"><span>💻 代码实现</span></a></h2><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#569CD6;">public</span><span style="color:#4EC9B0;"> List</span><span style="color:#D4D4D4;">&lt;Integer&gt; </span><span style="color:#DCDCAA;">findSubstring</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;"> s, </span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">[] words) {</span></span>
<span class="line"><span style="color:#4EC9B0;">    int</span><span style="color:#9CDCFE;"> wordLen</span><span style="color:#D4D4D4;"> = words[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">].</span><span style="color:#DCDCAA;">length</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#4EC9B0;">    int</span><span style="color:#9CDCFE;"> groupLen</span><span style="color:#D4D4D4;"> = wordLen * </span><span style="color:#9CDCFE;">words</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">length</span><span style="color:#D4D4D4;">() &lt; groupLen) {</span></span>
<span class="line"><span style="color:#C586C0;">        return</span><span style="color:#9CDCFE;"> Collections</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">emptyList</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#4EC9B0;">    List</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">Integer</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;">ans</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#4EC9B0;"> ArrayList</span><span style="color:#D4D4D4;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#C586C0;">    for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#9CDCFE;"> i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; i &lt; wordLen; i++) {</span></span>
<span class="line"><span style="color:#4EC9B0;">        Map</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">Integer</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;">map</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#4EC9B0;"> HashMap</span><span style="color:#D4D4D4;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#C586C0;">        for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">String</span><span style="color:#9CDCFE;"> word</span><span style="color:#C586C0;"> :</span><span style="color:#D4D4D4;"> words) {</span></span>
<span class="line"><span style="color:#4EC9B0;">            int</span><span style="color:#9CDCFE;"> val</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">map</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getOrDefault</span><span style="color:#D4D4D4;">(word, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#9CDCFE;">            map</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">put</span><span style="color:#D4D4D4;">(word, val - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#4EC9B0;">        int</span><span style="color:#9CDCFE;"> left</span><span style="color:#D4D4D4;"> = i, r = left + groupLen - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;">        while</span><span style="color:#D4D4D4;"> (r &lt; </span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">length</span><span style="color:#D4D4D4;">()) {</span></span>
<span class="line"><span style="color:#4EC9B0;">            String</span><span style="color:#9CDCFE;"> subStr</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">substring</span><span style="color:#D4D4D4;">(left, r + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#C586C0;">            if</span><span style="color:#D4D4D4;"> (left == i) {</span></span>
<span class="line"><span style="color:#C586C0;">                for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#9CDCFE;"> j</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; j &lt; </span><span style="color:#9CDCFE;">subStr</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">length</span><span style="color:#D4D4D4;">(); j += wordLen) {</span></span>
<span class="line"><span style="color:#4EC9B0;">                    String</span><span style="color:#9CDCFE;"> word</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">subStr</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">substring</span><span style="color:#D4D4D4;">(j, j + wordLen);</span></span>
<span class="line"><span style="color:#C586C0;">                    if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">map</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">containsKey</span><span style="color:#D4D4D4;">(word)) {</span></span>
<span class="line"><span style="color:#9CDCFE;">                        map</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">put</span><span style="color:#D4D4D4;">(word, </span><span style="color:#9CDCFE;">map</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">get</span><span style="color:#D4D4D4;">(word) + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">                    }</span></span>
<span class="line"><span style="color:#D4D4D4;">                }</span></span>
<span class="line"><span style="color:#D4D4D4;">            } </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#4EC9B0;">                String</span><span style="color:#9CDCFE;"> formerWord</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">substring</span><span style="color:#D4D4D4;">(left - wordLen, left);</span></span>
<span class="line"><span style="color:#4EC9B0;">                String</span><span style="color:#9CDCFE;"> newWord</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">substring</span><span style="color:#D4D4D4;">(left + groupLen - wordLen, left + groupLen);</span></span>
<span class="line"><span style="color:#C586C0;">                if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">map</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">containsKey</span><span style="color:#D4D4D4;">(formerWord)) {</span></span>
<span class="line"><span style="color:#9CDCFE;">                    map</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">put</span><span style="color:#D4D4D4;">(formerWord, </span><span style="color:#9CDCFE;">map</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">get</span><span style="color:#D4D4D4;">(formerWord) - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">                }</span></span>
<span class="line"><span style="color:#C586C0;">                if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">map</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">containsKey</span><span style="color:#D4D4D4;">(newWord)) {</span></span>
<span class="line"><span style="color:#9CDCFE;">                    map</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">put</span><span style="color:#D4D4D4;">(newWord, </span><span style="color:#9CDCFE;">map</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">get</span><span style="color:#D4D4D4;">(newWord) + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">                }</span></span>
<span class="line"><span style="color:#D4D4D4;">            }</span></span>
<span class="line"><span style="color:#C586C0;">            if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">map</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">values</span><span style="color:#D4D4D4;">().</span><span style="color:#DCDCAA;">stream</span><span style="color:#D4D4D4;">().</span><span style="color:#DCDCAA;">allMatch</span><span style="color:#D4D4D4;">(v </span><span style="color:#569CD6;">-&gt;</span><span style="color:#D4D4D4;"> v == </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">)) {</span></span>
<span class="line"><span style="color:#9CDCFE;">                ans</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">add</span><span style="color:#D4D4D4;">(left);</span></span>
<span class="line"><span style="color:#D4D4D4;">            }</span></span>
<span class="line"><span style="color:#D4D4D4;">            left += wordLen;</span></span>
<span class="line"><span style="color:#D4D4D4;">            r = left + groupLen - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#D4D4D4;"> ans;</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre></div>`,19)]))}const D=n(e,[["render",p]]),y=JSON.parse(`{"path":"/note/leet150/32-leet030.html","title":"30 串联所有单词的子串","lang":"zh-CN","frontmatter":{"title":"30 串联所有单词的子串","order":32,"category":["LeetCode"],"tag":["LeetCode面试经典150题","LeetCode30","困难题","滑动窗口","哈希表"],"description":"🚀 相关链接 LeetCode 30 - 串联所有单词的子串 📜 描述 给定一个字符串 s 和一个字符串数组 words。words 中所有字符串 长度相同。 s 中的 串联子串 是指一个包含 words 中所有字符串以任意顺序排列连接起来的子串。 💡 示例 示例 1 输入: s = \\"barfoothefoobarman\\", words = [...","head":[["meta",{"property":"og:url","content":"https://jayczee.cn/note/leet150/32-leet030.html"}],["meta",{"property":"og:site_name","content":"Jayczee's Blog"}],["meta",{"property":"og:title","content":"30 串联所有单词的子串"}],["meta",{"property":"og:description","content":"🚀 相关链接 LeetCode 30 - 串联所有单词的子串 📜 描述 给定一个字符串 s 和一个字符串数组 words。words 中所有字符串 长度相同。 s 中的 串联子串 是指一个包含 words 中所有字符串以任意顺序排列连接起来的子串。 💡 示例 示例 1 输入: s = \\"barfoothefoobarman\\", words = [..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-27T07:51:43.000Z"}],["meta",{"property":"article:tag","content":"LeetCode面试经典150题"}],["meta",{"property":"article:tag","content":"LeetCode30"}],["meta",{"property":"article:tag","content":"困难题"}],["meta",{"property":"article:tag","content":"滑动窗口"}],["meta",{"property":"article:tag","content":"哈希表"}],["meta",{"property":"article:modified_time","content":"2025-05-27T07:51:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"30 串联所有单词的子串\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-27T07:51:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jayczee\\",\\"url\\":\\"https://jayczee.cn\\"}]}"]]},"headers":[{"level":2,"title":"🚀 相关链接","slug":"🚀-相关链接","link":"#🚀-相关链接","children":[]},{"level":2,"title":"📜 描述","slug":"📜-描述","link":"#📜-描述","children":[]},{"level":2,"title":"💡 示例","slug":"💡-示例","link":"#💡-示例","children":[{"level":3,"title":"示例 1","slug":"示例-1","link":"#示例-1","children":[]},{"level":3,"title":"示例 2","slug":"示例-2","link":"#示例-2","children":[]},{"level":3,"title":"示例 3","slug":"示例-3","link":"#示例-3","children":[]}]},{"level":2,"title":"📝 提示","slug":"📝-提示","link":"#📝-提示","children":[]},{"level":2,"title":"💭 思路","slug":"💭-思路","link":"#💭-思路","children":[{"level":3,"title":"方法一：滑动窗口 + 哈希表","slug":"方法一-滑动窗口-哈希表","link":"#方法一-滑动窗口-哈希表","children":[]}]},{"level":2,"title":"💻 代码实现","slug":"💻-代码实现","link":"#💻-代码实现","children":[]}],"git":{"createdTime":1748332303000,"updatedTime":1748332303000,"contributors":[{"name":"Jayczee","username":"Jayczee","email":"jayczee@yeah.net","commits":1,"url":"https://github.com/Jayczee"}]},"readingTime":{"minutes":2.04,"words":612},"filePathRelative":"note/leet150/32-leet030.md","localizedDate":"2025年5月27日","excerpt":"<h2>🚀 相关链接</h2>\\n<p><a href=\\"https://leetcode.cn/problems/substring-with-concatenation-of-all-words/description/?envType=study-plan-v2&amp;envId=top-interview-150\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">LeetCode 30 - 串联所有单词的子串</a></p>\\n<h2>📜 描述</h2>\\n<p>给定一个字符串 <code>s</code> 和一个字符串数组 <code>words</code>。<code>words</code> 中所有字符串 <strong>长度相同</strong>。</p>","autoDesc":true}`);export{D as comp,y as data};
