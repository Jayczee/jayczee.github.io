import{_ as i,c as e,a as n,o as a}from"./app-Dv630RBb.js";const t={};function l(d,s){return a(),e("div",null,s[0]||(s[0]=[n(`<h2 id="🔗-原题链接" tabindex="-1"><a class="header-anchor" href="#🔗-原题链接"><span>🔗 原题链接</span></a></h2><p><a href="https://leetcode.cn/problems/merge-sorted-array/description/?envType=study-plan-v2&amp;envId=top-interview-150" target="_blank" rel="noopener noreferrer">合并两个有序数组</a></p><h2 id="📝-合并两个有序数组" tabindex="-1"><a class="header-anchor" href="#📝-合并两个有序数组"><span>📝 合并两个有序数组</span></a></h2><p>给定两个按 <strong>非递减顺序</strong> 排列的整数数组 <code>nums1</code> 和 <code>nums2</code>，另有两个整数 <code>m</code> 和 <code>n</code>，分别表示 <code>nums1</code> 和 <code>nums2</code> 中的元素数目。</p><p>请你 <strong>合并</strong> <code>nums2</code> 到 <code>nums1</code> 中，使合并后的数组同样按 <strong>非递减顺序</strong> 排列。</p><blockquote><p><strong>注意：</strong> 最终，合并后数组不应由函数返回，而是存储在数组 <code>nums1</code> 中。为了应对这种情况，<code>nums1</code> 的初始长度为 <code>m + n</code>，其中前 <code>m</code> 个元素表示应合并的元素，后 <code>n</code> 个元素为 0，应忽略。<code>nums2</code> 的长度为 <code>n</code>。</p></blockquote><h2 id="📊-示例" tabindex="-1"><a class="header-anchor" href="#📊-示例"><span>📊 示例</span></a></h2><h3 id="示例-1" tabindex="-1"><a class="header-anchor" href="#示例-1"><span>示例 1</span></a></h3><p><strong>输入：</strong></p><div class="language-plaintext line-numbers-mode" data-highlighter="shiki" data-ext="plaintext" data-title="plaintext" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>nums1 = [1, 2, 3, 0, 0, 0], m = 3</span></span>
<span class="line"><span>nums2 = [2, 5, 6], n = 3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出：</strong></p><div class="language-plaintext line-numbers-mode" data-highlighter="shiki" data-ext="plaintext" data-title="plaintext" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[1, 2, 2, 3, 5, 6]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>解释：</strong> 需要合并 <code>[1, 2, 3]</code> 和 <code>[2, 5, 6]</code>。合并结果是 <code>[1, 2, 2, 3, 5, 6]</code>，其中斜体加粗标注的为 <code>nums1</code> 中的元素。</p><h3 id="示例-2" tabindex="-1"><a class="header-anchor" href="#示例-2"><span>示例 2</span></a></h3><p><strong>输入：</strong></p><div class="language-plaintext line-numbers-mode" data-highlighter="shiki" data-ext="plaintext" data-title="plaintext" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>nums1 = [1], m = 1</span></span>
<span class="line"><span>nums2 = [], n = 0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出：</strong></p><div class="language-plaintext line-numbers-mode" data-highlighter="shiki" data-ext="plaintext" data-title="plaintext" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[1]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>解释：</strong> 需要合并 <code>[1]</code> 和 <code>[]</code>。合并结果是 <code>[1]</code>。</p><h3 id="示例-3" tabindex="-1"><a class="header-anchor" href="#示例-3"><span>示例 3</span></a></h3><p><strong>输入：</strong></p><div class="language-plaintext line-numbers-mode" data-highlighter="shiki" data-ext="plaintext" data-title="plaintext" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>nums1 = [0], m = 0</span></span>
<span class="line"><span>nums2 = [1], n = 1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出：</strong></p><div class="language-plaintext line-numbers-mode" data-highlighter="shiki" data-ext="plaintext" data-title="plaintext" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[1]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>解释：</strong> 需要合并的数组是 <code>[]</code> 和 <code>[1]</code>。合并结果是 <code>[1]</code>。注意，因为 <code>m = 0</code>，所以 <code>nums1</code> 中没有元素。<code>nums1</code> 中仅存的 0 仅仅是为了确保合并结果可以顺利存放到 <code>nums1</code> 中。</p><h2 id="🔍-提示" tabindex="-1"><a class="header-anchor" href="#🔍-提示"><span>🔍 提示</span></a></h2><ul><li><code>nums1.length == m + n</code></li><li><code>nums2.length == n</code></li><li><code>0 &lt;= m, n &lt;= 200</code></li><li><code>1 &lt;= m + n &lt;= 200</code></li><li><code>-10^9 &lt;= nums1[i], nums2[j] &lt;= 10^9</code></li></ul><h2 id="🚀-进阶" tabindex="-1"><a class="header-anchor" href="#🚀-进阶"><span>🚀 进阶</span></a></h2><p>你可以设计实现一个时间复杂度为 O(m + n) 的算法解决此问题吗？</p><h2 id="💡-思路" tabindex="-1"><a class="header-anchor" href="#💡-思路"><span>💡 思路</span></a></h2><p>l为<code>nums1</code>的有效元素末尾，r为<code>nums2</code>有效元素末尾，cur为<code>nums1</code>整个数组的末尾。当<code>nums1</code>和<code>nums2</code>都有元素时，即<code>l&gt;=0</code>且<code>r&gt;=0</code>时，比较<code>nums1[l]</code>和<code>nums2[r]</code>的大小，将其更大值放入<code>nums1[cur]</code>。并移动相关指针。当<code>nums1</code>没有元素，但<code>nums2</code>还有时，直接将<code>nums2</code>剩余元素放入<code>nums1</code>中<code>cur</code>及<code>cur</code>之前的位置。当<code>nums1</code>剩余元素，<code>nums2</code>没元素时，此时排序已经完成，直接不处理，返回即可。</p><h2 id="💻-代码实现" tabindex="-1"><a class="header-anchor" href="#💻-代码实现"><span>💻 代码实现</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> merge</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[] nums1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> m</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[] nums2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> n) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> l </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> m </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> r </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> n </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> cur </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> m </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> n </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    while</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (l </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &amp;&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> r </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (nums1[l] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> nums2[r]) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            nums1[cur] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> nums1[l]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            l</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">--;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            nums1[cur] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> nums2[r]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            r</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">--;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        cur</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">--;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    while</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(r</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">){</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        nums1[cur] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> nums2[r]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        r</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">--;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        cur</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">--;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,33)]))}const p=i(t,[["render",l],["__file","1-leet088.html.vue"]]),r=JSON.parse(`{"path":"/note/leet150/1-leet088.html","title":"088 合并两个有序数组","lang":"zh-CN","frontmatter":{"title":"088 合并两个有序数组","order":1,"category":["LeetCode"],"tag":["LeetCode面试经典150题","LeetCode88","简单题","数组","双指针","排序"],"description":"🔗 原题链接 合并两个有序数组 📝 合并两个有序数组 给定两个按 非递减顺序 排列的整数数组 nums1 和 nums2，另有两个整数 m 和 n，分别表示 nums1 和 nums2 中的元素数目。 请你 合并 nums2 到 nums1 中，使合并后的数组同样按 非递减顺序 排列。 注意： 最终，合并后数组不应由函数返回，而是存储在数组 num...","head":[["meta",{"property":"og:url","content":"https://jayczee.cn/note/leet150/1-leet088.html"}],["meta",{"property":"og:site_name","content":"Jayczee's Blog"}],["meta",{"property":"og:title","content":"088 合并两个有序数组"}],["meta",{"property":"og:description","content":"🔗 原题链接 合并两个有序数组 📝 合并两个有序数组 给定两个按 非递减顺序 排列的整数数组 nums1 和 nums2，另有两个整数 m 和 n，分别表示 nums1 和 nums2 中的元素数目。 请你 合并 nums2 到 nums1 中，使合并后的数组同样按 非递减顺序 排列。 注意： 最终，合并后数组不应由函数返回，而是存储在数组 num..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-25T09:34:38.000Z"}],["meta",{"property":"article:tag","content":"LeetCode面试经典150题"}],["meta",{"property":"article:tag","content":"LeetCode88"}],["meta",{"property":"article:tag","content":"简单题"}],["meta",{"property":"article:tag","content":"数组"}],["meta",{"property":"article:tag","content":"双指针"}],["meta",{"property":"article:tag","content":"排序"}],["meta",{"property":"article:modified_time","content":"2025-02-25T09:34:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"088 合并两个有序数组\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-25T09:34:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jayczee\\",\\"url\\":\\"https://jayczee.cn\\"}]}"]]},"headers":[{"level":2,"title":"🔗 原题链接","slug":"🔗-原题链接","link":"#🔗-原题链接","children":[]},{"level":2,"title":"📝 合并两个有序数组","slug":"📝-合并两个有序数组","link":"#📝-合并两个有序数组","children":[]},{"level":2,"title":"📊 示例","slug":"📊-示例","link":"#📊-示例","children":[{"level":3,"title":"示例 1","slug":"示例-1","link":"#示例-1","children":[]},{"level":3,"title":"示例 2","slug":"示例-2","link":"#示例-2","children":[]},{"level":3,"title":"示例 3","slug":"示例-3","link":"#示例-3","children":[]}]},{"level":2,"title":"🔍 提示","slug":"🔍-提示","link":"#🔍-提示","children":[]},{"level":2,"title":"🚀 进阶","slug":"🚀-进阶","link":"#🚀-进阶","children":[]},{"level":2,"title":"💡 思路","slug":"💡-思路","link":"#💡-思路","children":[]},{"level":2,"title":"💻 代码实现","slug":"💻-代码实现","link":"#💻-代码实现","children":[]}],"git":{"createdTime":1740475272000,"updatedTime":1740476078000,"contributors":[{"name":"Jayczee","username":"Jayczee","email":"jayczee@yeah.net","commits":2,"url":"https://github.com/Jayczee"}]},"readingTime":{"minutes":2.08,"words":625},"filePathRelative":"note/leet150/1-leet088.md","localizedDate":"2025年2月25日","excerpt":"<h2>🔗 原题链接</h2>\\n<p><a href=\\"https://leetcode.cn/problems/merge-sorted-array/description/?envType=study-plan-v2&amp;envId=top-interview-150\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">合并两个有序数组</a></p>\\n<h2>📝 合并两个有序数组</h2>\\n<p>给定两个按 <strong>非递减顺序</strong> 排列的整数数组 <code>nums1</code> 和 <code>nums2</code>，另有两个整数 <code>m</code> 和 <code>n</code>，分别表示 <code>nums1</code> 和 <code>nums2</code> 中的元素数目。</p>","autoDesc":true}`);export{p as comp,r as data};
