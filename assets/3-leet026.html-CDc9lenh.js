import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,a,b as r,d as n,e as l,w as t,r as c,o as i}from"./app-CnwXUOSJ.js";const d={};function D(y,s){const e=c("RouteLink");return i(),p("div",null,[s[5]||(s[5]=a(`<h2 id="🔗-相关链接" tabindex="-1"><a class="header-anchor" href="#🔗-相关链接"><span>🔗 相关链接</span></a></h2><p><a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-array/description/?envType=study-plan-v2&amp;envId=top-interview-150" target="_blank" rel="noopener noreferrer">移除有序数组中的重复项</a></p><h2 id="📜-题目描述" tabindex="-1"><a class="header-anchor" href="#📜-题目描述"><span>📜 题目描述</span></a></h2><p>给定一个 <strong>非严格递增排列</strong> 的数组 <code>nums</code>，需要 <strong>原地</strong> 删除重复出现的元素，使每个元素只出现一次，返回删除后数组的新长度。元素的相对顺序应该保持一致。然后返回 <code>nums</code> 中唯一元素的个数。</p><p>考虑 <code>nums</code> 的唯一元素的数量为 <code>k</code>，需要执行以下操作：</p><ol><li>更改数组 <code>nums</code>，使 <code>nums</code> 的前 <code>k</code> 个元素包含唯一元素，并按照它们最初在 <code>nums</code> 中出现的顺序排列。</li><li><code>nums</code> 的其余元素与 <code>nums</code> 的大小不重要。</li><li>返回 <code>k</code>。</li></ol><h2 id="🧪-判题标准" tabindex="-1"><a class="header-anchor" href="#🧪-判题标准"><span>🧪 判题标准</span></a></h2><p>系统会用下面的代码来测试题解：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;"> = [...]; </span><span style="color:#6A9955;">// 输入数组</span></span>
<span class="line"><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">expectedNums</span><span style="color:#D4D4D4;"> = [...]; </span><span style="color:#6A9955;">// 长度正确的期望答案</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4EC9B0;">int</span><span style="color:#9CDCFE;"> k</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">removeDuplicates</span><span style="color:#D4D4D4;">(nums); </span><span style="color:#6A9955;">// 调用</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">assert</span><span style="color:#D4D4D4;"> k == </span><span style="color:#9CDCFE;">expectedNums</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#9CDCFE;"> i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; i &lt; k; i++) {</span></span>
<span class="line"><span style="color:#C586C0;">    assert</span><span style="color:#D4D4D4;"> nums[i] == expectedNums[i];</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre></div><p>如果所有的断言都通过，那么题解将会通过。</p><h2 id="📊-示例" tabindex="-1"><a class="header-anchor" href="#📊-示例"><span>📊 示例</span></a></h2><h3 id="示例-1" tabindex="-1"><a class="header-anchor" href="#示例-1"><span>示例 1</span></a></h3><p><strong>输入：</strong></p><div class="language-plaintext" data-highlighter="shiki" data-ext="plaintext" data-title="plaintext" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span>nums = [1,1,2]</span></span></code></pre></div><p><strong>输出：</strong></p><div class="language-plaintext" data-highlighter="shiki" data-ext="plaintext" data-title="plaintext" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span>2, nums = [1,2,_]</span></span></code></pre></div><p><strong>解释：</strong><br> 函数应返回新的长度 <code>2</code>，并且原数组 <code>nums</code> 的前两个元素被修改为 <code>1, 2</code>。不需要考虑数组中超出新长度后面的元素。</p><h3 id="示例-2" tabindex="-1"><a class="header-anchor" href="#示例-2"><span>示例 2</span></a></h3><p><strong>输入：</strong></p><div class="language-plaintext" data-highlighter="shiki" data-ext="plaintext" data-title="plaintext" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span>nums = [0,0,1,1,1,2,2,3,3,4]</span></span></code></pre></div><p><strong>输出：</strong></p><div class="language-plaintext" data-highlighter="shiki" data-ext="plaintext" data-title="plaintext" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span>5, nums = [0,1,2,3,4]</span></span></code></pre></div><p><strong>解释：</strong><br> 函数应返回新的长度 <code>5</code>，并且原数组 <code>nums</code> 的前五个元素被修改为 <code>0, 1, 2, 3, 4</code>。不需要考虑数组中超出新长度后面的元素。</p><h2 id="📝-提示" tabindex="-1"><a class="header-anchor" href="#📝-提示"><span>📝 提示</span></a></h2><ul><li><code>1 &lt;= nums.length &lt;= 3 * 10^4</code></li><li><code>-10^4 &lt;= nums[i] &lt;= 10^4</code></li><li><code>nums</code> 已按 <strong>非严格递增</strong> 排列</li></ul><h2 id="💡-思路" tabindex="-1"><a class="header-anchor" href="#💡-思路"><span>💡 思路</span></a></h2>`,26)),r("p",null,[s[2]||(s[2]=n("相较于")),l(e,{to:"/note/leet150/2-leet027.html"},{default:t(()=>s[0]||(s[0]=[n("027 移除元素")])),_:1,__:[0]}),s[3]||(s[3]=n("，该题需要删除有序数组中的重复项，即要删除的元素是动态的，我们可以开辟一个数组，记录某值在之前的记录中是否出现过。其他的思路仍然像")),l(e,{to:"/note/leet150/2-leet027.html"},{default:t(()=>s[1]||(s[1]=[n("027 移除元素")])),_:1,__:[1]}),s[4]||(s[4]=n("一样。"))]),s[6]||(s[6]=a(`<h2 id="💻-代码实现" tabindex="-1"><a class="header-anchor" href="#💻-代码实现"><span>💻 代码实现</span></a></h2><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#569CD6;">public</span><span style="color:#4EC9B0;"> int</span><span style="color:#DCDCAA;"> removeDuplicates</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] nums) {</span></span>
<span class="line"><span style="color:#C586C0;">        if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> == </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#C586C0;">            return</span><span style="color:#B5CEA8;"> 1</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#4EC9B0;">        boolean</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">flag</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#4EC9B0;"> boolean</span><span style="color:#D4D4D4;">[</span><span style="color:#B5CEA8;">20001</span><span style="color:#D4D4D4;">];</span></span>
<span class="line"><span style="color:#4EC9B0;">        int</span><span style="color:#9CDCFE;"> scanIndex</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#4EC9B0;">        int</span><span style="color:#9CDCFE;"> currentIndex</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#4EC9B0;">        int</span><span style="color:#9CDCFE;"> length</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;">        while</span><span style="color:#D4D4D4;"> (scanIndex &lt; </span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#C586C0;">            if</span><span style="color:#D4D4D4;"> (!flag[nums[scanIndex] + </span><span style="color:#B5CEA8;">10000</span><span style="color:#D4D4D4;">]) {</span></span>
<span class="line"><span style="color:#D4D4D4;">                nums[currentIndex] = nums[scanIndex];</span></span>
<span class="line"><span style="color:#D4D4D4;">                flag[nums[scanIndex] + </span><span style="color:#B5CEA8;">10000</span><span style="color:#D4D4D4;">] = </span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">                length++;</span></span>
<span class="line"><span style="color:#D4D4D4;">                currentIndex++;</span></span>
<span class="line"><span style="color:#D4D4D4;">            }</span></span>
<span class="line"><span style="color:#D4D4D4;">            scanIndex++;</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#C586C0;">        return</span><span style="color:#D4D4D4;"> length;</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span></code></pre></div>`,2))])}const m=o(d,[["render",D]]),g=JSON.parse(`{"path":"/note/leet150/3-leet026.html","title":"026 移除有序数组中的重复项","lang":"zh-CN","frontmatter":{"title":"026 移除有序数组中的重复项","order":3,"category":["LeetCode"],"tag":["LeetCode面试经典150题","LeetCode26","简单题","数组","双指针","快慢指针"],"description":"🔗 相关链接 移除有序数组中的重复项 📜 题目描述 给定一个 非严格递增排列 的数组 nums，需要 原地 删除重复出现的元素，使每个元素只出现一次，返回删除后数组的新长度。元素的相对顺序应该保持一致。然后返回 nums 中唯一元素的个数。 考虑 nums 的唯一元素的数量为 k，需要执行以下操作： 更改数组 nums，使 nums 的前 k 个元...","head":[["meta",{"property":"og:url","content":"https://jayczee.cn/note/leet150/3-leet026.html"}],["meta",{"property":"og:site_name","content":"Jayczee's Blog"}],["meta",{"property":"og:title","content":"026 移除有序数组中的重复项"}],["meta",{"property":"og:description","content":"🔗 相关链接 移除有序数组中的重复项 📜 题目描述 给定一个 非严格递增排列 的数组 nums，需要 原地 删除重复出现的元素，使每个元素只出现一次，返回删除后数组的新长度。元素的相对顺序应该保持一致。然后返回 nums 中唯一元素的个数。 考虑 nums 的唯一元素的数量为 k，需要执行以下操作： 更改数组 nums，使 nums 的前 k 个元..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-25T09:48:56.000Z"}],["meta",{"property":"article:tag","content":"LeetCode面试经典150题"}],["meta",{"property":"article:tag","content":"LeetCode26"}],["meta",{"property":"article:tag","content":"简单题"}],["meta",{"property":"article:tag","content":"数组"}],["meta",{"property":"article:tag","content":"双指针"}],["meta",{"property":"article:tag","content":"快慢指针"}],["meta",{"property":"article:modified_time","content":"2025-02-25T09:48:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"026 移除有序数组中的重复项\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-25T09:48:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jayczee\\",\\"url\\":\\"https://jayczee.cn\\"}]}"]]},"headers":[{"level":2,"title":"🔗 相关链接","slug":"🔗-相关链接","link":"#🔗-相关链接","children":[]},{"level":2,"title":"📜 题目描述","slug":"📜-题目描述","link":"#📜-题目描述","children":[]},{"level":2,"title":"🧪 判题标准","slug":"🧪-判题标准","link":"#🧪-判题标准","children":[]},{"level":2,"title":"📊 示例","slug":"📊-示例","link":"#📊-示例","children":[{"level":3,"title":"示例 1","slug":"示例-1","link":"#示例-1","children":[]},{"level":3,"title":"示例 2","slug":"示例-2","link":"#示例-2","children":[]}]},{"level":2,"title":"📝 提示","slug":"📝-提示","link":"#📝-提示","children":[]},{"level":2,"title":"💡 思路","slug":"💡-思路","link":"#💡-思路","children":[]},{"level":2,"title":"💻 代码实现","slug":"💻-代码实现","link":"#💻-代码实现","children":[]}],"git":{"createdTime":1740476936000,"updatedTime":1740476936000,"contributors":[{"name":"Jayczee","username":"Jayczee","email":"jayczee@yeah.net","commits":1,"url":"https://github.com/Jayczee"}]},"readingTime":{"minutes":2.01,"words":604},"filePathRelative":"note/leet150/3-leet026.md","localizedDate":"2025年2月25日","excerpt":"<h2>🔗 相关链接</h2>\\n<p><a href=\\"https://leetcode.cn/problems/remove-duplicates-from-sorted-array/description/?envType=study-plan-v2&amp;envId=top-interview-150\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">移除有序数组中的重复项</a></p>\\n<h2>📜 题目描述</h2>\\n<p>给定一个 <strong>非严格递增排列</strong> 的数组 <code>nums</code>，需要 <strong>原地</strong> 删除重复出现的元素，使每个元素只出现一次，返回删除后数组的新长度。元素的相对顺序应该保持一致。然后返回 <code>nums</code> 中唯一元素的个数。</p>","autoDesc":true}`);export{m as comp,g as data};
