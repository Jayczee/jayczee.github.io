import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as l,o as e}from"./app-DhzwfMOa.js";const p={};function o(t,s){return e(),a("div",null,s[0]||(s[0]=[l(`<h2 id="📚-相关链接" tabindex="-1"><a class="header-anchor" href="#📚-相关链接"><span>📚 相关链接</span></a></h2><p><a href="https://leetcode.cn/problems/product-of-array-except-self/description/?envType=study-plan-v2&amp;envId=top-interview-150" target="_blank" rel="noopener noreferrer">LeetCode 238: 除自身以外数组的乘积</a></p><h2 id="📝-题目描述" tabindex="-1"><a class="header-anchor" href="#📝-题目描述"><span>📝 题目描述</span></a></h2><p>给定一个整数数组 <code>nums</code>，返回数组 <code>answer</code>，其中 <code>answer[i]</code> 等于 <code>nums</code> 中除 <code>nums[i]</code> 之外其余各元素的乘积。</p><p><strong>要求：</strong></p><ul><li>不要使用除法，且在 O(n) 时间复杂度内完成此题。</li></ul><h2 id="💡-示例" tabindex="-1"><a class="header-anchor" href="#💡-示例"><span>💡 示例</span></a></h2><h3 id="示例-1" tabindex="-1"><a class="header-anchor" href="#示例-1"><span>示例 1</span></a></h3><p><strong>输入:</strong></p><div class="language-plaintext" data-highlighter="shiki" data-ext="plaintext" data-title="plaintext" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span>nums = [1, 2, 3, 4]</span></span></code></pre></div><p><strong>输出:</strong></p><div class="language-plaintext" data-highlighter="shiki" data-ext="plaintext" data-title="plaintext" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span>[24, 12, 8, 6]</span></span></code></pre></div><h3 id="示例-2" tabindex="-1"><a class="header-anchor" href="#示例-2"><span>示例 2</span></a></h3><p><strong>输入:</strong></p><div class="language-plaintext" data-highlighter="shiki" data-ext="plaintext" data-title="plaintext" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span>nums = [-1, 1, 0, -3, 3]</span></span></code></pre></div><p><strong>输出:</strong></p><div class="language-plaintext" data-highlighter="shiki" data-ext="plaintext" data-title="plaintext" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span>[0, 0, 9, 0, 0]</span></span></code></pre></div><h2 id="⚠️-提示" tabindex="-1"><a class="header-anchor" href="#⚠️-提示"><span>⚠️ 提示</span></a></h2><ul><li><code>2 &lt;= nums.length &lt;= 10^5</code></li><li><code>-30 &lt;= nums[i] &lt;= 30</code></li><li>输入保证数组 <code>answer[i]</code> 在 32 位整数范围内</li></ul><h2 id="🔍-进阶" tabindex="-1"><a class="header-anchor" href="#🔍-进阶"><span>🔍 进阶</span></a></h2><p>可以在 O(1) 的额外空间复杂度内完成这个题目吗？（出于对空间复杂度分析的目的，输出数组不被视为额外空间。）</p><h2 id="💭-思路" tabindex="-1"><a class="header-anchor" href="#💭-思路"><span>💭 思路</span></a></h2><ol><li><p>维护两个数组，一个 <code>prefix</code> 一个 <code>suffix</code>，使用两个循环填充这两个数组：</p><ul><li><code>prefix[i]</code> 为第 <code>i</code> 个元素之前的所有元素的乘积</li><li><code>suffix[i]</code> 为第 <code>i</code> 个元素之后的所有元素的乘积</li></ul><p>因此，<code>ans[i] = prefix[i] * suffix[i]</code>。</p></li><li><p>进阶实现</p><p>由于输出数组不算额外空间，所以先将 <code>prefix</code> 放进 <code>ans</code>，再把 <code>suffix</code> 乘到 <code>ans</code> 上。</p></li></ol><h2 id="💻-代码实现" tabindex="-1"><a class="header-anchor" href="#💻-代码实现"><span>💻 代码实现</span></a></h2><h3 id="_1-维护两个数组" tabindex="-1"><a class="header-anchor" href="#_1-维护两个数组"><span>1. 维护两个数组</span></a></h3><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#569CD6;">public</span><span style="color:#4EC9B0;"> int</span><span style="color:#D4D4D4;">[] </span><span style="color:#DCDCAA;">productExceptSelf</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] nums) {</span></span>
<span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> == </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#C586C0;">        return</span><span style="color:#C586C0;"> new</span><span style="color:#4EC9B0;"> int</span><span style="color:#D4D4D4;">[]{nums[</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">], nums[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">]};</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4EC9B0;">    int</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">ans</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#4EC9B0;"> int</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">];</span></span>
<span class="line"><span style="color:#4EC9B0;">    int</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">pre</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#4EC9B0;"> int</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">];</span></span>
<span class="line"><span style="color:#4EC9B0;">    int</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">suf</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#4EC9B0;"> int</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">    for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#9CDCFE;"> i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; i &lt; </span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">; i++) {</span></span>
<span class="line"><span style="color:#C586C0;">        if</span><span style="color:#D4D4D4;"> (i == </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">            pre[i] = </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">        } </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">            pre[i] = pre[i - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">] * nums[i - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">];</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">    for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#9CDCFE;"> i</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">; i &gt;= </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; i--) {</span></span>
<span class="line"><span style="color:#C586C0;">        if</span><span style="color:#D4D4D4;"> (i == </span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">            suf[i] = </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">        } </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">            suf[i] = suf[i + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">] * nums[i + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">];</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">    for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#9CDCFE;"> i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; i &lt; </span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">; i++) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        ans[i] = pre[i] * suf[i];</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#D4D4D4;"> ans;</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre></div><h3 id="_2-动态维护-suffix-和-prefix" tabindex="-1"><a class="header-anchor" href="#_2-动态维护-suffix-和-prefix"><span>2. 动态维护 <code>suffix</code> 和 <code>prefix</code></span></a></h3><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#569CD6;">public</span><span style="color:#4EC9B0;"> int</span><span style="color:#D4D4D4;">[] </span><span style="color:#DCDCAA;">productExceptSelf</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">[] nums) {</span></span>
<span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> == </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#C586C0;">        return</span><span style="color:#C586C0;"> new</span><span style="color:#4EC9B0;"> int</span><span style="color:#D4D4D4;">[]{nums[</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">], nums[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">]};</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4EC9B0;">    int</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">ans</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#4EC9B0;"> int</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">    for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#9CDCFE;"> i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; i &lt; </span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">; i++) {</span></span>
<span class="line"><span style="color:#C586C0;">        if</span><span style="color:#D4D4D4;"> (i == </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">            ans[i] = </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">        } </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">            ans[i] = ans[i - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">] * nums[i - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">];</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4EC9B0;">    int</span><span style="color:#9CDCFE;"> R</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;">    for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">int</span><span style="color:#9CDCFE;"> i</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">; i &gt;= </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; i--) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        ans[i] *= R;</span></span>
<span class="line"><span style="color:#D4D4D4;">        R *= nums[i];</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#D4D4D4;"> ans;</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre></div>`,28)]))}const D=n(p,[["render",o]]),i=JSON.parse(`{"path":"/note/leet150/13-leet238.html","title":"238 除自身以外数组的乘积","lang":"zh-CN","frontmatter":{"title":"238 除自身以外数组的乘积","order":13,"category":["LeetCode"],"tag":["LeetCode面试经典150题","LeetCode238","中等题","数组"],"description":"📚 相关链接 LeetCode 238: 除自身以外数组的乘积 📝 题目描述 给定一个整数数组 nums，返回数组 answer，其中 answer[i] 等于 nums 中除 nums[i] 之外其余各元素的乘积。 要求： 不要使用除法，且在 O(n) 时间复杂度内完成此题。 💡 示例 示例 1 输入: 输出: 示例 2 输入: 输出: ⚠️ ...","head":[["meta",{"property":"og:url","content":"https://jayczee.cn/note/leet150/13-leet238.html"}],["meta",{"property":"og:site_name","content":"Jayczee's Blog"}],["meta",{"property":"og:title","content":"238 除自身以外数组的乘积"}],["meta",{"property":"og:description","content":"📚 相关链接 LeetCode 238: 除自身以外数组的乘积 📝 题目描述 给定一个整数数组 nums，返回数组 answer，其中 answer[i] 等于 nums 中除 nums[i] 之外其余各元素的乘积。 要求： 不要使用除法，且在 O(n) 时间复杂度内完成此题。 💡 示例 示例 1 输入: 输出: 示例 2 输入: 输出: ⚠️ ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-10T07:11:18.000Z"}],["meta",{"property":"article:tag","content":"LeetCode面试经典150题"}],["meta",{"property":"article:tag","content":"LeetCode238"}],["meta",{"property":"article:tag","content":"中等题"}],["meta",{"property":"article:tag","content":"数组"}],["meta",{"property":"article:modified_time","content":"2025-03-10T07:11:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"238 除自身以外数组的乘积\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-10T07:11:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jayczee\\",\\"url\\":\\"https://jayczee.cn\\"}]}"]]},"headers":[{"level":2,"title":"📚 相关链接","slug":"📚-相关链接","link":"#📚-相关链接","children":[]},{"level":2,"title":"📝 题目描述","slug":"📝-题目描述","link":"#📝-题目描述","children":[]},{"level":2,"title":"💡 示例","slug":"💡-示例","link":"#💡-示例","children":[{"level":3,"title":"示例 1","slug":"示例-1","link":"#示例-1","children":[]},{"level":3,"title":"示例 2","slug":"示例-2","link":"#示例-2","children":[]}]},{"level":2,"title":"⚠️ 提示","slug":"⚠️-提示","link":"#⚠️-提示","children":[]},{"level":2,"title":"🔍 进阶","slug":"🔍-进阶","link":"#🔍-进阶","children":[]},{"level":2,"title":"💭 思路","slug":"💭-思路","link":"#💭-思路","children":[]},{"level":2,"title":"💻 代码实现","slug":"💻-代码实现","link":"#💻-代码实现","children":[{"level":3,"title":"1. 维护两个数组","slug":"_1-维护两个数组","link":"#_1-维护两个数组","children":[]},{"level":3,"title":"2. 动态维护 suffix 和 prefix","slug":"_2-动态维护-suffix-和-prefix","link":"#_2-动态维护-suffix-和-prefix","children":[]}]}],"git":{"createdTime":1741590678000,"updatedTime":1741590678000,"contributors":[{"name":"Jayczee","username":"Jayczee","email":"jayczee@yeah.net","commits":1,"url":"https://github.com/Jayczee"}]},"readingTime":{"minutes":1.71,"words":512},"filePathRelative":"note/leet150/13-leet238.md","localizedDate":"2025年3月10日","excerpt":"<h2>📚 相关链接</h2>\\n<p><a href=\\"https://leetcode.cn/problems/product-of-array-except-self/description/?envType=study-plan-v2&amp;envId=top-interview-150\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">LeetCode 238: 除自身以外数组的乘积</a></p>\\n<h2>📝 题目描述</h2>\\n<p>给定一个整数数组 <code>nums</code>，返回数组 <code>answer</code>，其中 <code>answer[i]</code> 等于 <code>nums</code> 中除 <code>nums[i]</code> 之外其余各元素的乘积。</p>","autoDesc":true}`);export{D as comp,i as data};
